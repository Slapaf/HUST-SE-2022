{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u4f7f\u7528\u561f\u561f\u53ef\u6536\u4ef6\u7bb1 # 0. \u5feb\u901f\u5b9a\u4f4d # \u6211\u662f\u7528\u6237 \u4f5c\u4e3a\u8001\u5e08\u6216\u73ed\u59d4\uff0c\u6211\u8be5\u5982\u4f55\u5feb\u6377\u6536\u96c6\u5404\u79cd\u4f5c\u4e1a/\u6587\u4ef6\uff1f \u6211\u662f\u6536\u96c6\u8005 \u4f5c\u4e3a\u63d0\u4ea4\u8005\uff0c\u6211\u8be5\u5982\u4f55\u901a\u8fc7\u6536\u96c6\u94fe\u63a5\u63d0\u4ea4\u4f5c\u4e1a/\u6587\u4ef6\uff1f \u6211\u662f\u63d0\u4ea4\u8005 \u6211\u662f\u5f00\u53d1\u8005 \u4f5c\u4e3a\u5f00\u6e90\u7231\u597d\u8005\uff0c\u6211\u53ef\u4ee5\u4ece\u54ea\u91cc\u4e86\u89e3\u9879\u76ee\u7684\u8be6\u7ec6\u7ed3\u6784\uff1f \u6211\u662f\u5f00\u53d1\u8005 1. \u9879\u76ee\u8bf4\u660e # \u4f5c\u4e1a\u6536\u96c6\u7cfb\u7edf\uff0c\u4e00\u4e2a\u5e2e\u52a9\u8001\u5e08\u548c\u5b66\u59d4\u7684\u5c0f\u5de5\u5177 \u57fa\u4e8e Flask Web \u6846\u67b6\u5f00\u53d1\uff0c\u4e3b\u8981\u529f\u80fd\u5305\u62ec\uff1a \u6ce8\u518c\u7528\u6237\u521b\u5efa\u6536\u96c6\u540e\uff0c\u5206\u4eab\u6536\u96c6\u94fe\u63a5\uff0c\u4f9b\u4ed6\u4eba\u586b\u5199\u63d0\u4ea4 \u9009\u62e9\u9898\u81ea\u52a8\u6279\u6539 \u9009\u62e9\u9898\u3001\u95ee\u5377\u9898\u6570\u636e\u7edf\u8ba1 \u53ef\u8bbe\u7f6e\u5e94\u4ea4\u540d\u5355\uff0c\u5e76\u90ae\u4ef6\u50ac\u4ea4 \u4e0b\u8f7d\u63d0\u4ea4\u6587\u4ef6 2. \u6587\u6863\u7ed3\u6784 # - \u4e3b\u9875: index.md - \u6307\u5357: - \u5f00\u53d1: - DEV: developer/dev-pro.md - WEB: developer/web.md - FLASK: developer/flask.md - DB: developer/database.md - \u7528\u6237: - \u6536\u96c6\u8005: user-guide/collector.md - \u63d0\u4ea4\u8005: user-guide/submitter.md - FAQ: user-guide/FAQ.md - \u5173\u4e8e: - \u6211\u4eec: about/about-us.md - \u7248\u672c: about/release-notes.md","title":"\u4e3b\u9875"},{"location":"#_1","text":"","title":"\u6b22\u8fce\u4f7f\u7528\u561f\u561f\u53ef\u6536\u4ef6\u7bb1"},{"location":"#0","text":"\u6211\u662f\u7528\u6237 \u4f5c\u4e3a\u8001\u5e08\u6216\u73ed\u59d4\uff0c\u6211\u8be5\u5982\u4f55\u5feb\u6377\u6536\u96c6\u5404\u79cd\u4f5c\u4e1a/\u6587\u4ef6\uff1f \u6211\u662f\u6536\u96c6\u8005 \u4f5c\u4e3a\u63d0\u4ea4\u8005\uff0c\u6211\u8be5\u5982\u4f55\u901a\u8fc7\u6536\u96c6\u94fe\u63a5\u63d0\u4ea4\u4f5c\u4e1a/\u6587\u4ef6\uff1f \u6211\u662f\u63d0\u4ea4\u8005 \u6211\u662f\u5f00\u53d1\u8005 \u4f5c\u4e3a\u5f00\u6e90\u7231\u597d\u8005\uff0c\u6211\u53ef\u4ee5\u4ece\u54ea\u91cc\u4e86\u89e3\u9879\u76ee\u7684\u8be6\u7ec6\u7ed3\u6784\uff1f \u6211\u662f\u5f00\u53d1\u8005","title":"0. \u5feb\u901f\u5b9a\u4f4d"},{"location":"#1","text":"\u4f5c\u4e1a\u6536\u96c6\u7cfb\u7edf\uff0c\u4e00\u4e2a\u5e2e\u52a9\u8001\u5e08\u548c\u5b66\u59d4\u7684\u5c0f\u5de5\u5177 \u57fa\u4e8e Flask Web \u6846\u67b6\u5f00\u53d1\uff0c\u4e3b\u8981\u529f\u80fd\u5305\u62ec\uff1a \u6ce8\u518c\u7528\u6237\u521b\u5efa\u6536\u96c6\u540e\uff0c\u5206\u4eab\u6536\u96c6\u94fe\u63a5\uff0c\u4f9b\u4ed6\u4eba\u586b\u5199\u63d0\u4ea4 \u9009\u62e9\u9898\u81ea\u52a8\u6279\u6539 \u9009\u62e9\u9898\u3001\u95ee\u5377\u9898\u6570\u636e\u7edf\u8ba1 \u53ef\u8bbe\u7f6e\u5e94\u4ea4\u540d\u5355\uff0c\u5e76\u90ae\u4ef6\u50ac\u4ea4 \u4e0b\u8f7d\u63d0\u4ea4\u6587\u4ef6","title":"1. \u9879\u76ee\u8bf4\u660e"},{"location":"#2","text":"- \u4e3b\u9875: index.md - \u6307\u5357: - \u5f00\u53d1: - DEV: developer/dev-pro.md - WEB: developer/web.md - FLASK: developer/flask.md - DB: developer/database.md - \u7528\u6237: - \u6536\u96c6\u8005: user-guide/collector.md - \u63d0\u4ea4\u8005: user-guide/submitter.md - FAQ: user-guide/FAQ.md - \u5173\u4e8e: - \u6211\u4eec: about/about-us.md - \u7248\u672c: about/release-notes.md","title":"2. \u6587\u6863\u7ed3\u6784"},{"location":"about/about-us/","text":"\u6211\u4eec\u662f\u8c01 # Github \u4e3b\u9875 # Github Gitee \u4e3b\u9875 # Gitee \u8054\u7cfb\u65b9\u5f0f # \u6b66\u6c49\u5e02\u6d2a\u5c71\u533a\u73de\u55bb\u8def 1037 \u53f7\u534e\u4e2d\u79d1\u6280\u5927\u5b66\u6c81\u82d1\u5b66\u751f\u516c\u5bd3\u4e1c\u5341\u4e00\u820d \u7528\u6237\u53cd\u9988\uff1a Miracle_zjy@outlook.com","title":"\u6211\u4eec"},{"location":"about/about-us/#_1","text":"","title":"\u6211\u4eec\u662f\u8c01"},{"location":"about/about-us/#github","text":"Github","title":"Github \u4e3b\u9875"},{"location":"about/about-us/#gitee","text":"Gitee","title":"Gitee \u4e3b\u9875"},{"location":"about/about-us/#_2","text":"\u6b66\u6c49\u5e02\u6d2a\u5c71\u533a\u73de\u55bb\u8def 1037 \u53f7\u534e\u4e2d\u79d1\u6280\u5927\u5b66\u6c81\u82d1\u5b66\u751f\u516c\u5bd3\u4e1c\u5341\u4e00\u820d \u7528\u6237\u53cd\u9988\uff1a Miracle_zjy@outlook.com","title":"\u8054\u7cfb\u65b9\u5f0f"},{"location":"about/release-notes/","text":"\u7248\u672c\u8bb0\u5f55 # v0.1 (2022-11-11) # Nightly \u6d4b\u8bd5\u7248\u4e0a\u7ebf\u5566\uff01\u8fd9\u4e00\u7248\u672c\u8fd8\u5f88\u4e0d\u5b8c\u5584\uff0c\u5c1a\u672a\u5b8c\u6210\u7684\u90e8\u5206\u6709\uff1a \u652f\u6301\u7684\u6536\u96c6\u6570\u91cf\u5341\u5206\u6709\u9650 \u5230\u671f\u751f\u6210\u7edf\u8ba1\u4fe1\u606f\u672a\u5b8c\u6210 \u6536\u96c6\u6587\u4ef6\u7684\u4e0b\u8f7d\u5c1a\u672a\u5b9e\u73b0 v0.2 (2022-11-17) # Preview \u7248\u672c\u6b63\u5f0f\u53d1\u5e03\u5566\uff01\u8fd9\u4e00\u7248\u672c\u5b9e\u73b0\u4e86\u9884\u671f\u7684\u7edd\u5927\u591a\u6570\u529f\u80fd\uff1a \u652f\u6301\u7684\u6536\u96c6\u6570\u91cf\u589e\u52a0 \u652f\u6301\u5b9e\u65f6\u67e5\u770b\u6536\u96c6\u7edf\u8ba1 \u652f\u6301\u6536\u96c6\u6587\u4ef6\u7684\u4e0b\u8f7d \u53d7\u9650\u4e8e\u670d\u52a1\u5668\u7a7a\u95f4\uff0c\u5c1a\u672a\u5b8c\u6210\u7684\u529f\u80fd\u6709\uff1a \u9898\u76ee\u7b54\u6848\u6587\u672c\u67e5\u91cd \u4ee3\u7801\u9898\u76ee\u81ea\u52a8\u8bc4\u6d4b","title":"\u7248\u672c"},{"location":"about/release-notes/#_1","text":"","title":"\u7248\u672c\u8bb0\u5f55"},{"location":"about/release-notes/#v01-2022-11-11","text":"Nightly \u6d4b\u8bd5\u7248\u4e0a\u7ebf\u5566\uff01\u8fd9\u4e00\u7248\u672c\u8fd8\u5f88\u4e0d\u5b8c\u5584\uff0c\u5c1a\u672a\u5b8c\u6210\u7684\u90e8\u5206\u6709\uff1a \u652f\u6301\u7684\u6536\u96c6\u6570\u91cf\u5341\u5206\u6709\u9650 \u5230\u671f\u751f\u6210\u7edf\u8ba1\u4fe1\u606f\u672a\u5b8c\u6210 \u6536\u96c6\u6587\u4ef6\u7684\u4e0b\u8f7d\u5c1a\u672a\u5b9e\u73b0","title":"v0.1 (2022-11-11)"},{"location":"about/release-notes/#v02-2022-11-17","text":"Preview \u7248\u672c\u6b63\u5f0f\u53d1\u5e03\u5566\uff01\u8fd9\u4e00\u7248\u672c\u5b9e\u73b0\u4e86\u9884\u671f\u7684\u7edd\u5927\u591a\u6570\u529f\u80fd\uff1a \u652f\u6301\u7684\u6536\u96c6\u6570\u91cf\u589e\u52a0 \u652f\u6301\u5b9e\u65f6\u67e5\u770b\u6536\u96c6\u7edf\u8ba1 \u652f\u6301\u6536\u96c6\u6587\u4ef6\u7684\u4e0b\u8f7d \u53d7\u9650\u4e8e\u670d\u52a1\u5668\u7a7a\u95f4\uff0c\u5c1a\u672a\u5b8c\u6210\u7684\u529f\u80fd\u6709\uff1a \u9898\u76ee\u7b54\u6848\u6587\u672c\u67e5\u91cd \u4ee3\u7801\u9898\u76ee\u81ea\u52a8\u8bc4\u6d4b","title":"v0.2 (2022-11-17)"},{"location":"developer/database/","text":"\u6570\u636e\u5e93 DB \u8bbe\u8ba1 # 1. \u6570\u636e\u5e93\u8868\u7ed3\u6784\u8bbe\u8ba1 # \u6570\u636e\u5e93\u5305\u542b\u4ee5\u4e0b\u8868\u9879\uff1a \u7528\u6237\u4fe1\u606f\u8868 \u3001 \u6536\u96c6\u4fe1\u606f\u8868 \u3001 \u9898\u76ee\u4fe1\u606f\u8868 \u3001 \u9009\u9879\u4fe1\u606f\u8868 \u3001 \u7b54\u6848\u4fe1\u606f\u8868 \u3001 \u63d0\u4ea4\u4fe1\u606f\u8868 \u3001 \u5185\u5bb9\u4fe1\u606f\u8868 1.1 \u7528\u6237\u4fe1\u606f\u8868 # \u7528\u6237\u4fe1\u606f\u8868\u9879\u4ee3\u7801\u8bbe\u8ba1\u5982\u4e0b\u3002 Bases: db . Model , UserMixin \u7528\u6237\u4fe1\u606f\u8868\u3002 \u8bb0\u5f55\u5df2\u6ce8\u518c\u7528\u6237\u7684\u76f8\u5173\u4fe1\u606f\u3002 Attributes: Name Type Description id db . Interger \u4e3b\u952e\uff0c\u81ea\u589e name db . String \u7528\u6237\u6635\u79f0\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 username db . String \u7528\u6237\u540d\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff0c\u4e0d\u53ef\u91cd\u590d\uff09 password_hash db . String \u5bc6\u7801\u6563\u5217\u503c\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 userpath db . String \u7528\u6237\u7a7a\u95f4\u8def\u5f84\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff0c\u4e0d\u53ef\u91cd\u590d\uff09 email db . String \u7528\u6237\u90ae\u7bb1\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 authorization_code db . String \u90ae\u7bb1\u6388\u6743\u7801 Source code in Flask\\models.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 class User ( db . Model , UserMixin ): \"\"\" \u7528\u6237\u4fe1\u606f\u8868\u3002 \u8bb0\u5f55\u5df2\u6ce8\u518c\u7528\u6237\u7684\u76f8\u5173\u4fe1\u606f\u3002 Attributes: id (db.Interger): \u4e3b\u952e\uff0c\u81ea\u589e name (db.String): \u7528\u6237\u6635\u79f0\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 username (db.String): \u7528\u6237\u540d\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff0c\u4e0d\u53ef\u91cd\u590d\uff09 password_hash (db.String): \u5bc6\u7801\u6563\u5217\u503c\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 userpath (db.String): \u7528\u6237\u7a7a\u95f4\u8def\u5f84\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff0c\u4e0d\u53ef\u91cd\u590d\uff09 email (db.String): \u7528\u6237\u90ae\u7bb1\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 authorization_code (db.String): \u90ae\u7bb1\u6388\u6743\u7801 \"\"\" id = db . Column ( db . Integer , primary_key = True ) # \u4e3b\u952e name = db . Column ( db . String ( 30 ), nullable = False ) # \u7528\u6237\u6635\u79f0 username = db . Column ( db . String ( 30 ), nullable = False , unique = True ) # \u7528\u6237\u540d password_hash = db . Column ( db . String ( 128 ), nullable = False ) # \u5bc6\u7801\u6563\u5217\u503c userpath = db . Column ( db . String ( 50 ), nullable = False , unique = True ) # \u7528\u6237\u7a7a\u95f4\u8def\u5f84 email = db . Column ( db . String ( 30 ), nullable = False ) # \u7528\u6237\u90ae\u7bb1 authorization_code = db . Column ( db . String ( 30 )) # \u90ae\u7bb1\u6388\u6743\u7801 def set_password ( self , password : str ) -> None : \"\"\"\u8bbe\u7f6e\u5bc6\u7801 Args: password (str): \u5bc6\u7801\uff08\u660e\u6587\uff09 \"\"\" self . password_hash = generate_password_hash ( password ) # \u6839\u636e\u7528\u6237\u8f93\u5165\u7684\u5bc6\u7801\u751f\u6210\u5bc6\u7801\u6563\u5217\u503c def validate_password ( self , password : str ) -> bool : \"\"\"\u9a8c\u8bc1\u5bc6\u7801 Args: password (str): \u5bc6\u7801\uff08\u660e\u6587\uff09 Returns: \u5e03\u5c14\u503c\uff0c\u8868\u793a\u5bc6\u7801\u662f\u5426\u6b63\u786e \"\"\" return check_password_hash ( self . password_hash , password ) def set_userpath ( self ) -> None : \"\"\"\u8bbe\u7f6e\u7528\u6237\u7a7a\u95f4\u8def\u5f84\"\"\" # \u8def\u5f84\u7684\u524d\u82e5\u5e72\u4f4d\u4e3a\u7528\u6237\u540d\u548c user \u6807\u8bc6\uff0c\u540e\u9762\u7528\u968f\u673a\u5b57\u7b26\u4e32\u8865\u9f50\uff0c\u603b\u957f\u5ea6 20 \u4f4d\u3002 self . userpath = self . username + 'user' + '' . join ( random . sample ( string . ascii_letters + string . digits , 20 - len ( self . username ) - len ( 'user' )) ) def set_email ( self , email : str ) -> None : \"\"\"\u8bbe\u7f6e\u7528\u6237\u90ae\u7bb1 Args: email (str): \u90ae\u7bb1 \"\"\" self . email = email def email_authentication ( self , user_email : str = email , user_pwd : str = authorization_code , host : str = 'smtp.sina.com' ): \"\"\"\u90ae\u7bb1\u8ba4\u8bc1 Args: user_email: \u7528\u6237\u90ae\u7bb1 user_pwd: \u90ae\u7bb1\u6388\u6743\u7801 host: \u53d1\u9001\u90ae\u4ef6\u670d\u52a1\u5668\u5730\u5740 \"\"\" return yagmail . SMTP ( user = user_email , password = user_pwd , host = host ) def send_email ( self , to_email , email_title : str , email_message : str ) -> bool : \"\"\"\u53d1\u9001\u90ae\u4ef6\uff0c\u53ef\u4ee5\u5355\u53d1\u4e5f\u53ef\u4ee5\u7fa4\u53d1\uff0c\u53d6\u51b3\u4e8e\u4f20\u5165\u53c2\u6570 to_email \u7684\u7c7b\u578b Args: to_email (str | list): \u76ee\u6807\u90ae\u7bb1\u5730\u5740\uff0c\u82e5\u4e3a\u5217\u8868\u5219\u4ee3\u8868\u7fa4\u53d1 email_title (str): \u90ae\u4ef6\u6807\u9898 email_message (str): \u90ae\u4ef6\u6b63\u6587\uff0c\u53ef\u4ee5\u4f7f\u7528 HTML \u683c\u5f0f\u7684\u5b57\u7b26\u4e32 Returns: \u5e03\u5c14\u503c\uff0c\u8868\u793a\u662f\u5426\u53d1\u9001\u6210\u529f \"\"\" server = \"smtp.\" + self . email . split ( '@' )[ 1 ] if self . authorization_code is None : print ( \"\u6ca1\u6709\u90ae\u7bb1\u6388\u6743\u7801\uff01\" ) return False yag = yagmail . SMTP ( user = self . email , password = self . authorization_code , host = server ) if yag is None : print ( \"yag is None!\" ) return False if type ( to_email ) == \"str\" : # \u5355\u53d1 if re . match ( \"^.+ \\\\ @( \\\\ [?)[a-zA-Z0-9 \\\\ - \\\\ .]+ \\\\ .([a-zA-Z]{2,3}|[0-9]{1,3})( \\\\ ]?)$\" , to_email ) is None : print ( \"\u76ee\u6807\u90ae\u7bb1\u5730\u5740\u9519\u8bef\uff01\" ) return False try : yag . send ( to = to_email , subject = email_title , contents = email_message ) except smtplib . SMTPAuthenticationError : print ( \"\u6388\u6743\u7801\u9519\u8bef\uff01\" ) return True else : for email_addr in to_email : # \u7fa4\u53d1 if re . match ( \"^.+ \\\\ @( \\\\ [?)[a-zA-Z0-9 \\\\ - \\\\ .]+ \\\\ .([a-zA-Z]{2,3}|[0-9]{1,3})( \\\\ ]?)$\" , email_addr ) is None : print ( \"\u76ee\u6807\u90ae\u7bb1\u5730\u5740\u9519\u8bef\uff01\" ) return False try : yag . send ( to = email_addr , subject = email_title , contents = email_message ) except smtplib . SMTPAuthenticationError : print ( \"\u6388\u6743\u7801\u9519\u8bef\uff01\" ) return True def sub_func ( self , email_list , email_title , email_message ): self . send_email ( to_email = email_list , email_title = email_title , email_message = email_message ) print ( \"\u5df2\u53d1\u9001\" ) email_authentication ( user_email = email , user_pwd = authorization_code , host = 'smtp.sina.com' ) # \u90ae\u7bb1\u8ba4\u8bc1 Parameters: Name Type Description Default user_email str \u7528\u6237\u90ae\u7bb1 email user_pwd str \u90ae\u7bb1\u6388\u6743\u7801 authorization_code host str \u53d1\u9001\u90ae\u4ef6\u670d\u52a1\u5668\u5730\u5740 'smtp.sina.com' Source code in Flask\\models.py 66 67 68 69 70 71 72 73 74 75 76 def email_authentication ( self , user_email : str = email , user_pwd : str = authorization_code , host : str = 'smtp.sina.com' ): \"\"\"\u90ae\u7bb1\u8ba4\u8bc1 Args: user_email: \u7528\u6237\u90ae\u7bb1 user_pwd: \u90ae\u7bb1\u6388\u6743\u7801 host: \u53d1\u9001\u90ae\u4ef6\u670d\u52a1\u5668\u5730\u5740 \"\"\" return yagmail . SMTP ( user = user_email , password = user_pwd , host = host ) send_email ( to_email , email_title , email_message ) # \u53d1\u9001\u90ae\u4ef6\uff0c\u53ef\u4ee5\u5355\u53d1\u4e5f\u53ef\u4ee5\u7fa4\u53d1\uff0c\u53d6\u51b3\u4e8e\u4f20\u5165\u53c2\u6570 to_email \u7684\u7c7b\u578b Parameters: Name Type Description Default to_email str | list \u76ee\u6807\u90ae\u7bb1\u5730\u5740\uff0c\u82e5\u4e3a\u5217\u8868\u5219\u4ee3\u8868\u7fa4\u53d1 required email_title str \u90ae\u4ef6\u6807\u9898 required email_message str \u90ae\u4ef6\u6b63\u6587\uff0c\u53ef\u4ee5\u4f7f\u7528 HTML \u683c\u5f0f\u7684\u5b57\u7b26\u4e32 required Returns: Type Description bool \u5e03\u5c14\u503c\uff0c\u8868\u793a\u662f\u5426\u53d1\u9001\u6210\u529f Source code in Flask\\models.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 def send_email ( self , to_email , email_title : str , email_message : str ) -> bool : \"\"\"\u53d1\u9001\u90ae\u4ef6\uff0c\u53ef\u4ee5\u5355\u53d1\u4e5f\u53ef\u4ee5\u7fa4\u53d1\uff0c\u53d6\u51b3\u4e8e\u4f20\u5165\u53c2\u6570 to_email \u7684\u7c7b\u578b Args: to_email (str | list): \u76ee\u6807\u90ae\u7bb1\u5730\u5740\uff0c\u82e5\u4e3a\u5217\u8868\u5219\u4ee3\u8868\u7fa4\u53d1 email_title (str): \u90ae\u4ef6\u6807\u9898 email_message (str): \u90ae\u4ef6\u6b63\u6587\uff0c\u53ef\u4ee5\u4f7f\u7528 HTML \u683c\u5f0f\u7684\u5b57\u7b26\u4e32 Returns: \u5e03\u5c14\u503c\uff0c\u8868\u793a\u662f\u5426\u53d1\u9001\u6210\u529f \"\"\" server = \"smtp.\" + self . email . split ( '@' )[ 1 ] if self . authorization_code is None : print ( \"\u6ca1\u6709\u90ae\u7bb1\u6388\u6743\u7801\uff01\" ) return False yag = yagmail . SMTP ( user = self . email , password = self . authorization_code , host = server ) if yag is None : print ( \"yag is None!\" ) return False if type ( to_email ) == \"str\" : # \u5355\u53d1 if re . match ( \"^.+ \\\\ @( \\\\ [?)[a-zA-Z0-9 \\\\ - \\\\ .]+ \\\\ .([a-zA-Z]{2,3}|[0-9]{1,3})( \\\\ ]?)$\" , to_email ) is None : print ( \"\u76ee\u6807\u90ae\u7bb1\u5730\u5740\u9519\u8bef\uff01\" ) return False try : yag . send ( to = to_email , subject = email_title , contents = email_message ) except smtplib . SMTPAuthenticationError : print ( \"\u6388\u6743\u7801\u9519\u8bef\uff01\" ) return True else : for email_addr in to_email : # \u7fa4\u53d1 if re . match ( \"^.+ \\\\ @( \\\\ [?)[a-zA-Z0-9 \\\\ - \\\\ .]+ \\\\ .([a-zA-Z]{2,3}|[0-9]{1,3})( \\\\ ]?)$\" , email_addr ) is None : print ( \"\u76ee\u6807\u90ae\u7bb1\u5730\u5740\u9519\u8bef\uff01\" ) return False try : yag . send ( to = email_addr , subject = email_title , contents = email_message ) except smtplib . SMTPAuthenticationError : print ( \"\u6388\u6743\u7801\u9519\u8bef\uff01\" ) return True set_email ( email ) # \u8bbe\u7f6e\u7528\u6237\u90ae\u7bb1 Parameters: Name Type Description Default email str \u90ae\u7bb1 required Source code in Flask\\models.py 58 59 60 61 62 63 64 def set_email ( self , email : str ) -> None : \"\"\"\u8bbe\u7f6e\u7528\u6237\u90ae\u7bb1 Args: email (str): \u90ae\u7bb1 \"\"\" self . email = email set_password ( password ) # \u8bbe\u7f6e\u5bc6\u7801 Parameters: Name Type Description Default password str \u5bc6\u7801\uff08\u660e\u6587\uff09 required Source code in Flask\\models.py 29 30 31 32 33 34 35 36 def set_password ( self , password : str ) -> None : \"\"\"\u8bbe\u7f6e\u5bc6\u7801 Args: password (str): \u5bc6\u7801\uff08\u660e\u6587\uff09 \"\"\" self . password_hash = generate_password_hash ( password ) # \u6839\u636e\u7528\u6237\u8f93\u5165\u7684\u5bc6\u7801\u751f\u6210\u5bc6\u7801\u6563\u5217\u503c set_userpath () # \u8bbe\u7f6e\u7528\u6237\u7a7a\u95f4\u8def\u5f84 Source code in Flask\\models.py 49 50 51 52 53 54 55 56 def set_userpath ( self ) -> None : \"\"\"\u8bbe\u7f6e\u7528\u6237\u7a7a\u95f4\u8def\u5f84\"\"\" # \u8def\u5f84\u7684\u524d\u82e5\u5e72\u4f4d\u4e3a\u7528\u6237\u540d\u548c user \u6807\u8bc6\uff0c\u540e\u9762\u7528\u968f\u673a\u5b57\u7b26\u4e32\u8865\u9f50\uff0c\u603b\u957f\u5ea6 20 \u4f4d\u3002 self . userpath = self . username + 'user' + '' . join ( random . sample ( string . ascii_letters + string . digits , 20 - len ( self . username ) - len ( 'user' )) ) validate_password ( password ) # \u9a8c\u8bc1\u5bc6\u7801 Parameters: Name Type Description Default password str \u5bc6\u7801\uff08\u660e\u6587\uff09 required Returns: Type Description bool \u5e03\u5c14\u503c\uff0c\u8868\u793a\u5bc6\u7801\u662f\u5426\u6b63\u786e Source code in Flask\\models.py 38 39 40 41 42 43 44 45 46 47 def validate_password ( self , password : str ) -> bool : \"\"\"\u9a8c\u8bc1\u5bc6\u7801 Args: password (str): \u5bc6\u7801\uff08\u660e\u6587\uff09 Returns: \u5e03\u5c14\u503c\uff0c\u8868\u793a\u5bc6\u7801\u662f\u5426\u6b63\u786e \"\"\" return check_password_hash ( self . password_hash , password ) 1.2 \u6536\u96c6\u4fe1\u606f\u8868 # \u6536\u96c6\u4fe1\u606f\u8868\u9879\u4ee3\u7801\u8bbe\u8ba1\u5982\u4e0b\u3002 Bases: db . Model \u6536\u96c6\u8868\u3002 \u8bb0\u5f55\u5df2\u521b\u5efa\u6536\u96c6\u7684\u76f8\u5173\u4fe1\u606f\u3002 Attributes: Name Type Description id db . Integer \u4e3b\u952e creator db . String \u521b\u5efa\u4eba\u5458\u540d\u79f0\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 creator_id db . String \u521b\u5efa\u4eba\u5458ID\uff08\u5916\u952e\uff1a\u5173\u8054user.id\uff1b\u4e0d\u53ef\u4e3a\u7a7a\uff09 collection_title db . String \u6536\u96c6\u6807\u9898\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 description db . String \u6536\u96c6\u63cf\u8ff0\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 start_date db . String \u5f00\u59cb\u65f6\u95f4\uff0c\u81ea\u52a8\u8bbe\u7f6e\u4e3a\u521b\u5efa\u6536\u96c6\u7684\u65f6\u95f4\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 end_date db . String \u7ed3\u675f\u65f6\u95f4\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 status db . Enum \u6536\u96c6\u7684\u72b6\u6001\uff08'0' \u53d1\u5e03\uff0c'1' \u6682\u5b58\uff0c'2' \u5df2\u7ed3\u675f\uff0c'3' \u5df2\u5931\u6548\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 namelist_path db . String \u5e94\u4ea4\u540d\u5355\u8def\u5f84 Source code in Flask\\models.py 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 class Collection_info ( db . Model ): \"\"\" \u6536\u96c6\u8868\u3002 \u8bb0\u5f55\u5df2\u521b\u5efa\u6536\u96c6\u7684\u76f8\u5173\u4fe1\u606f\u3002 Attributes: id (db.Integer): \u4e3b\u952e creator (db.String): \u521b\u5efa\u4eba\u5458\u540d\u79f0\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 creator_id (db.String): \u521b\u5efa\u4eba\u5458ID\uff08\u5916\u952e\uff1a\u5173\u8054user.id\uff1b\u4e0d\u53ef\u4e3a\u7a7a\uff09 collection_title (db.String): \u6536\u96c6\u6807\u9898\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 description (db.String): \u6536\u96c6\u63cf\u8ff0\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 start_date (db.String): \u5f00\u59cb\u65f6\u95f4\uff0c\u81ea\u52a8\u8bbe\u7f6e\u4e3a\u521b\u5efa\u6536\u96c6\u7684\u65f6\u95f4\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 end_date (db.String): \u7ed3\u675f\u65f6\u95f4\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 status (db.Enum): \u6536\u96c6\u7684\u72b6\u6001\uff08'0' \u53d1\u5e03\uff0c'1' \u6682\u5b58\uff0c'2' \u5df2\u7ed3\u675f\uff0c'3' \u5df2\u5931\u6548\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 namelist_path (db.String): \u5e94\u4ea4\u540d\u5355\u8def\u5f84 \"\"\" # * \u6536\u96c6\u72b6\u6001\u5e38\u91cf\u5b9a\u4e49 RELEASE , SAVED , FINISHED , OVERDUE = '0' , '1' , '2' , '3' # ? \u53d1\u5e03\uff0c\u6682\u5b58\uff0c\u5df2\u7ed3\u675f\uff0c\u5df2\u5931\u6548 id = db . Column ( db . Integer , primary_key = True ) # \u4e3b\u952e creator = db . Column ( db . String ( 30 ), nullable = False ) # \u521b\u5efa\u4eba\u5458\u540d\u79f0 creator_id = db . Column ( db . Integer , db . ForeignKey ( 'user.id' , ondelete = \"CASCADE\" ), nullable = False ) # \u521b\u5efa\u4eba\u5458ID collection_title = db . Column ( db . String ( 50 ), nullable = False ) # \u6536\u96c6\u540d\u79f0 description = db . Column ( db . Text , nullable = False ) # \u6536\u96c6\u63cf\u8ff0 start_date = db . Column ( db . DateTime , nullable = False , default = datetime . datetime . now ()) # \u5f00\u59cb\u65f6\u95f4 end_date = db . Column ( db . DateTime , nullable = False ) # \u6536\u96c6\u7ed3\u675f\u65f6\u95f4 status = db . Column ( db . Enum ( RELEASE , SAVED , FINISHED , OVERDUE ), nullable = False ) # \u5f53\u524d\u72b6\u6001 collection_path = db . Column ( db . String ( 50 )) # \u5e94\u4ea4\u540d\u5355\u8def\u5f84 1.3 \u9898\u76ee\u4fe1\u606f\u8868 # \u9898\u76ee\u4fe1\u606f\u8868\u9879\u4ee3\u7801\u8bbe\u8ba1\u5982\u4e0b\u3002 Bases: db . Model \u9898\u76ee\u8868\u3002 \u8bb0\u5f55\u5df2\u521b\u5efa\u6536\u96c6\u7684\u9898\u76ee\u76f8\u5173\u4fe1\u606f\u3002 Attributes: Name Type Description id db . Integer \u4e3b\u952e collection_id db . String \u6536\u96c6id\uff08\u5916\u952e\uff1a\u5173\u8054collection_info.id\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 qno db . Integer \u9898\u76ee\u5e8f\u53f7\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 question_type db . Enum \u9898\u76ee\u7c7b\u578b\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09: '0' \u4e0a\u4f20\u6587\u4ef6\u9898; '1' \u5355\u9009; '2' \u591a\u9009; '3' \u59d3\u540d\u9898; '4' \u5b66\u53f7\u9898; '5' \u95ee\u5377\u9898(\u5355\u9009); '6' \u95ee\u5377\u9898(\u591a\u9009) question_title db . String \u95ee\u9898\u6807\u9898\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 question_description db . String \u95ee\u9898\u63cf\u8ff0 rename_rule db . String \u6587\u4ef6\u91cd\u547d\u540d\u89c4\u5219 file_path db . String \u63d0\u4ea4\u6587\u4ef6\u8def\u5f84\uff08\u4e0d\u53ef\u91cd\u590d\uff09\uff08\u6587\u4ef6\u4e0a\u4f20\u9898\u9700\u8bbe\u7f6e\uff0c\u5176\u4f59\u7c7b\u578b\u4e0d\u5fc5\uff09 Source code in Flask\\models.py 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 class Question_info ( db . Model ): \"\"\" \u9898\u76ee\u8868\u3002 \u8bb0\u5f55\u5df2\u521b\u5efa\u6536\u96c6\u7684\u9898\u76ee\u76f8\u5173\u4fe1\u606f\u3002 Attributes: id (db.Integer): \u4e3b\u952e collection_id (db.String): \u6536\u96c6id\uff08\u5916\u952e\uff1a\u5173\u8054collection_info.id\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 qno (db.Integer): \u9898\u76ee\u5e8f\u53f7\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 question_type (db.Enum): \u9898\u76ee\u7c7b\u578b\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09: '0' \u4e0a\u4f20\u6587\u4ef6\u9898; '1' \u5355\u9009; '2' \u591a\u9009; '3' \u59d3\u540d\u9898; '4' \u5b66\u53f7\u9898; '5' \u95ee\u5377\u9898(\u5355\u9009); '6' \u95ee\u5377\u9898(\u591a\u9009) question_title (db.String): \u95ee\u9898\u6807\u9898\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 question_description (db.String): \u95ee\u9898\u63cf\u8ff0 rename_rule (db.String): \u6587\u4ef6\u91cd\u547d\u540d\u89c4\u5219 file_path (db.String): \u63d0\u4ea4\u6587\u4ef6\u8def\u5f84\uff08\u4e0d\u53ef\u91cd\u590d\uff09\uff08\u6587\u4ef6\u4e0a\u4f20\u9898\u9700\u8bbe\u7f6e\uff0c\u5176\u4f59\u7c7b\u578b\u4e0d\u5fc5\uff09 \"\"\" # * \u95ee\u9898\u7c7b\u578b\u5e38\u91cf FILE_UPLOAD = '0' # ? \u89e3\u7b54\u9898 SINGLE_CHOICE = '1' # ?\uff0c\u5355\u9009 MULTI_CHOICE = '2' # ?\u591a\u9009 NAME = '3' # ?\u59d3\u540d SNO = '4' # ?\u5b66\u53f7 SINGLE_QUESTIONNAIRE = '5' # ?\u95ee\u5377\u9898\u76ee(\u5355\u9009) MULTI_QUESTIONNAIRE = '6' # ?\u95ee\u5377\u9898\u76ee(\u591a\u9009) id = db . Column ( db . Integer , primary_key = True ) # \u4e3b\u952e collection_id = db . Column ( db . Integer , db . ForeignKey ( 'collection_info.id' , ondelete = \"CASCADE\" ), nullable = False ) # \u5173\u8054\u6536\u96c6id qno = db . Column ( db . Integer , nullable = False ) # \u9898\u76ee\u5e8f\u53f7 question_type = db . Column ( db . Enum ( FILE_UPLOAD , SINGLE_CHOICE , MULTI_CHOICE , NAME , SNO , SINGLE_QUESTIONNAIRE , MULTI_QUESTIONNAIRE ), nullable = False ) # \u9898\u76ee\u7c7b\u578b question_title = db . Column ( db . String ( 50 ), nullable = False ) # \u95ee\u9898\u6807\u9898 question_description = db . Column ( db . Text ) # \u95ee\u9898\u63cf\u8ff0 rename_rule = db . Column ( db . String ( 20 )) # \u6587\u4ef6\u91cd\u547d\u540d\u89c4\u5219\uff0c\u5176\u503c\u4e3a\u9898\u76ee\u987a\u5e8f file_path = db . Column ( db . String ( 50 ), unique = True ) # \u63d0\u4ea4\u6587\u4ef6\u8def\u5f84 1.4 \u9009\u9879\u4fe1\u606f\u8868 # \u9009\u9879\u4fe1\u606f\u8868\u9879\u4ee3\u7801\u8bbe\u8ba1\u5982\u4e0b\u3002 Bases: db . Model \u95ee\u5377\u9898\u9009\u9879\u8868 \u8bb0\u5f55\u95ee\u5377\u9898\u7684\u6bcf\u4e00\u4e2a\u9009\u9879\u5185\u5bb9\u3002 Attributes: Name Type Description id db . Integer \u4e3b\u952e question_id db . Integer \u9898\u76eeid\uff08\u5916\u952e\uff1a\u5173\u8054question_info.id\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 collection_id db . Integer \u6536\u96c6id\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 qno db . Integer \u9898\u76ee\u5e8f\u53f7\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 option_sn db . Integer \u9009\u9879\u5e8f\u53f7\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 option_content db . Text \u9009\u9879\u5185\u5bb9\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 Source code in Flask\\models.py 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 class Option_info ( db . Model ): \"\"\"\u95ee\u5377\u9898\u9009\u9879\u8868 \u8bb0\u5f55\u95ee\u5377\u9898\u7684\u6bcf\u4e00\u4e2a\u9009\u9879\u5185\u5bb9\u3002 Attributes: id (db.Integer): \u4e3b\u952e question_id (db.Integer): \u9898\u76eeid\uff08\u5916\u952e\uff1a\u5173\u8054question_info.id\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 collection_id (db.Integer): \u6536\u96c6id\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 qno (db.Integer): \u9898\u76ee\u5e8f\u53f7\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 option_sn (db.Integer): \u9009\u9879\u5e8f\u53f7\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 option_content (db.Text): \u9009\u9879\u5185\u5bb9\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 \"\"\" id = db . Column ( db . Integer , primary_key = True ) # \u4e3b\u952e question_id = db . Column ( db . Integer , db . ForeignKey ( 'question_info.id' , ondelete = \"CASCADE\" ), nullable = False ) # \u5173\u8054\u9898\u76eeid collection_id = db . Column ( db . Integer , nullable = False ) # \u6536\u96c6id qno = db . Column ( db . Integer , nullable = False ) # \u9898\u76ee\u5e8f\u53f7 option_sn = db . Column ( db . Integer , nullable = False ) # \u9009\u9879\u5e8f\u53f7 option_content = db . Column ( db . Text , nullable = False ) # \u9009\u9879\u5185\u5bb9 1.5 \u7b54\u6848\u4fe1\u606f\u8868 # \u7b54\u6848\u4fe1\u606f\u8868\u9879\u4ee3\u7801\u8bbe\u8ba1\u5982\u4e0b\u3002 Bases: db . Model \u7b54\u6848\u8868\u3002 \u8bb0\u5f55\u5355\u9009\u9898\u548c\u591a\u9009\u9898\u7684\u7b54\u6848\u3002 Attributes: Name Type Description id db . Integer \u4e3b\u952e question_id db . Integer \u9898\u76eeid\uff08\u5916\u952e\uff1a\u5173\u8054question_info.id\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 collection_id db . Integer \u6536\u96c6id\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 qno db . Integer \u9898\u76ee\u5e8f\u53f7\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 answer_option db . String \u7b54\u6848\u9009\u9879\uff08\u5355\u9009\u9898\u683c\u5f0f\u4e3ax\uff0c\u591a\u9009\u9898\u683c\u5f0f\u4e3ax-x-x-\u2026\u2026\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 Source code in Flask\\models.py 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 class Answer_info ( db . Model ): \"\"\" \u7b54\u6848\u8868\u3002 \u8bb0\u5f55\u5355\u9009\u9898\u548c\u591a\u9009\u9898\u7684\u7b54\u6848\u3002 Attributes: id (db.Integer): \u4e3b\u952e question_id (db.Integer): \u9898\u76eeid\uff08\u5916\u952e\uff1a\u5173\u8054question_info.id\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 collection_id (db.Integer): \u6536\u96c6id\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 qno (db.Integer): \u9898\u76ee\u5e8f\u53f7\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 answer_option (db.String): \u7b54\u6848\u9009\u9879\uff08\u5355\u9009\u9898\u683c\u5f0f\u4e3ax\uff0c\u591a\u9009\u9898\u683c\u5f0f\u4e3ax-x-x-\u2026\u2026\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 \"\"\" id = db . Column ( db . Integer , primary_key = True ) # \u4e3b\u952e question_id = db . Column ( db . Integer , db . ForeignKey ( 'question_info.id' , ondelete = \"CASCADE\" ), nullable = False ) # \u5173\u8054\u9898\u76eeid collection_id = db . Column ( db . Integer , nullable = False ) # \u6536\u96c6id qno = db . Column ( db . Integer , nullable = False ) # \u9898\u76ee\u5e8f\u53f7 answer_option = db . Column ( db . String ( 30 ), nullable = False ) # \u7b54\u6848 1.6 \u63d0\u4ea4\u4fe1\u606f\u8868 # \u63d0\u4ea4\u4fe1\u606f\u8868\u9879\u4ee3\u7801\u8bbe\u8ba1\u5982\u4e0b\u3002 Bases: db . Model \u6536\u96c6\u63d0\u4ea4\u8bb0\u5f55 \u8bb0\u5f55\u6240\u6709\u6536\u96c6\u7684\u63d0\u4ea4\u8bb0\u5f55\u3002 Attributes: Name Type Description id db . Integer \u4e3b\u952e collection_id db . Integer \u6536\u96c6id\uff08\u5916\u952e\uff1a\u5173\u8054collection_info.id\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 collection_title db . String \u6536\u96c6\u6807\u9898\uff08\u4e0d\u53ef\u4ee5\u4e3a\u7a7a\uff09 submitter_name db . String \u63d0\u4ea4\u8005\u59d3\u540d\uff08\u4e0d\u53ef\u4ee5\u4e3a\u7a7a\uff09 submit_time db . DateTime \u63d0\u4ea4\u65f6\u95f4\uff08\u4e0d\u53ef\u4ee5\u4e3a\u7a7a\uff09\uff0c\u9ed8\u8ba4\u4e3adatetime.datetime.now() Source code in Flask\\models.py 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 class Submission_info ( db . Model ): \"\"\"\u6536\u96c6\u63d0\u4ea4\u8bb0\u5f55 \u8bb0\u5f55\u6240\u6709\u6536\u96c6\u7684\u63d0\u4ea4\u8bb0\u5f55\u3002 Attributes: id (db.Integer): \u4e3b\u952e collection_id (db.Integer): \u6536\u96c6id\uff08\u5916\u952e\uff1a\u5173\u8054collection_info.id\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 collection_title (db.String): \u6536\u96c6\u6807\u9898\uff08\u4e0d\u53ef\u4ee5\u4e3a\u7a7a\uff09 submitter_name (db.String): \u63d0\u4ea4\u8005\u59d3\u540d\uff08\u4e0d\u53ef\u4ee5\u4e3a\u7a7a\uff09 submit_time (db.DateTime): \u63d0\u4ea4\u65f6\u95f4\uff08\u4e0d\u53ef\u4ee5\u4e3a\u7a7a\uff09\uff0c\u9ed8\u8ba4\u4e3adatetime.datetime.now() \"\"\" id = db . Column ( db . Integer , primary_key = True ) # \u4e3b\u952e collection_id = db . Column ( db . Integer , db . ForeignKey ( 'collection_info.id' , ondelete = \"CASCADE\" ), nullable = False ) # \u5173\u8054\u6536\u96c6id collection_title = db . Column ( db . String ( 50 ), nullable = False ) # \u6536\u96c6\u6807\u9898 submitter_name = db . Column ( db . String ( 30 ), nullable = False ) # \u63d0\u4ea4\u8005\u540d\u79f0 submit_time = db . Column ( db . DateTime , nullable = False , default = datetime . datetime . now ()) # \u63d0\u4ea4\u65f6\u95f4 1.7 \u5185\u5bb9\u4fe1\u606f\u8868 # \u63d0\u4ea4\u5185\u5bb9\u4fe1\u606f\u8868\u9879\u4ee3\u7801\u8bbe\u8ba1\u5982\u4e0b\u3002 Bases: db . Model \u63d0\u4ea4\u5185\u5bb9\u4fe1\u606f\u8868\u3002 \u8bb0\u5f55\u6536\u96c6\u6bcf\u4e00\u9898\u7684\u586b\u5199\u60c5\u51b5\u3002 Attributes: Name Type Description id db . Integer \u4e3b\u952e submission_id db . Integer \u63d0\u4ea4\u8bb0\u5f55id\uff08\u5916\u952e\uff1a\u5173\u8054submission_info.id\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 question_id db . Integer \u9898\u76eeid\uff08\u5916\u952e\uff1a\u5173\u8054question_info.id\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 collection_id db . Integer \u6536\u96c6id\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 qno db . Integer \u9898\u76ee\u5e8f\u53f7\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 result db . String \u67d0\u4e2a\u4eba\u5bf9\u8fd9\u4e00\u9898\u7684\u586b\u5199\u7ed3\u679c\uff08\u82e5\u4e3a\u6587\u4ef6\u4e0a\u4f20\u9898\uff0c\u5219\u6b64\u5b57\u6bb5\u5b58\u653e\u4e0a\u4f20\u7684\u6587\u4ef6\u540d\u79f0\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 Source code in Flask\\models.py 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 class Submit_Content_info ( db . Model ): \"\"\" \u63d0\u4ea4\u5185\u5bb9\u4fe1\u606f\u8868\u3002 \u8bb0\u5f55\u6536\u96c6\u6bcf\u4e00\u9898\u7684\u586b\u5199\u60c5\u51b5\u3002 Attributes: id (db.Integer): \u4e3b\u952e submission_id (db.Integer): \u63d0\u4ea4\u8bb0\u5f55id\uff08\u5916\u952e\uff1a\u5173\u8054submission_info.id\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 question_id (db.Integer): \u9898\u76eeid\uff08\u5916\u952e\uff1a\u5173\u8054question_info.id\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 collection_id (db.Integer): \u6536\u96c6id\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 qno (db.Integer): \u9898\u76ee\u5e8f\u53f7\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 result (db.String): \u67d0\u4e2a\u4eba\u5bf9\u8fd9\u4e00\u9898\u7684\u586b\u5199\u7ed3\u679c\uff08\u82e5\u4e3a\u6587\u4ef6\u4e0a\u4f20\u9898\uff0c\u5219\u6b64\u5b57\u6bb5\u5b58\u653e\u4e0a\u4f20\u7684\u6587\u4ef6\u540d\u79f0\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 \"\"\" id = db . Column ( db . Integer , primary_key = True ) # \u4e3b\u952e submission_id = db . Column ( db . Integer , db . ForeignKey ( 'submission_info.id' , ondelete = \"CASCADE\" ), nullable = False ) # \u5173\u8054\u63d0\u4ea4\u8bb0\u5f55id question_id = db . Column ( db . Integer , db . ForeignKey ( 'question_info.id' , ondelete = \"CASCADE\" ), nullable = False ) # \u9898\u76eeid collection_id = db . Column ( db . Integer , nullable = False ) # \u6536\u96c6id qno = db . Column ( db . Integer , nullable = False ) # \u95ee\u9898\u5e8f\u53f7 result = db . Column ( db . String ( 50 ), nullable = False ) # \u586b\u5199\u7ed3\u679c 2. \u6570\u636e\u5e93 API \u8bbe\u8ba1 # \u6570\u636e\u5e93\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u64cd\u4f5c\u63a5\u53e3\u65b9\u4fbf Flask \u89c6\u56fe\u51fd\u6570\u5904\u7406\u6570\u636e\u3002 2.1 \u5e10\u53f7\u4fe1\u606f\u76f8\u5173 # 2.1.1 \u4fee\u6539\u5bc6\u7801 # \u4fee\u6539\u5bc6\u7801\u901a\u8fc7 modify_password \u5b9e\u73b0\u3002 \u4fee\u6539\u5bc6\u7801 Parameters: Name Type Description Default user_id int \u7528\u6237id required original_pswd str \u539f\u59cb\u5bc6\u7801 required new_pswd str \u65b0\u5bc6\u7801 required Returns: Type Description int \u82e5\u4e3a -1\uff0c\u5219\u7528\u6237 id \u4e0d\u5b58\u5728\uff1b\u82e5\u4e3a 0\uff0c\u5219\u539f\u5bc6\u7801\u9519\u8bef\uff1b\u82e5\u4e3a 1\uff0c\u5219\u4fee\u6539\u6210\u529f\u3002 Source code in Flask\\db_manipulation.py 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 def modify_password ( user_id : int , original_pswd : str , new_pswd : str ) -> int : \"\"\"\u4fee\u6539\u5bc6\u7801 Args: user_id: \u7528\u6237id original_pswd: \u539f\u59cb\u5bc6\u7801 new_pswd: \u65b0\u5bc6\u7801 Returns: \u82e5\u4e3a -1\uff0c\u5219\u7528\u6237 id \u4e0d\u5b58\u5728\uff1b\u82e5\u4e3a 0\uff0c\u5219\u539f\u5bc6\u7801\u9519\u8bef\uff1b\u82e5\u4e3a 1\uff0c\u5219\u4fee\u6539\u6210\u529f\u3002 \"\"\" user = User . query . filter_by ( id = user_id ) . first () # \u5728\u6570\u636e\u5e93\u4e2d\u67e5\u8be2\u7528\u6237 # \u8be5\u7528\u6237id\u4e0d\u5b58\u5728 if user is None : return - 1 # \u9a8c\u8bc1\u539f\u5bc6\u7801 if not user . validate_password ( original_pswd ): return 0 # \u4fee\u6539\u5bc6\u7801 user . set_password ( new_pswd ) db . session . commit () return 1 # \u4fee\u6539\u6210\u529f 2.1.2 \u4fee\u6539\u4e2a\u4eba\u4fe1\u606f # \u4fee\u6539\u4e2a\u4eba\u4fe1\u606f\u901a\u8fc7 modify_personal_info \u5b9e\u73b0\u3002 \u4fee\u6539\u4e2a\u4eba\u4fe1\u606f\uff08\u6635\u79f0\u3001\u90ae\u7bb1\u3001\u90ae\u7bb1\u6388\u6743\u7801\uff09 Parameters: Name Type Description Default user_id int \u7528\u6237id required new_name str \u65b0\u6635\u79f0 required new_email str \u65b0\u90ae\u7bb1 required authorization_code str \u90ae\u7bb1\u6388\u6743\u7801 required Returns: Type Description int \u82e5\u4e3a-1\uff0c\u5219\u7528\u6237id\u4e0d\u5b58\u5728\uff1b\u82e5\u4e3a1\uff0c\u5219\u4fee\u6539\u6210\u529f\u3002 Source code in Flask\\db_manipulation.py 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 def modify_personal_info ( user_id : int , new_name : str , new_email : str , authorization_code : str ) -> int : \"\"\"\u4fee\u6539\u4e2a\u4eba\u4fe1\u606f\uff08\u6635\u79f0\u3001\u90ae\u7bb1\u3001\u90ae\u7bb1\u6388\u6743\u7801\uff09 Args: user_id: \u7528\u6237id new_name: \u65b0\u6635\u79f0 new_email: \u65b0\u90ae\u7bb1 authorization_code: \u90ae\u7bb1\u6388\u6743\u7801 Returns: \u82e5\u4e3a-1\uff0c\u5219\u7528\u6237id\u4e0d\u5b58\u5728\uff1b\u82e5\u4e3a1\uff0c\u5219\u4fee\u6539\u6210\u529f\u3002 \"\"\" user = User . query . get ( user_id ) # \u8be5\u7528\u6237id\u4e0d\u5b58\u5728 if user is None : return - 1 # \u4fee\u6539\u4e2a\u4eba\u4fe1\u606f user . name = new_name user . email = new_email user . authorization_code = authorization_code user . email_authentication ( user_email = user . email , user_pwd = user . authorization_code ) db . session . commit () return 1 # \u4fee\u6539\u6210\u529f 2.2 \u6536\u96c6\u4fe1\u606f\u76f8\u5173 # 2.2.1 \u6dfb\u52a0\u6536\u96c6\u95ee\u5377 # \u6dfb\u52a0\u6536\u96c6\u901a\u8fc7 add_FC \u5b9e\u73b0\u3002 \u5c06\u65b0\u521b\u5efa\u7684\u6536\u96c6\u5b58\u5165\u6570\u636e\u5e93\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u6536\u96c6\u5206\u914d\u4e00\u4e2a\u6536\u96c6\u8005\u7528\u6237\u76ee\u5f55\u4e0b\u7684\u5b50\u76ee\u5f55\uff0c\u603b\u957f\u5ea6\u4e3a X \u4f4d\uff0c\u6700\u540e\u4e00\u4f4d\u4ee3\u8868\u6536\u96c6 id\u3002 Parameters: Name Type Description Default question_list list \u9898\u76ee\u4fe1\u606f\u5217\u8868 required user_id int \u7528\u6237id required Returns: Name Type Description collection_id int \u6536\u96c6id Source code in Flask\\db_manipulation.pydef add_FC ( question_list : list , user_id : int ) -> int : \"\"\"\u5c06\u65b0\u521b\u5efa\u7684\u6536\u96c6\u5b58\u5165\u6570\u636e\u5e93\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u6536\u96c6\u5206\u914d\u4e00\u4e2a\u6536\u96c6\u8005\u7528\u6237\u76ee\u5f55\u4e0b\u7684\u5b50\u76ee\u5f55\uff0c\u603b\u957f\u5ea6\u4e3a X \u4f4d\uff0c\u6700\u540e\u4e00\u4f4d\u4ee3\u8868\u6536\u96c6 id\u3002 Args: question_list: \u9898\u76ee\u4fe1\u606f\u5217\u8868 user_id: \u7528\u6237id Returns: collection_id (int): \u6536\u96c6id \"\"\" # ! \u6587\u4ef6\u7c7b\u578b\u53ef\u80fd\u6709\u591a\u4e2a\uff0c\u8bbe\u7f6e\u4e00\u4e2a\u8ba1\u6570\u5668\u8bb0\u5f55\u662f\u7b2c\u51e0\u4e2a\u6587\u4ef6 file_counter = 0 # * \u6587\u4ef6\u8ba1\u6570\u5668 list_of_question_dict = deepcopy ( question_list ) # ! \u4fdd\u5b58\u5143\u7ec4\u7684\u5217\u8868\uff0c\u4e0e\u5b57\u5178\u7c7b\u578b\u7684\u533a\u522b\u5728\u4e8e\u662f\u5426\u5bf9 key \u53bb\u91cd question_multidict = MultiDict ( question_list ) # \u524d\u7aef\u4f20\u6765\u7684deadLine\u4e3astring\u7c7b\u578b\uff0c\u5728\u6b64\u8f6c\u5316\u4e3adatetime\u7c7b\u578b deadline = question_multidict [ 'deadline' ] # ! \u89e3\u51b3 00 \u79d2\u7684\u95ee\u9898 if len ( deadline ) < 19 : deadline += ':00' deadline = deadline . replace ( \"T\" , \" \" ) question_multidict [ 'deadline' ] = datetime . strptime ( deadline , '%Y-%m- %d %H:%M:%S' ) # * \u751f\u6210\u5e94\u4ea4\u540d\u5355\u8def\u5f84 # collection_counter = Collection_info.query.filter_by(creator_id=user_id).count() # \u83b7\u53d6\u5f53\u524d\u7528\u6237\u521b\u5efa\u7684\u6536\u96c6\u603b\u6570 # namelist_path = current_user.userpath + '/' + str(collection_counter) + ''.join( # random.sample(string.ascii_letters + string.digits, 8) # ) # * \u603b\u957f\u5ea6\u4e3a 20 + 1 + 1 + 8 = 30 \u4f4d # \u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u6536\u96c6\u5bf9\u8c61,\u66f4\u65b0\u6587\u4ef6\u6536\u96c6\u4e3b\u8868\u91cc collection = Collection_info ( creator = question_multidict [ 'collector' ], creator_id = user_id , collection_title = question_multidict [ 'collectionTitle' ], description = question_multidict [ 'description' ], end_date = question_multidict [ 'deadline' ], # namelist_path=namelist_path, status = Collection_info . SAVED ) db . session . add ( collection ) db . session . commit () # \u63d0\u4ea4\u6570\u636e\u5e93\u4f1a\u8bdd\uff0c\u5426\u5219 id \u4e3aNone collection_id = collection . id # ! \u751f\u6210\u6587\u4ef6\u5b58\u50a8\u8def\u5f84\uff0c\u6700\u540e\u4e00\u4f4d\u56fa\u5b9a\u4e3a\u6536\u96c6 id # ! \u751f\u6210\u4f4d\u7f6e\u4e3a\uff1aFileStorage / userpath / filepath # * \u603b\u957f\u5ea6\u4e3a 20 + 5 + 10 = 35 \u4f4d # file_path = current_user.userpath + '/file' + ''.join( # random.sample(string.ascii_letters + string.digits, 4 - len(str(collection_id))) # ) + str(collection_id) file_path = os . path . join ( APP_FILE , current_user . userpath , 'file' + '' . join ( random . sample ( string . ascii_letters + string . digits , 10 - len ( str ( collection_id ))) ) + str ( collection_id ) ) os . makedirs ( file_path ) # \u521b\u5efa\u8be5\u6536\u96c6\u7684\u6587\u4ef6\u5b58\u50a8\u76ee\u5f55 # ! \u751f\u6210\u5e94\u4ea4\u540d\u5355\u8def\u5f84\uff0c\u4e0e\u6587\u4ef6\u5b58\u50a8\u8def\u5f84\u76f8\u540c # ! \u5e94\u4ea4\u540d\u5355\u4ee5 .csv \u683c\u5f0f\u5b58\u653e\u5728 filepath \u4e0b # ! \u751f\u6210\u4f4d\u7f6e\u4e3a\uff1aFileStorage / userpath / filepath / xxx.csv # * \u66f4\u65b0 Collection_info \u7684 collection_path \u5c5e\u6027 collection = Collection_info . query . filter_by ( id = collection_id ) collection . update ({ 'collection_path' : file_path }) db . session . commit () key_list = list ( question_multidict . keys ()) # \u95ee\u9898\u7684\u952e\u5217\u8868 question_key_list = [ question_key for question_key in key_list if \"question\" in question_key ] seq = 0 # \u66f4\u65b0\u95ee\u9898\u4e3b\u8868\u548c\u7b54\u6848\u8868 for question_key in question_key_list : seq += 1 # ? \u82e5\u4e3a\u59d3\u540d\u9898 if \"name\" in question_key : question = Question_info ( collection_id = collection_id , qno = seq , question_type = Question_info . NAME , question_title = question_multidict [ question_key ], question_description = question_multidict [ f 'detail { seq } ' ]) db . session . add ( question ) db . session . commit () # ? \u82e5\u4e3a\u5b66\u53f7\u9898 if \"sno\" in question_key : question = Question_info ( collection_id = collection_id , qno = seq , question_type = Question_info . SNO , question_title = question_multidict [ question_key ], question_description = question_multidict [ f 'detail { seq } ' ]) db . session . add ( question ) db . session . commit () # ? \u82e5\u4e3a\u5355\u9009\u9898 elif \"radio\" in question_key : question = Question_info ( collection_id = collection_id , qno = seq , question_type = Question_info . SINGLE_CHOICE , question_title = question_multidict [ question_key ], question_description = question_multidict [ f 'detail { seq } ' ]) db . session . add ( question ) db . session . commit () # \u5b58\u9009\u62e9\u9898\u7b54\u6848 answer = Answer_info ( collection_id = collection_id , question_id = question . id , qno = seq , answer_option = question_multidict [ f 'checked_radio { seq } ' ]) db . session . add ( answer ) db . session . commit () # ? \u82e5\u4e3a\u591a\u9009\u9898 elif \"multipleChoice\" in question_key : question = Question_info ( collection_id = collection_id , qno = seq , question_type = Question_info . MULTI_CHOICE , question_title = question_multidict [ question_key ], question_description = question_multidict [ f 'detail { seq } ' ]) db . session . add ( question ) db . session . commit () # \u5b58\u9009\u62e9\u9898\u7b54\u6848 ano_list = question_multidict . getlist ( f 'checked_mulans { seq } ' ) ano = '-' . join ( ano_list ) answer = Answer_info ( collection_id = collection_id , question_id = question . id , qno = seq , answer_option = ano ) db . session . add ( answer ) db . session . commit () # ? \u82e5\u4e3a\u95ee\u5377\u9898 elif \"question_qnaire\" in question_key : if question_multidict [ f 'choose_type { seq } ' ] == 'single' : qn_type = Question_info . SINGLE_QUESTIONNAIRE else : qn_type = Question_info . MULTI_QUESTIONNAIRE question = Question_info ( collection_id = collection_id , qno = seq , question_type = qn_type , question_title = question_multidict [ question_key ], question_description = question_multidict [ f 'detail { seq } ' ]) db . session . add ( question ) db . session . commit () # \u5b58\u95ee\u5377\u9898\u76ee\u5404\u9009\u9879\u7684\u5185\u5bb9 option_content = question_multidict . getlist ( f 'qn_option { seq } ' ) for i in range ( len ( option_content )): option = Option_info ( collection_id = collection_id , question_id = question . id , qno = seq , option_sn = i , option_content = option_content [ i ]) db . session . add ( option ) db . session . commit () # ? \u82e5\u4e3a\u6587\u4ef6\u4e0a\u4f20\u9898 elif \"file\" in question_key : # \u786e\u5b9a\u6587\u4ef6\u91cd\u547d\u540d\u89c4\u5219 file_counter += 1 rename_rule = [] rename_rule_list = [] # * \u91cd\u547d\u540d\u6240\u9700\u7684\u9898\u76ee question_num = str ( seq ) for elem in list_of_question_dict : if elem [ 0 ] == \"checked_topic\" + question_num : rename_rule_list . append ( elem [ 1 ]) # TODO \u903b\u8f91\u6709\u5f85\u4f18\u5316 cnt = 0 for elem in list_of_question_dict : if elem [ 1 ] not in rename_rule_list : continue rename_rule . append ( re . findall ( r \"\\d+\" , elem [ 0 ])[ 0 ]) # ! \u5f85\u6dfb\u52a0\u5206\u9694\u7b26 cnt += 1 if cnt >= len ( rename_rule_list ): # * \u9632\u6b62\u83b7\u53d6\u5230\u6587\u4ef6\u540e\u9762\u7684\u91cd\u547d\u540d\u89c4\u5219 break rename_rule = '-' . join ( rename_rule ) if rename_rule == '' : rename_rule = None question = Question_info ( collection_id = collection_id , qno = seq , question_type = Question_info . FILE_UPLOAD , question_title = question_multidict [ question_key ], question_description = question_multidict [ f 'detail { seq } ' ], rename_rule = rename_rule , # * \u547d\u540d\u89c4\u5219\u7528 - \u5206\u9694\uff0c\u6570\u5b57\u4ee3\u8868\u9898\u76ee\u5e8f\u53f7 # file_path=file_path + \"/\" + id_int_to_str( # file_counter # ) # ! \u521b\u5efa\u4e00\u4e2a\u4ee5 file_counter \u547d\u540d\u7684\u5b50\u76ee\u5f55 # ! \u521b\u5efa\u4e00\u4e2a\u4ee5 file_counter \u547d\u540d\u7684\u5b50\u76ee\u5f55 # file_path=os.path.join( # file_path, # id_int_to_str(file_counter) # ) file_path = os . path . join ( file_path , str ( file_counter ) ) ) db . session . add ( question ) db . session . commit () path = os . path . join ( APP_FILE , question . file_path ) print ( \"\u7b2c\" , seq , \"\u9898\u7684\u6587\u4ef6\u5b58\u50a8\u8def\u5f84\uff1a\" , path ) # ! \u8c03\u8bd5 try : os . makedirs ( path ) # \u521b\u5efa\u8be5\u9898\u7684\u6587\u4ef6\u5b58\u50a8\u76ee\u5f55 except OSError : print ( \"\u6587\u4ef6\u5b58\u50a8\u8def\u5f84\u9519\u8bef\uff01\" ) return collection_id 2.2.2 \u5220\u9664\u6536\u96c6\u95ee\u5377 # \u5220\u9664\u6536\u96c6\u901a\u8fc7 delete_collection \u5b9e\u73b0\u3002 \u5220\u9664id\u4e3acollection_id\u7684\u6536\u96c6\u5728\u6570\u636e\u5e93\u4e2d\u7684\u6240\u6709\u76f8\u5173\u4fe1\u606f Parameters: Name Type Description Default collection_id int \u6536\u96c6id required Source code in Flask\\db_manipulation.py 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 def delete_collection ( collection_id : int ) -> None : \"\"\"\u5220\u9664id\u4e3acollection_id\u7684\u6536\u96c6\u5728\u6570\u636e\u5e93\u4e2d\u7684\u6240\u6709\u76f8\u5173\u4fe1\u606f Args: collection_id: \u6536\u96c6id \"\"\" Submit_Content_info . query . filter_by ( collection_id = collection_id ) . delete () Submission_info . query . filter_by ( collection_id = collection_id ) . delete () Option_info . query . filter_by ( collection_id = collection_id ) . delete () Answer_info . query . filter_by ( collection_id = collection_id ) . delete () # \u5220\u9664\u8be5\u6536\u96c6\u7684\u5b58\u50a8\u8def\u5f84 file_path = Collection_info . query . get ( collection_id ) . collection_path file_path = Path ( os . path . join ( APP_FILE , file_path )) shutil . rmtree ( file_path ) Question_info . query . filter_by ( collection_id = collection_id ) . delete () Collection_info . query . filter_by ( id = collection_id ) . delete () db . session . commit () 2.2.3 \u67e5\u770b\u6536\u96c6\u4fe1\u606f # \u67e5\u770b\u6536\u96c6\u4fe1\u606f\u901a\u8fc7 get_question_dict \u5b9e\u73b0\u3002 \u83b7\u53d6id\u4e3acollection_id\u7684\u6536\u96c6\u7684\u76f8\u5173\u4fe1\u606f Parameters: Name Type Description Default collection_id int \u6536\u96c6id required Returns: Type Description dict \u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u542b\u8be5\u6536\u96c6\u7684\u76f8\u5173\u4fe1\u606f\uff08\u6536\u96c6\u6807\u9898\u3001\u6536\u96c6\u63cf\u8ff0\u3001\u521b\u5efa\u8005\u3001\u622a\u6b62\u65f6\u95f4\u3001\u9898\u76ee\u7b49\u7b49\uff09\u3002 \u683c\u5f0f\u5982\u4e0b\uff1a [('collectionTitle', 'ceshi'), ('collector', '\u51ef'), ('deadline', '2022-11-18T22:31:49'), ('description', ''), ('question_name1', '\u59d3\u540d'), ('detail1', ''), ('question_sno2', '\u5b66\u53f7'), ('detail2', ''), ('question_file3', '\u6587\u4ef6'), ('detail3', ''), ('question_radio4', '\u5355\u9009\u9898'), ('detail4', ''), ('checked_radio4', 'A'), ('question_multipleChoice5', '\u591a\u9009\u9898'), ('detail5', ''), ('checked_mulans5', 'B'), ('checked_mulans5', 'C'), ('question_qnaire6', '\u95ee\u5377\u9898\u76ee'), ('detail6', ''), ('qn_option6', 'asdf'), ('qn_option6', 'adff'), ('choose_type6', 'single')] Source code in Flask\\db_manipulation.py 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 def get_question_dict ( collection_id : int ) -> dict : \"\"\"\u83b7\u53d6id\u4e3acollection_id\u7684\u6536\u96c6\u7684\u76f8\u5173\u4fe1\u606f Args: collection_id: \u6536\u96c6id Returns: (dict): \u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u542b\u8be5\u6536\u96c6\u7684\u76f8\u5173\u4fe1\u606f\uff08\u6536\u96c6\u6807\u9898\u3001\u6536\u96c6\u63cf\u8ff0\u3001\u521b\u5efa\u8005\u3001\u622a\u6b62\u65f6\u95f4\u3001\u9898\u76ee\u7b49\u7b49\uff09\u3002 \u683c\u5f0f\u5982\u4e0b\uff1a [('collectionTitle', 'ceshi'), ('collector', '\u51ef'), ('deadline', '2022-11-18T22:31:49'), ('description', ''), ('question_name1', '\u59d3\u540d'), ('detail1', ''), ('question_sno2', '\u5b66\u53f7'), ('detail2', ''), ('question_file3', '\u6587\u4ef6'), ('detail3', ''), ('question_radio4', '\u5355\u9009\u9898'), ('detail4', ''), ('checked_radio4', 'A'), ('question_multipleChoice5', '\u591a\u9009\u9898'), ('detail5', ''), ('checked_mulans5', 'B'), ('checked_mulans5', 'C'), ('question_qnaire6', '\u95ee\u5377\u9898\u76ee'), ('detail6', ''), ('qn_option6', 'asdf'), ('qn_option6', 'adff'), ('choose_type6', 'single')] \"\"\" seq = 0 question = {} collection = Collection_info . query . get ( collection_id ) if collection is None : return None seq += 1 question [ f ' { seq } _collectionTitle' ] = collection . collection_title seq += 1 question [ f ' { seq } _collector' ] = collection . creator seq += 1 question [ f ' { seq } _deadline' ] = collection . end_date . strftime ( \"%Y-%m- %d %H:%M:%S\" ) seq += 1 question [ f ' { seq } _description' ] = collection . description question_list = Question_info . query . filter_by ( collection_id = collection_id ) . order_by ( \"qno\" ) . all () for q in question_list : # \u82e5\u662f\u59d3\u540d\u9898 if q . question_type == Question_info . NAME : seq += 1 question [ f ' { seq } _question_name { q . qno } ' ] = q . question_title seq += 1 question [ f ' { seq } _detail { q . qno } ' ] = q . question_description # \u82e5\u662f\u59d3\u540d\u9898 if q . question_type == Question_info . SNO : seq += 1 question [ f ' { seq } _question_sno { q . qno } ' ] = q . question_title seq += 1 question [ f ' { seq } _detail { q . qno } ' ] = q . question_description # \u82e5\u662f\u6587\u4ef6\u4e0a\u4f20\u9898 if q . question_type == Question_info . FILE_UPLOAD : seq += 1 question [ f ' { seq } _question_file { q . qno } ' ] = q . question_title seq += 1 question [ f ' { seq } _detail { q . qno } ' ] = q . question_description # \u91cd\u547d\u540d\u89c4\u5219 if q . rename_rule is None : seq += 1 question [ f ' { seq } _checked_topic { q . qno } ' ] = '' else : qno_list = list ( map ( int , q . rename_rule . split ( '-' ))) for qno in qno_list : seq += 1 question [ f ' { seq } _checked_topic { q . qno } ' ] = Question_info . query . \\ filter_by ( collection_id = collection_id , qno = qno ) . first () . question_title # \u82e5\u662f\u5355\u9009\u9898 if q . question_type == Question_info . SINGLE_CHOICE : seq += 1 question [ f ' { seq } _question_radio { q . qno } ' ] = q . question_title seq += 1 question [ f ' { seq } _detail { q . qno } ' ] = q . question_description # \u5355\u9009\u9898\u7b54\u6848 seq += 1 question [ f ' { seq } _checked_radio { q . qno } ' ] = Answer_info . query . \\ filter_by ( question_id = q . id ) . first () . answer_option # \u82e5\u662f\u591a\u9009\u9898 if q . question_type == Question_info . MULTI_CHOICE : seq += 1 question [ f ' { seq } _question_multipleChoice { q . qno } ' ] = q . question_title seq += 1 question [ f ' { seq } _detail { q . qno } ' ] = q . question_description # \u591a\u9009\u9898\u7b54\u6848 answer_list = Answer_info . query . filter_by ( question_id = q . id ) . first () . answer_option . split ( '-' ) for answer in answer_list : seq += 1 question [ f ' { seq } _checked_mulans { q . qno } ' ] = answer # \u82e5\u662f\u95ee\u5377\u9898 if q . question_type == Question_info . SINGLE_QUESTIONNAIRE or \\ q . question_type == Question_info . MULTI_QUESTIONNAIRE : seq += 1 question [ f ' { seq } _question_qnaire { q . qno } ' ] = q . question_title seq += 1 question [ f ' { seq } _detail { q . qno } ' ] = q . question_description option_list = Option_info . query . filter_by ( question_id = q . id ) . order_by ( \"option_sn\" ) . all () for option in option_list : seq += 1 question [ f ' { seq } _qn_option { q . qno } ' ] = option . option_content if q . question_type == Question_info . SINGLE_QUESTIONNAIRE : seq += 1 question [ f ' { seq } _choose_type { q . qno } ' ] = \"single\" else : seq += 1 question [ f ' { seq } _choose_type { q . qno } ' ] = \"multiple\" return question 2.2.4 \u4fee\u6539\u6536\u96c6\u4fe1\u606f # \u4fee\u6539\u5df2\u521b\u5efa\u6536\u96c6\u7684\u4fe1\u606f\u901a\u8fc7 modify_collection \u5b9e\u73b0\u3002 \u4fee\u6539\u5df2\u521b\u5efa\u7684\u6536\u96c6 Parameters: Name Type Description Default collection_id int \u6536\u96c6id required question_list list \u95ee\u9898\u4fe1\u606f\u5217\u8868 required Source code in Flask\\db_manipulation.py 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 def modify_collection ( collection_id : int , question_list : list ) -> None : \"\"\"\u4fee\u6539\u5df2\u521b\u5efa\u7684\u6536\u96c6 Args: collection_id: \u6536\u96c6id question_list: \u95ee\u9898\u4fe1\u606f\u5217\u8868 \"\"\" question_multidict = MultiDict ( question_list ) # \u524d\u7aef\u4f20\u6765\u7684deadLine\u4e3astring\u7c7b\u578b\uff0c\u5728\u6b64\u8f6c\u5316\u4e3adatetime\u7c7b\u578b deadline = question_multidict [ 'deadline' ] if len ( deadline ) < 19 : deadline += ':00' # ! \u89e3\u51b3 00 \u79d2\u7684\u95ee\u9898 deadline = deadline . replace ( \"T\" , \" \" ) question_multidict [ 'deadline' ] = datetime . strptime ( deadline , '%Y-%m- %d %H:%M:%S' ) # \u66f4\u65b0Collection_info\u8868\u4e2d\u7684\u4fe1\u606f collection = Collection_info . query . filter_by ( id = collection_id ) collection . update ({ 'start_date' : datetime . now (), 'collection_title' : question_multidict [ 'collectionTitle' ], 'creator' : question_multidict [ 'collector' ], 'description' : question_multidict [ 'description' ], 'end_date' : question_multidict [ 'deadline' ]}) db . session . commit () # \u95ee\u9898\u7684\u952e\u5217\u8868 key_list = list ( question_multidict . keys ()) question_key_list = [ question_key for question_key in key_list if \"question\" in question_key ] seq = 0 for question_key in question_key_list : seq += 1 question = Question_info . query . filter_by ( collection_id = collection_id , qno = seq ) if 'name' in question_key : question . update ({ 'question_title' : question_multidict [ f 'question_name { seq } ' ], 'question_description' : question_multidict [ f 'detail { seq } ' ]}) elif 'sno' in question_key : question . update ({ 'question_title' : question_multidict [ f 'question_sno { seq } ' ], 'question_description' : question_multidict [ f 'detail { seq } ' ]}) elif 'file' in question_key : # \u786e\u5b9a\u6587\u4ef6\u91cd\u547d\u540d\u89c4\u5219 rename_rule = [] rename_rule_list = [] # * \u91cd\u547d\u540d\u6240\u9700\u7684\u9898\u76ee question_num = str ( seq ) for elem in question_list : if elem [ 0 ] == \"checked_topic\" + question_num : rename_rule_list . append ( elem [ 1 ]) cnt = 0 for elem in question_list : if elem [ 1 ] not in rename_rule_list : continue rename_rule . append ( re . findall ( r \"\\d+\" , elem [ 0 ])[ 0 ]) # ! \u5f85\u6dfb\u52a0\u5206\u9694\u7b26 cnt += 1 if cnt >= len ( rename_rule_list ): # * \u9632\u6b62\u83b7\u53d6\u5230\u6587\u4ef6\u540e\u9762\u7684\u91cd\u547d\u540d\u89c4\u5219 break rename_rule = '-' . join ( rename_rule ) if rename_rule == '' : rename_rule = None question . update ({ 'question_title' : question_multidict [ f 'question_file { seq } ' ], 'question_description' : question_multidict [ f 'detail { seq } ' ], 'rename_rule' : rename_rule }) elif 'radio' in question_key : question . update ({ 'question_title' : question_multidict [ f 'question_radio { seq } ' ], 'question_description' : question_multidict [ f 'detail { seq } ' ]}) # \u66f4\u65b0\u7b54\u6848 answer = Answer_info . query . filter_by ( collection_id = collection_id , qno = seq ) answer . update ({ 'answer_option' : question_multidict [ f 'checked_radio { seq } ' ]}) elif 'multipleChoice' in question_key : question . update ({ 'question_title' : question_multidict [ f 'question_multipleChoice { seq } ' ], 'question_description' : question_multidict [ f 'detail { seq } ' ]}) # \u66f4\u65b0\u7b54\u6848 ano_list = question_multidict . getlist ( f 'checked_mulans { seq } ' ) ano = '-' . join ( ano_list ) answer = Answer_info . query . filter_by ( collection_id = collection_id , qno = seq ) answer . update ({ 'answer_option' : ano }) elif 'qnaire' in question_key : question . update ({ 'question_title' : question_multidict [ f 'question_qnaire { seq } ' ], 'question_description' : question_multidict [ f 'detail { seq } ' ]}) if question_multidict [ f 'choose_type { seq } ' ] == 'single' : question . update ({ 'question_type' : Question_info . SINGLE_QUESTIONNAIRE }) else : question . update ({ 'question_type' : Question_info . MULTI_QUESTIONNAIRE }) # \u5148\u5220\u9664\u539f\u6765\u7684\u9009\u9879\u5185\u5bb9\uff0c\u5728\u521b\u5efa\u65b0\u7684 Option_info . query . filter_by ( question_id = question . first () . id ) . delete () # \u66f4\u65b0\u9009\u9879 option_content = question_multidict . getlist ( f 'qn_option { seq } ' ) for index , value in enumerate ( option_content ): option = Option_info ( collection_id = collection_id , question_id = question . first () . id , qno = seq , option_sn = index , option_content = value ) db . session . add ( option ) db . session . commit () 2.2.5 \u83b7\u53d6\u63d0\u4ea4\u4fe1\u606f # \u83b7\u53d6\u67d0\u4e2a\u6536\u96c6\u7684\u63d0\u4ea4\u4fe1\u606f\u901a\u8fc7 submission_record \u5b9e\u73b0\u3002 \u83b7\u53d6id\u4e3acollection_id\u7684\u6536\u96c6\u7684\u63d0\u4ea4\u8bb0\u5f55\uff08\u59d3\u540d\uff0c\u63d0\u4ea4\u65f6\u95f4\uff0c\u6587\u4ef6\u6570\u91cf\uff0c\u6587\u4ef6\u8be6\u60c5\uff09 Parameters: Name Type Description Default collection_id int \u6536\u96c6id required Returns: Type Description list \u4e00\u4e2a\u5143\u7ec4\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7ec4\u8868\u793a\u4e00\u6761\u63d0\u4ea4\u4fe1\u606f\u3002 For example: [('\u8ba1\u80dc\u7fd4', datetime.datetime(2022, 11, 5, 20, 25, 32, 142115), 2, ['jsx1.pdf', 'jsx2.doc']), ('\u5f20\u96bd\u7fca', datetime.datetime(2022, 11, 5, 20, 25, 32, 142115), 1, ['zjy1.pdf'])] Source code in Flask\\db_manipulation.py 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 def submission_record ( collection_id : int ) -> list : \"\"\"\u83b7\u53d6id\u4e3acollection_id\u7684\u6536\u96c6\u7684\u63d0\u4ea4\u8bb0\u5f55\uff08\u59d3\u540d\uff0c\u63d0\u4ea4\u65f6\u95f4\uff0c\u6587\u4ef6\u6570\u91cf\uff0c\u6587\u4ef6\u8be6\u60c5\uff09 Args: collection_id: \u6536\u96c6id Returns: (list): \u4e00\u4e2a\u5143\u7ec4\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7ec4\u8868\u793a\u4e00\u6761\u63d0\u4ea4\u4fe1\u606f\u3002 For example: [('\u8ba1\u80dc\u7fd4', datetime.datetime(2022, 11, 5, 20, 25, 32, 142115), 2, ['jsx1.pdf', 'jsx2.doc']), ('\u5f20\u96bd\u7fca', datetime.datetime(2022, 11, 5, 20, 25, 32, 142115), 1, ['zjy1.pdf'])] \"\"\" # \u83b7\u53d6\u63d0\u4ea4\u540d\u5355\u5217\u8868 name_list = Submission_info . query . \\ filter_by ( collection_id = collection_id ) . \\ order_by ( \"id\" ) . \\ with_entities ( Submission_info . submitter_name ) . \\ all () name_list = list ( map ( itemgetter ( 0 ), name_list )) # \u83b7\u53d6\u63d0\u4ea4\u65f6\u95f4\u5217\u8868 time_list = Submission_info . query . \\ filter_by ( collection_id = collection_id ) . \\ order_by ( \"id\" ) . \\ with_entities ( Submission_info . submit_time ) . \\ all () time_list = list ( map ( itemgetter ( 0 ), time_list )) # \u83b7\u53d6\u63d0\u4ea4\u4fe1\u606fid\u5217\u8868 submission_id_list = Submission_info . query . \\ filter_by ( collection_id = collection_id ) . \\ order_by ( 'id' ) . \\ with_entities ( Submission_info . id ) . \\ all () submission_id_list = list ( map ( itemgetter ( 0 ), submission_id_list )) # \u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u9898\u7684\u95ee\u9898id\u5217\u8868 question_id_list = Question_info . query . \\ filter_by ( collection_id = collection_id , question_type = Question_info . FILE_UPLOAD ) . \\ with_entities ( Question_info . id ) . all () question_id_list = list ( map ( itemgetter ( 0 ), question_id_list )) file_num_list = [] for id in submission_id_list : num = Submit_Content_info . query . \\ filter ( Submit_Content_info . submission_id == id , Submit_Content_info . question_id . in_ ( question_id_list )) . count () file_num_list . append ( num ) # \u6784\u5efa\u6587\u4ef6\u8be6\u60c5\u5217\u8868 file_list = [] for id in submission_id_list : file = Submit_Content_info . query . filter ( Submit_Content_info . submission_id == id , Submit_Content_info . question_id . in_ ( question_id_list )) . \\ with_entities ( Submit_Content_info . result ) . \\ all () file = list ( map ( itemgetter ( 0 ), file )) file_list . append ( file ) record = list ( zip ( name_list , time_list , file_num_list , file_list )) # \u5bf9\u5143\u7ec4\u5217\u8868\u6839\u636esubmit_time\u8fdb\u884c\u964d\u5e8f\u6392\u5e8f record = list ( reversed ( sorted ( record , key = lambda x : ( x [ 1 ] . timestamp (), x [ 0 ])))) return record \u5bf9\u5e94\u7684\u53e6\u4e00\u4e2a\u7248\u672c\u662f submission_record_v2 \uff0c\u76f8\u6bd4 submission_record \u591a\u8fd4\u56de\u4e86\u63d0\u4ea4 id\u3002 \u83b7\u53d6id\u4e3acollection_id\u7684\u6536\u96c6\u7684\u63d0\u4ea4\u8bb0\u5f55\uff08\u59d3\u540d\uff0c\u63d0\u4ea4\u65f6\u95f4\uff0c\u6587\u4ef6\u6570\u91cf\uff0c\u6587\u4ef6\u8be6\u60c5\uff09 Parameters: Name Type Description Default collection_id int \u6536\u96c6id required Returns: Type Description list \u4e00\u4e2a\u5143\u7ec4\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7ec4\u8868\u793a\u4e00\u6761\u63d0\u4ea4\u4fe1\u606f\uff0c\u5143\u7ec4\u6309Submission.id\u6392\u5e8f\u3002 \u6bcf\u4e2a\u5143\u7ec4\u683c\u5f0f\u4e3a\uff08\u63d0\u4ea4\u8bb0\u5f55id: int, \u59d3\u540d: string, \u63d0\u4ea4\u65f6\u95f4: datetime, \u6587\u4ef6\u6570\u91cf: int, \u6587\u4ef6\u8be6\u60c5: list\uff09 \u4f8b\u5982: [(1, '\u8ba1\u80dc\u7fd4', datetime.datetime(2022, 11, 5, 20, 25, 32, 142115), 2, ['jsx1.pdf', 'jsx2.doc']), (2, '\u5f20\u96bd\u7fca', datetime.datetime(2022, 11, 5, 20, 25, 32, 142115), 1, ['zjy1.pdf'])] Source code in Flask\\db_manipulation.py 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 def submission_record_v2 ( collection_id : int ) -> list : \"\"\"\u83b7\u53d6id\u4e3acollection_id\u7684\u6536\u96c6\u7684\u63d0\u4ea4\u8bb0\u5f55\uff08\u59d3\u540d\uff0c\u63d0\u4ea4\u65f6\u95f4\uff0c\u6587\u4ef6\u6570\u91cf\uff0c\u6587\u4ef6\u8be6\u60c5\uff09 Args: collection_id: \u6536\u96c6id Returns: (list): \u4e00\u4e2a\u5143\u7ec4\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7ec4\u8868\u793a\u4e00\u6761\u63d0\u4ea4\u4fe1\u606f\uff0c\u5143\u7ec4\u6309Submission.id\u6392\u5e8f\u3002 \u6bcf\u4e2a\u5143\u7ec4\u683c\u5f0f\u4e3a\uff08\u63d0\u4ea4\u8bb0\u5f55id: int, \u59d3\u540d: string, \u63d0\u4ea4\u65f6\u95f4: datetime, \u6587\u4ef6\u6570\u91cf: int, \u6587\u4ef6\u8be6\u60c5: list\uff09 \u4f8b\u5982: [(1, '\u8ba1\u80dc\u7fd4', datetime.datetime(2022, 11, 5, 20, 25, 32, 142115), 2, ['jsx1.pdf', 'jsx2.doc']), (2, '\u5f20\u96bd\u7fca', datetime.datetime(2022, 11, 5, 20, 25, 32, 142115), 1, ['zjy1.pdf'])] \"\"\" # \u83b7\u53d6\u63d0\u4ea4\u8bb0\u5f55id id_list = Submission_info . query . \\ filter_by ( collection_id = collection_id ) . \\ order_by ( \"id\" ) . \\ with_entities ( Submission_info . id ) . \\ all () id_list = list ( map ( itemgetter ( 0 ), id_list )) # \u83b7\u53d6\u63d0\u4ea4\u540d\u5355\u5217\u8868 name_list = Submission_info . query . \\ filter_by ( collection_id = collection_id ) . \\ order_by ( \"id\" ) . \\ with_entities ( Submission_info . submitter_name ) . \\ all () name_list = list ( map ( itemgetter ( 0 ), name_list )) # \u83b7\u53d6\u63d0\u4ea4\u65f6\u95f4\u5217\u8868 time_list = Submission_info . query . \\ filter_by ( collection_id = collection_id ) . \\ order_by ( \"id\" ) . \\ with_entities ( Submission_info . submit_time ) . \\ all () time_list = list ( map ( itemgetter ( 0 ), time_list )) # \u83b7\u53d6\u63d0\u4ea4\u4fe1\u606fid\u5217\u8868 submission_id_list = Submission_info . query . \\ filter_by ( collection_id = collection_id ) . \\ order_by ( 'id' ) . \\ with_entities ( Submission_info . id ) . \\ all () submission_id_list = list ( map ( itemgetter ( 0 ), submission_id_list )) # \u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u9898\u7684\u95ee\u9898id\u5217\u8868 question_id_list = Question_info . query . \\ filter_by ( collection_id = collection_id , question_type = Question_info . FILE_UPLOAD ) . \\ with_entities ( Question_info . id ) . all () question_id_list = list ( map ( itemgetter ( 0 ), question_id_list )) file_num_list = [] for id in submission_id_list : num = Submit_Content_info . query . \\ filter ( Submit_Content_info . submission_id == id , Submit_Content_info . question_id . in_ ( question_id_list )) . count () file_num_list . append ( num ) # \u6784\u5efa\u6587\u4ef6\u8be6\u60c5\u5217\u8868 file_list = [] for id in submission_id_list : file = Submit_Content_info . query . filter ( Submit_Content_info . submission_id == id , Submit_Content_info . question_id . in_ ( question_id_list )) . \\ with_entities ( Submit_Content_info . result ) . \\ all () file = list ( map ( itemgetter ( 0 ), file )) file_list . append ( file ) record = list ( zip ( id_list , name_list , time_list , file_num_list , file_list )) # \u5bf9\u5143\u7ec4\u5217\u8868\u6839\u636esubmit_time\u8fdb\u884c\u964d\u5e8f\u6392\u5e8f record = list ( reversed ( sorted ( record , key = lambda x : ( x [ 2 ] . timestamp (), x [ 0 ])))) return record 2.2.6 \u6dfb\u52a0\u63d0\u4ea4\u4fe1\u606f # \u5411\u6570\u636e\u5e93\u4e2d\u6dfb\u52a0\u7528\u6237\u586b\u5199\u7684\u5185\u5bb9\u901a\u8fc7 save_submission \u5b9e\u73b0\u3002 \u4fdd\u5b58\u6536\u96c6\u63d0\u4ea4\u5185\u5bb9 Parameters: Name Type Description Default submission_list list \u63d0\u4ea4\u4fe1\u606f\u5217\u8868 required collection_id int \u6536\u96c6id required file werkzeug . datastructures . ImmutableMultiDict \u7f51\u9875\u63d0\u4ea4\u8868\u5355\u4e2d\u7684\u6587\u4ef6\u6570\u636e required Returns: Type Description int \u82e5\u63d0\u4ea4\u65f6\u95f4\u8d85\u8fc7\u6536\u96c6\u622a\u6b62\u65f6\u95f4\uff0c\u5219\u8fd4\u56de-1\uff1b int \u82e5\u672a\u8d85\u65f6\uff0c\u5219\u8fd4\u56de\u63d0\u4ea4\u8bb0\u5f55id\u3002 Source code in Flask\\db_manipulation.py 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 def save_submission ( submission_list : list , collection_id : int , file : werkzeug . datastructures . ImmutableMultiDict ) -> int : \"\"\"\u4fdd\u5b58\u6536\u96c6\u63d0\u4ea4\u5185\u5bb9 Args: submission_list: \u63d0\u4ea4\u4fe1\u606f\u5217\u8868 collection_id: \u6536\u96c6id file: \u7f51\u9875\u63d0\u4ea4\u8868\u5355\u4e2d\u7684\u6587\u4ef6\u6570\u636e Returns: \u82e5\u63d0\u4ea4\u65f6\u95f4\u8d85\u8fc7\u6536\u96c6\u622a\u6b62\u65f6\u95f4\uff0c\u5219\u8fd4\u56de-1\uff1b \u82e5\u672a\u8d85\u65f6\uff0c\u5219\u8fd4\u56de\u63d0\u4ea4\u8bb0\u5f55id\u3002 \"\"\" submission_multidict = MultiDict ( submission_list ) key_list = list ( submission_multidict . keys ()) # \u63d0\u53d6\u95ee\u9898\u7684\u952e\u503c\u5217\u8868 name_key_list = list ( filter ( lambda x : x . find ( \"name\" ) >= 0 , key_list )) if len ( name_key_list ) != 0 : name_key = name_key_list [ 0 ] qno = re . findall ( r \"\\d+\" , name_key )[ 0 ] # \u521b\u5efa\u4e00\u4e2a\u63d0\u4ea4\u8bb0\u5f55\uff0c\u5e76\u52a0\u5165\u6570\u636e\u5e93 submission = Submission_info ( collection_id = collection_id , submitter_name = submission_multidict [ 'submit_name' + qno ], submit_time = datetime . now ()) else : submission = Submission_info ( collection_id = collection_id , submitter_name = '' , submit_time = datetime . now ()) # ! \u5224\u65ad\u63d0\u4ea4\u65f6\u95f4\u662f\u5426\u8d85\u8fc7\u622a\u6b62\u65f6\u95f4 deadline = Collection_info . query . get ( collection_id ) . end_date diff = ( submission . submit_time - deadline ) . total_seconds () if diff > 0 : print ( '\u63d0\u4ea4\u65f6\u95f4\u8d85\u65f6\uff01' ) return - 1 # \u82e5\u672a\u8d85\u65f6 submission . collection_title = Collection_info . query . get ( collection_id ) . collection_title db . session . add ( submission ) db . session . commit () submission_id = submission . id # \u83b7\u5f97\u8be5\u63d0\u4ea4\u8bb0\u5f55\u7684id key_list = [ key for key in key_list if \"question\" in key ] seq = 0 for key in key_list : seq += 1 submit_content = Submit_Content_info ( submission_id = submission_id , collection_id = collection_id , qno = seq ) question_id = Question_info . query . filter_by ( collection_id = collection_id , qno = seq ) . first () . id submit_content . question_id = question_id # \u82e5\u4e3a\u59d3\u540d\u9898 if \"name\" in key : submit_content . result = submission_multidict [ f 'submit_name { seq } ' ] # \u82e5\u4e3a\u5b66\u53f7\u9898 elif \"sno\" in key : submit_content . result = submission_multidict [ f 'submit_sno { seq } ' ] # \u82e5\u4e3a\u6587\u4ef6\u4e0a\u4f20\u9898 elif \"file\" in key : filename = file . get ( f 'submit_file { seq } ' ) . filename submit_content . result = filename # \u82e5\u4e3a\u5355\u9009\u9898 elif \"radio\" in key : submit_content . result = submission_multidict [ f 'submit_checked_radio { seq } ' ] # \u82e5\u4e3a\u591a\u9009\u9898 elif \"multipleChoice\" in key : result = submission_multidict . getlist ( f \"submit_checked_mulans { seq } \" ) result = '-' . join ( result ) submit_content . result = result elif \"qnaire\" in key : result = submission_multidict . getlist ( f \"submit_checked_qnaire { seq } \" ) result = '-' . join ( result ) submit_content . result = result db . session . add ( submit_content ) db . session . commit () return submission_id 2.2.7 \u63d0\u4ea4\u6587\u4ef6\u5b58\u50a8 # \u5c06\u63d0\u4ea4\u8005\u4e0a\u4f20\u7684\u6587\u4ef6\u5b58\u50a8\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u901a\u8fc7 file_upload \u5b9e\u73b0\u3002 \u5c06\u63d0\u4ea4\u7684\u6587\u4ef6\u91cd\u547d\u540d\u540e\uff0c\u5b58\u50a8\u5230\u9898\u76ee\u76f8\u5e94\u7684\u8def\u5f84\u4e2d Parameters: Name Type Description Default collection_id int \u6536\u96c6id required question_list list \u95ee\u9898\u4fe1\u606f\u5217\u8868 required file werkzeug . datastructures . ImmutableMultiDict \u7f51\u9875\u63d0\u4ea4\u8868\u5355\u4e2d\u7684\u6587\u4ef6\u6570\u636e required Returns: Type Description werkzeug . datastructures . ImmutableMultiDict \u8fd4\u56de\u91cd\u547d\u540d\u540e\u7684\u8868\u5355\u4e2d\u7684\u6587\u4ef6\u6570\u636e\uff0c\u4ee5\u4fbf\u8c03\u7528save_submission\u51fd\u6570\u65f6\u4f7f\u7528 Source code in Flask\\db_manipulation.py 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 def file_upload ( collection_id : int , question_list : list , file : werkzeug . datastructures . ImmutableMultiDict ) -> werkzeug . datastructures . ImmutableMultiDict : \"\"\"\u5c06\u63d0\u4ea4\u7684\u6587\u4ef6\u91cd\u547d\u540d\u540e\uff0c\u5b58\u50a8\u5230\u9898\u76ee\u76f8\u5e94\u7684\u8def\u5f84\u4e2d Args: collection_id: \u6536\u96c6id question_list: \u95ee\u9898\u4fe1\u606f\u5217\u8868 file: \u7f51\u9875\u63d0\u4ea4\u8868\u5355\u4e2d\u7684\u6587\u4ef6\u6570\u636e Returns: \u8fd4\u56de\u91cd\u547d\u540d\u540e\u7684\u8868\u5355\u4e2d\u7684\u6587\u4ef6\u6570\u636e\uff0c\u4ee5\u4fbf\u8c03\u7528save_submission\u51fd\u6570\u65f6\u4f7f\u7528 \"\"\" question_multidict = MultiDict ( question_list ) key_list = list ( question_multidict . keys ()) file_key_list = list ( filter ( lambda x : 'file' in x , key_list )) submit_key_list = list ( filter ( lambda x : 'submit' in x , key_list )) for file_key in file_key_list : qno_str = re . findall ( r \"\\d+\" , file_key )[ 0 ] question = Question_info . query . filter_by ( collection_id = collection_id , qno = int ( qno_str )) . first () f = file [ 'submit_file' + qno_str ] # \u786e\u5b9a\u6587\u4ef6\u5b58\u50a8\u8def\u5f84 # path = './FileStorage/' + question.file_path path = os . path . join ( APP_FILE , question . file_path ) # \u91cd\u547d\u540d\u6587\u4ef6 rename_rule = question . rename_rule if rename_rule is not None : # \u82e5\u91cd\u547d\u540d\u89c4\u5219\u4e0d\u4e3a\u7a7a filename_list = f . filename . split ( '.' ) # \u5c06\u6587\u4ef6\u540d\u5206\u4e3a\u540d\u79f0\u548c\u540e\u7f00\u4e24\u90e8\u5206\uff0c\u4fbf\u4e8e\u540e\u9762\u4fee\u6539\u540d\u79f0 new_filename = '' rename_qno_list = rename_rule . split ( '-' ) # \u91cd\u547d\u540d\u4f9d\u8d56\u7684\u9898\u76ee\u5e8f\u53f7\u5217\u8868 for index , qno in enumerate ( rename_qno_list ): key = list ( filter ( lambda x : qno in x , submit_key_list ))[ 0 ] new_filename += question_multidict [ key ] if index != len ( rename_qno_list ) - 1 : new_filename += '_' filename_list [ 0 ] = new_filename f . filename = '.' . join ( filename_list ) # \u4fee\u6539\u6587\u4ef6\u540d # print(\"\u91cd\u547d\u540d\u540e\u6587\u4ef6\u540d\u4e3a\uff1a\", f.filename) # \u4fdd\u5b58\u6587\u4ef6\u5230\u6307\u5b9a\u8def\u5f84 f . save ( os . path . join ( path , f . filename )) return file 2.3 \u72b6\u6001\u66f4\u65b0\u76f8\u5173 # 2.3.1 \u8ba1\u7b97\u6536\u96c6\u622a\u6b62\u5012\u8ba1\u65f6 # \u8ba1\u7b97\u67d0\u4e2a\u6536\u96c6\u8fd8\u6709\u591a\u957f\u65f6\u95f4\u622a\u6b62\u7684\u5012\u8ba1\u65f6\u901a\u8fc7 deadline_countdown \u5b9e\u73b0\u3002 \u622a\u6b62\u5012\u8ba1\u65f6 Parameters: Name Type Description Default collection_id int \u6536\u96c6id required Returns: Type Description Datetime \u622a\u6b62\u5012\u8ba1\u65f6\u3002 Source code in Flask\\db_manipulation.py 594 595 596 597 598 599 600 601 602 603 604 605 def deadline_countdown ( collection_id : int ): \"\"\" \u622a\u6b62\u5012\u8ba1\u65f6 Args: collection_id: \u6536\u96c6id Returns: (Datetime): \u622a\u6b62\u5012\u8ba1\u65f6\u3002 \"\"\" current_time = datetime . now () # \u83b7\u53d6\u5f53\u524d\u65f6\u95f4 deadline = Collection_info . query . get ( collection_id ) . end_date # \u67e5\u8be2\u95ee\u5377\u622a\u6b62\u65f6\u95f4 return deadline - current_time # \u8fd4\u56de\u5012\u8ba1\u65f6 2.3.4 \u4fee\u6539\u6536\u96c6\u72b6\u6001\u4e3a\u622a\u6b62 # \u5c06\u6536\u96c6\u7684\u72b6\u6001\u4fee\u6539\u4e3a\u201c\u5df2\u622a\u6b62\u201d\u901a\u8fc7 stop_collection \u5b9e\u73b0\u3002 \u505c\u6b62\u6536\u96c6 Parameters: Name Type Description Default collection_id int \u6536\u96c6id required action_list list \u64cd\u4f5c\u7801\u5217\u8868 required Source code in Flask\\db_manipulation.py 952 953 954 955 956 957 958 959 960 961 962 963 964 def stop_collection ( collection_id : int , action_list : list ) -> None : \"\"\"\u505c\u6b62\u6536\u96c6 Args: collection_id: \u6536\u96c6id action_list: \u64cd\u4f5c\u7801\u5217\u8868 \"\"\" collection = Collection_info . query . filter_by ( id = collection_id ) collection . update ({ 'status' : Collection_info . FINISHED }) # \u72b6\u6001\u6807\u8bb0\u4e3a\u5df2\u622a\u6b62 new_ddl = action_list [ 2 ] new_ddl = datetime . strptime ( new_ddl , '%Y-%m- %d %H:%M:%S' ) collection . update ({ 'end_date' : new_ddl }) db . session . commit () 2.4 \u7edf\u8ba1\u6c47\u603b\u76f8\u5173 # 2.4.1 \u7edf\u8ba1\u63d0\u4ea4\u6570\u91cf # \u7edf\u8ba1\u63d0\u4ea4\u6570\u91cf\u901a\u8fc7 count_submission \u5b9e\u73b0\u3002 \u7edf\u8ba1\u4e00\u4e2a\u6536\u96c6\u7684\u63d0\u4ea4\u6570\u91cf Parameters: Name Type Description Default collection_id int \u6536\u96c6id None Returns: Type Description int \u82e5collection_id\u4e0d\u4e3a None\uff0c\u5219\u8fd4\u56de\u8be5\u95ee\u5377\u7684\u63d0\u4ea4\u6570\u91cf\uff0c\u662f\u4e00\u4e2a\u6574\u6570\uff1b\u5426\u5219\u8fd4\u56deNone\u3002 Source code in Flask\\db_manipulation.py 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 def count_submission ( collection_id : int = None ) -> int : \"\"\"\u7edf\u8ba1\u4e00\u4e2a\u6536\u96c6\u7684\u63d0\u4ea4\u6570\u91cf Args: collection_id: \u6536\u96c6id Returns: \u82e5collection_id\u4e0d\u4e3a None\uff0c\u5219\u8fd4\u56de\u8be5\u95ee\u5377\u7684\u63d0\u4ea4\u6570\u91cf\uff0c\u662f\u4e00\u4e2a\u6574\u6570\uff1b\u5426\u5219\u8fd4\u56deNone\u3002 \"\"\" # \u5148\u770b\u662f\u5426\u7ed9\u4e86\u53c2\u6570collection_id if collection_id is not None : return Submission_info . query . filter_by ( collection_id = collection_id ) . count () return None 2.4.2 \u7edf\u8ba1\u5df2\u6536\u6587\u4ef6\u6570 # \u7edf\u8ba1\u5df2\u6536\u6587\u4ef6\u6570\u901a\u8fc7 count_filenum \u5b9e\u73b0\u3002 \u7edf\u8ba1\u4e00\u4e2a\u6536\u96c6\u7684\u5df2\u6536\u6587\u4ef6\u6570 Parameters: Name Type Description Default collection_id int \u6536\u96c6id None Returns: Type Description int \u82e5collection_id\u4e0d\u4e3aNone\uff0c\u5219\u8fd4\u56de\u8be5\u95ee\u5377\u7684\u5df2\u6536\u6587\u4ef6\u6570\uff0c\u662f\u4e00\u4e2a\u6574\u6570\uff1b\u5426\u5219\u8fd4\u56deNone\u3002 Source code in Flask\\db_manipulation.py 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 def count_filenum ( collection_id : int = None ) -> int : \"\"\"\u7edf\u8ba1\u4e00\u4e2a\u6536\u96c6\u7684\u5df2\u6536\u6587\u4ef6\u6570 Args: collection_id: \u6536\u96c6id Returns: \u82e5collection_id\u4e0d\u4e3aNone\uff0c\u5219\u8fd4\u56de\u8be5\u95ee\u5377\u7684\u5df2\u6536\u6587\u4ef6\u6570\uff0c\u662f\u4e00\u4e2a\u6574\u6570\uff1b\u5426\u5219\u8fd4\u56deNone\u3002 \"\"\" # \u82e5\u6ca1\u7ed9\u53c2\u6570question_id\uff0c\u4f46\u7ed9\u4e86\u53c2\u6570collection_id if collection_id is not None : # \u67e5\u8be2\u6536\u96c6\u4e2d\u6240\u6709\u6587\u4ef6\u4e0a\u4f20\u9898\u7684id question_id_list = Question_info . query . filter_by ( collection_id = collection_id , question_type = Question_info . FILE_UPLOAD ) . with_entities ( Question_info . id ) . all () question_id_list = list ( map ( itemgetter ( 0 ), question_id_list )) file_num = 0 # \u904d\u5386\u8be5\u6536\u96c6\u4e2d\u6240\u6709\u6587\u4ef6\u4e0a\u4f20\u9898\uff0c\u7edf\u8ba1\u5df2\u6536\u6587\u4ef6\u603b\u6570 for q_id in question_id_list : # path = './FileStorage/' + Question_info.query.filter_by(id=q_id).first().file_path path = os . path . join ( APP_FILE , Question_info . query . filter_by ( id = q_id ) . first () . file_path ) files = os . listdir ( path ) file_num += len ( files ) return file_num return None 2.4.3 \u83b7\u53d6\u6536\u96c6\u4fe1\u606f\u548c\u63d0\u4ea4\u8bb0\u5f55 # \u83b7\u53d6\u6536\u96c6\u4fe1\u606f\u548c\u6307\u5b9a id \u7684\u7528\u6237\u63d0\u4ea4\u5185\u5bb9\u901a\u8fc7 get_submission_dict \u5b9e\u73b0\u3002 \u83b7\u53d6id\u4e3acollection_id\u7684\u6536\u96c6\u3001\u63d0\u4ea4\u8bb0\u5f55id\u4e3asubmission_id\u7684\u7528\u6237\u63d0\u4ea4\u5185\u5bb9\u4fe1\u606f Parameters: Name Type Description Default collection_id int \u6536\u96c6id required submission_id int \u63d0\u4ea4\u8bb0\u5f55id required Returns: Type Description dict \u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u542b\u8be5\u63d0\u4ea4\u8bb0\u5f55\u4e2d\u7528\u6237\u7684\u63d0\u4ea4\u5185\u5bb9\u3002 \u683c\u5f0f\u5982\u4e0b\uff1a {'1_collectionTitle': '\u6838\u9178\u68c0\u6d4b', '2_collector': '\u5f20\u4e09', '3_deadline': '2022-11-15 15:23:09', '4_description': '', '5_question_name1': '\u59d3\u540d', '6_detail1': '', '7_submit_name1': '\u738b\u5e7f\u51ef', '8_question_sno2': '\u5b66\u53f7', '9_detail2': '', '10_submit_sno2': 'U202012345', '11_question_file3': '\u6587\u4ef6', '12_detail3': '', '13_submit_file3': '\u7cfb\u7edf\u8bbe\u8ba1.md', '14_question_radio4': '\u5355\u9009\u9898', '15_detail4': '', '16_checked_radio4': 'A', '17_submit_radio4': 'B', '18_question_multipleChoice5': '\u591a\u9009\u9898', '19_detail5': '', '20_checked_mulans5': 'C', '21_checked_mulans5': 'D', '22_submit_mulans5': 'A', '23_submit_mulans5': 'B', '24_question_qnaire6': '\u95ee\u5377\u9898\u76ee', '25_detail6': '\u662f\u5426\u5df2\u505a\u6838\u9178', '26_qn_option6': '\u662f', '27_qn_option6': '\u5426', '28_submit_qnaire6': '2'} Source code in Flask\\db_manipulation.py 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 def get_submission_dict ( collection_id : int , submission_id : int ) -> dict : \"\"\"\u83b7\u53d6id\u4e3acollection_id\u7684\u6536\u96c6\u3001\u63d0\u4ea4\u8bb0\u5f55id\u4e3asubmission_id\u7684\u7528\u6237\u63d0\u4ea4\u5185\u5bb9\u4fe1\u606f Args: collection_id: \u6536\u96c6id submission_id: \u63d0\u4ea4\u8bb0\u5f55id Returns: (dict): \u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u542b\u8be5\u63d0\u4ea4\u8bb0\u5f55\u4e2d\u7528\u6237\u7684\u63d0\u4ea4\u5185\u5bb9\u3002 \u683c\u5f0f\u5982\u4e0b\uff1a {'1_collectionTitle': '\u6838\u9178\u68c0\u6d4b', '2_collector': '\u5f20\u4e09', '3_deadline': '2022-11-15 15:23:09', '4_description': '', '5_question_name1': '\u59d3\u540d', '6_detail1': '', '7_submit_name1': '\u738b\u5e7f\u51ef', '8_question_sno2': '\u5b66\u53f7', '9_detail2': '', '10_submit_sno2': 'U202012345', '11_question_file3': '\u6587\u4ef6', '12_detail3': '', '13_submit_file3': '\u7cfb\u7edf\u8bbe\u8ba1.md', '14_question_radio4': '\u5355\u9009\u9898', '15_detail4': '', '16_checked_radio4': 'A', '17_submit_radio4': 'B', '18_question_multipleChoice5': '\u591a\u9009\u9898', '19_detail5': '', '20_checked_mulans5': 'C', '21_checked_mulans5': 'D', '22_submit_mulans5': 'A', '23_submit_mulans5': 'B', '24_question_qnaire6': '\u95ee\u5377\u9898\u76ee', '25_detail6': '\u662f\u5426\u5df2\u505a\u6838\u9178', '26_qn_option6': '\u662f', '27_qn_option6': '\u5426', '28_submit_qnaire6': '2'} \"\"\" seq = 0 submission = {} collection = Collection_info . query . get ( collection_id ) if collection is None : return None seq += 1 submission [ f ' { seq } _collectionTitle' ] = collection . collection_title seq += 1 submission [ f ' { seq } _collector' ] = collection . creator seq += 1 submission [ f ' { seq } _deadline' ] = collection . end_date . strftime ( \"%Y-%m- %d %H:%M:%S\" ) seq += 1 submission [ f ' { seq } _description' ] = collection . description question_list = Question_info . query . filter_by ( collection_id = collection_id ) . order_by ( \"qno\" ) . all () submission_content_list = Submit_Content_info . query . filter_by ( submission_id = submission_id ) . order_by ( \"qno\" ) . all () for q , s in list ( zip ( question_list , submission_content_list )): # \u82e5\u662f\u59d3\u540d\u9898 if q . question_type == Question_info . NAME : seq += 1 submission [ f ' { seq } _question_name { q . qno } ' ] = q . question_title seq += 1 submission [ f ' { seq } _detail { q . qno } ' ] = q . question_description seq += 1 submission [ f ' { seq } _submit_name { q . qno } ' ] = s . result # \u82e5\u662f\u59d3\u540d\u9898 if q . question_type == Question_info . SNO : seq += 1 submission [ f ' { seq } _question_sno { q . qno } ' ] = q . question_title seq += 1 submission [ f ' { seq } _detail { q . qno } ' ] = q . question_description seq += 1 submission [ f ' { seq } _submit_sno { q . qno } ' ] = s . result # \u82e5\u662f\u6587\u4ef6\u4e0a\u4f20\u9898 if q . question_type == Question_info . FILE_UPLOAD : seq += 1 submission [ f ' { seq } _question_file { q . qno } ' ] = q . question_title seq += 1 submission [ f ' { seq } _detail { q . qno } ' ] = q . question_description seq += 1 submission [ f ' { seq } _submit_file { q . qno } ' ] = s . result # \u82e5\u662f\u5355\u9009\u9898 if q . question_type == Question_info . SINGLE_CHOICE : seq += 1 submission [ f ' { seq } _question_radio { q . qno } ' ] = q . question_title seq += 1 submission [ f ' { seq } _detail { q . qno } ' ] = q . question_description # \u5355\u9009\u9898\u7b54\u6848 seq += 1 submission [ f ' { seq } _checked_radio { q . qno } ' ] = Answer_info . query . \\ filter_by ( question_id = q . id ) . first () . answer_option # \u7528\u6237\u63d0\u4ea4\u7b54\u6848 seq += 1 submission [ f ' { seq } _submit_radio { q . qno } ' ] = s . result # \u82e5\u662f\u591a\u9009\u9898 if q . question_type == Question_info . MULTI_CHOICE : seq += 1 submission [ f ' { seq } _question_multipleChoice { q . qno } ' ] = q . question_title seq += 1 submission [ f ' { seq } _detail { q . qno } ' ] = q . question_description # \u591a\u9009\u9898\u7b54\u6848 answer_list = Answer_info . query . filter_by ( question_id = q . id ) . first () . answer_option . split ( '-' ) for answer in answer_list : seq += 1 submission [ f ' { seq } _checked_mulans { q . qno } ' ] = answer # \u7528\u6237\u63d0\u4ea4\u7b54\u6848 submit_option_list = s . result . split ( '-' ) for submit_option in submit_option_list : seq += 1 submission [ f ' { seq } _submit_mulans { q . qno } ' ] = submit_option # \u82e5\u662f\u95ee\u5377\u9898 if q . question_type == Question_info . SINGLE_QUESTIONNAIRE or \\ q . question_type == Question_info . MULTI_QUESTIONNAIRE : seq += 1 submission [ f ' { seq } _question_qnaire { q . qno } ' ] = q . question_title seq += 1 submission [ f ' { seq } _detail { q . qno } ' ] = q . question_description # \u9009\u9879\u5185\u5bb9 option_list = Option_info . query . filter_by ( question_id = q . id ) . order_by ( \"option_sn\" ) . all () for option in option_list : seq += 1 submission [ f ' { seq } _qn_option { q . qno } ' ] = option . option_content # \u7528\u6237\u63d0\u4ea4\u9009\u9879 submit_option_list = s . result . split ( '-' ) for submit_option in submit_option_list : seq += 1 submission [ f ' { seq } _submit_qnaire { q . qno } ' ] = submit_option return submission 2.4.4 \u7edf\u8ba1\u7b54\u9898\u60c5\u51b5 # \u7edf\u8ba1\u9009\u62e9\u9898\u3001\u95ee\u5377\u9898\u7b54\u9898\u60c5\u51b5\u901a\u8fc7 collection_data_statistics \u5b9e\u73b0\u3002 \u5bf9\u6536\u96c6\u4e2d\u7684\u9009\u62e9\u9898\u3001\u95ee\u5377\u9898\u7684\u7b54\u9898\u60c5\u51b5\u8fdb\u884c\u6570\u636e\u7edf\u8ba1 Parameters: Name Type Description Default collection_id int \u6536\u96c6id required Returns: Name Type Description choice_statistics dict \u9009\u62e9\u9898\u7b54\u9898\u60c5\u51b5\u6570\u636e\u7edf\u8ba1\u3002\u82e5\u6536\u96c6\u4e2d\u65e0\u9009\u62e9\u9898\uff0c\u5219\u8fd4\u56deNone\uff1b\u5426\u5219\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u683c\u5f0f\u5982\u4e0b: choice_data = {'question_1': { 'questionName': '\u5355\u9009\u9898', 'correctAnswer': 'A', 'accuracy': 0.25, 'A': ['\u738b\u6893\u7199'], 'B': ['\u5f20\u96bd\u7fca'], 'C': ['\u738b\u5e7f\u51ef'], 'D': ['\u8ba1\u80dc\u7fd4'] }, 'question_2': { 'questionName': '\u591a\u9009\u9898', 'correctAnswer': 'C-D', 'accuracy': 0.25, 'A': ['\u738b\u6893\u7199', '\u8ba1\u80dc\u7fd4'], 'B': ['\u738b\u6893\u7199', '\u5f20\u96bd\u7fca'], 'C': ['\u5f20\u96bd\u7fca', '\u738b\u5e7f\u51ef'], 'D': ['\u738b\u5e7f\u51ef', '\u8ba1\u80dc\u7fd4'] } } qnaire_statistics dict \u95ee\u5377\u9898\u7b54\u9898\u60c5\u51b5\u6570\u636e\u7edf\u8ba1\u3002\u82e5\u6536\u96c6\u4e2d\u65e0\u95ee\u5377\u9898\uff0c\u5219\u8fd4\u56deNone\uff1b\u5426\u5219\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u683c\u5f0f\u5982\u4e0b: qnaire_data = {'question_1': { 'questionName': '\u4f60\u559c\u6b22\u5403\u5c4e\u5417\uff1f', 'optionNumber': 2, 'option_1': { 'optionName': '\u559c\u6b22', 'peopleNumber': 3, 'people': ['\u738b\u6893\u7199', '\u5f20\u96bd\u7fca', '\u738b\u5e7f\u51ef'] }, 'option_2': { 'optionName': '\u4e0d\u559c\u6b22', 'peopleNumber': 1, 'people': ['\u8ba1\u80dc\u7fd4'] } } } Source code in Flask\\db_manipulation.py 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 def collection_data_statistics ( collection_id : int ) -> dict : \"\"\"\u5bf9\u6536\u96c6\u4e2d\u7684\u9009\u62e9\u9898\u3001\u95ee\u5377\u9898\u7684\u7b54\u9898\u60c5\u51b5\u8fdb\u884c\u6570\u636e\u7edf\u8ba1 Args: collection_id: \u6536\u96c6id Returns: choice_statistics: \u9009\u62e9\u9898\u7b54\u9898\u60c5\u51b5\u6570\u636e\u7edf\u8ba1\u3002\u82e5\u6536\u96c6\u4e2d\u65e0\u9009\u62e9\u9898\uff0c\u5219\u8fd4\u56deNone\uff1b\u5426\u5219\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u683c\u5f0f\u5982\u4e0b: choice_data = {'question_1': { 'questionName': '\u5355\u9009\u9898', 'correctAnswer': 'A', 'accuracy': 0.25, 'A': ['\u738b\u6893\u7199'], 'B': ['\u5f20\u96bd\u7fca'], 'C': ['\u738b\u5e7f\u51ef'], 'D': ['\u8ba1\u80dc\u7fd4'] }, 'question_2': { 'questionName': '\u591a\u9009\u9898', 'correctAnswer': 'C-D', 'accuracy': 0.25, 'A': ['\u738b\u6893\u7199', '\u8ba1\u80dc\u7fd4'], 'B': ['\u738b\u6893\u7199', '\u5f20\u96bd\u7fca'], 'C': ['\u5f20\u96bd\u7fca', '\u738b\u5e7f\u51ef'], 'D': ['\u738b\u5e7f\u51ef', '\u8ba1\u80dc\u7fd4'] } } qnaire_statistics: \u95ee\u5377\u9898\u7b54\u9898\u60c5\u51b5\u6570\u636e\u7edf\u8ba1\u3002\u82e5\u6536\u96c6\u4e2d\u65e0\u95ee\u5377\u9898\uff0c\u5219\u8fd4\u56deNone\uff1b\u5426\u5219\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u683c\u5f0f\u5982\u4e0b: qnaire_data = {'question_1': { 'questionName': '\u4f60\u559c\u6b22\u5403\u5c4e\u5417\uff1f', 'optionNumber': 2, 'option_1': { 'optionName': '\u559c\u6b22', 'peopleNumber': 3, 'people': ['\u738b\u6893\u7199', '\u5f20\u96bd\u7fca', '\u738b\u5e7f\u51ef'] }, 'option_2': { 'optionName': '\u4e0d\u559c\u6b22', 'peopleNumber': 1, 'people': ['\u8ba1\u80dc\u7fd4'] } } } \"\"\" choice_qtype = [ Question_info . SINGLE_CHOICE , Question_info . MULTI_CHOICE ] qnaire_qtype = [ Question_info . SINGLE_QUESTIONNAIRE , Question_info . MULTI_QUESTIONNAIRE ] # \u67e5\u627e\u9009\u62e9\u9898 choice_qlist = Question_info . query . filter ( Question_info . collection_id == collection_id , Question_info . question_type . in_ ( choice_qtype )) . \\ with_entities ( Question_info . id , Question_info . question_title ) . all () # \u67e5\u770b\u662f\u5426\u7531\u63d0\u4ea4 submission = Submission_info . query . filter_by ( collection_id = collection_id ) . all () # \u5224\u65ad\u662f\u5426\u5b58\u5728\u9009\u62e9\u9898 if len ( choice_qlist ) == 0 or len ( submission ) == 0 : choice_statistics = None else : choice_statistics = {} seq = 0 for id , title in choice_qlist : seq += 1 detail = {} detail [ 'questionName' ] = title answer = Answer_info . query . filter_by ( question_id = id ) . first () . answer_option detail [ 'correctAnswer' ] = answer submit_content_list = Submit_Content_info . query . filter_by ( question_id = id ) . \\ with_entities ( Submit_Content_info . submission_id , Submit_Content_info . result ) . \\ all () id_list , result_list = zip ( * submit_content_list ) id_list , result_list = list ( id_list ), list ( result_list ) detail [ 'accuracy' ] = result_list . count ( answer ) / len ( result_list ) # \u8ba1\u7b97\u6b64\u9898\u6b63\u786e\u7387 # \u5c06submission_id\u6839\u636e\u9009\u62e9\u7684\u9009\u9879\u8fdb\u884c\u5206\u7c7b A_list = list ( filter ( lambda x : 'A' in x [ 1 ], submit_content_list )) A_id_list = list ( map ( itemgetter ( 0 ), A_list )) B_list = list ( filter ( lambda x : 'B' in x [ 1 ], submit_content_list )) B_id_list = list ( map ( itemgetter ( 0 ), B_list )) C_list = list ( filter ( lambda x : 'C' in x [ 1 ], submit_content_list )) C_id_list = list ( map ( itemgetter ( 0 ), C_list )) D_list = list ( filter ( lambda x : 'D' in x [ 1 ], submit_content_list )) D_id_list = list ( map ( itemgetter ( 0 ), D_list )) name_list = Submission_info . query . filter ( Submission_info . id . in_ ( A_id_list )) . \\ with_entities ( Submission_info . submitter_name ) . \\ all () name_list = list ( map ( itemgetter ( 0 ), name_list )) detail [ 'A' ] = name_list name_list = Submission_info . query . filter ( Submission_info . id . in_ ( B_id_list )) . \\ with_entities ( Submission_info . submitter_name ) . \\ all () name_list = list ( map ( itemgetter ( 0 ), name_list )) detail [ 'B' ] = name_list name_list = Submission_info . query . filter ( Submission_info . id . in_ ( C_id_list )) . \\ with_entities ( Submission_info . submitter_name ) . \\ all () name_list = list ( map ( itemgetter ( 0 ), name_list )) detail [ 'C' ] = name_list name_list = Submission_info . query . filter ( Submission_info . id . in_ ( D_id_list )) . \\ with_entities ( Submission_info . submitter_name ) . \\ all () name_list = list ( map ( itemgetter ( 0 ), name_list )) detail [ 'D' ] = name_list choice_statistics [ f 'question_ { seq } ' ] = detail # \u67e5\u627e\u95ee\u5377\u9898 qnaire_qlist = Question_info . query . filter ( Question_info . collection_id == collection_id , Question_info . question_type . in_ ( qnaire_qtype )) . \\ with_entities ( Question_info . id , Question_info . question_title ) . all () # \u5224\u65ad\u662f\u5426\u5b58\u5728\u95ee\u5377\u9898 if len ( qnaire_qlist ) == 0 or len ( submission ) == 0 : qnaire_statistics = None else : qnaire_statistics = {} seq = 0 for id , title in qnaire_qlist : seq += 1 detail = {} detail [ 'questionName' ] = title option_list = Option_info . query . filter_by ( question_id = id ) . \\ with_entities ( Option_info . option_sn , Option_info . option_content ) . \\ all () detail [ 'optionNumber' ] = len ( option_list ) submit_content_list = Submit_Content_info . query . filter_by ( question_id = id ) . \\ with_entities ( Submit_Content_info . submission_id , Submit_Content_info . result ) . \\ all () for sn , content in option_list : option = {} option [ 'optionName' ] = content submission_list = list ( filter ( lambda x : str ( sn + 1 ) in x [ 1 ], submit_content_list )) submission_id_list = list ( map ( itemgetter ( 0 ), submission_list )) name_list = Submission_info . query . filter ( Submission_info . id . in_ ( submission_id_list )) . \\ with_entities ( Submission_info . submitter_name ) . \\ all () name_list = list ( map ( itemgetter ( 0 ), name_list )) option [ 'peopleNumber' ] = len ( name_list ) option [ 'people' ] = name_list detail [ f 'option_ { sn + 1 } ' ] = option qnaire_statistics [ f 'question_ { seq } ' ] = detail print ( \"\u9009\u62e9\u9898\u6570\u636e\u7edf\u8ba1\uff1a\" , choice_statistics ) print ( \"\u95ee\u5377\u9898\u6570\u636e\u7edf\u8ba1\uff1a\" , qnaire_statistics ) return choice_statistics , qnaire_statistics","title":"DB"},{"location":"developer/database/#db","text":"","title":"\u6570\u636e\u5e93 DB \u8bbe\u8ba1"},{"location":"developer/database/#1","text":"\u6570\u636e\u5e93\u5305\u542b\u4ee5\u4e0b\u8868\u9879\uff1a \u7528\u6237\u4fe1\u606f\u8868 \u3001 \u6536\u96c6\u4fe1\u606f\u8868 \u3001 \u9898\u76ee\u4fe1\u606f\u8868 \u3001 \u9009\u9879\u4fe1\u606f\u8868 \u3001 \u7b54\u6848\u4fe1\u606f\u8868 \u3001 \u63d0\u4ea4\u4fe1\u606f\u8868 \u3001 \u5185\u5bb9\u4fe1\u606f\u8868","title":"1. \u6570\u636e\u5e93\u8868\u7ed3\u6784\u8bbe\u8ba1"},{"location":"developer/database/#11","text":"\u7528\u6237\u4fe1\u606f\u8868\u9879\u4ee3\u7801\u8bbe\u8ba1\u5982\u4e0b\u3002 Bases: db . Model , UserMixin \u7528\u6237\u4fe1\u606f\u8868\u3002 \u8bb0\u5f55\u5df2\u6ce8\u518c\u7528\u6237\u7684\u76f8\u5173\u4fe1\u606f\u3002 Attributes: Name Type Description id db . Interger \u4e3b\u952e\uff0c\u81ea\u589e name db . String \u7528\u6237\u6635\u79f0\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 username db . String \u7528\u6237\u540d\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff0c\u4e0d\u53ef\u91cd\u590d\uff09 password_hash db . String \u5bc6\u7801\u6563\u5217\u503c\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 userpath db . String \u7528\u6237\u7a7a\u95f4\u8def\u5f84\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff0c\u4e0d\u53ef\u91cd\u590d\uff09 email db . String \u7528\u6237\u90ae\u7bb1\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 authorization_code db . String \u90ae\u7bb1\u6388\u6743\u7801 Source code in Flask\\models.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 class User ( db . Model , UserMixin ): \"\"\" \u7528\u6237\u4fe1\u606f\u8868\u3002 \u8bb0\u5f55\u5df2\u6ce8\u518c\u7528\u6237\u7684\u76f8\u5173\u4fe1\u606f\u3002 Attributes: id (db.Interger): \u4e3b\u952e\uff0c\u81ea\u589e name (db.String): \u7528\u6237\u6635\u79f0\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 username (db.String): \u7528\u6237\u540d\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff0c\u4e0d\u53ef\u91cd\u590d\uff09 password_hash (db.String): \u5bc6\u7801\u6563\u5217\u503c\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 userpath (db.String): \u7528\u6237\u7a7a\u95f4\u8def\u5f84\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff0c\u4e0d\u53ef\u91cd\u590d\uff09 email (db.String): \u7528\u6237\u90ae\u7bb1\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 authorization_code (db.String): \u90ae\u7bb1\u6388\u6743\u7801 \"\"\" id = db . Column ( db . Integer , primary_key = True ) # \u4e3b\u952e name = db . Column ( db . String ( 30 ), nullable = False ) # \u7528\u6237\u6635\u79f0 username = db . Column ( db . String ( 30 ), nullable = False , unique = True ) # \u7528\u6237\u540d password_hash = db . Column ( db . String ( 128 ), nullable = False ) # \u5bc6\u7801\u6563\u5217\u503c userpath = db . Column ( db . String ( 50 ), nullable = False , unique = True ) # \u7528\u6237\u7a7a\u95f4\u8def\u5f84 email = db . Column ( db . String ( 30 ), nullable = False ) # \u7528\u6237\u90ae\u7bb1 authorization_code = db . Column ( db . String ( 30 )) # \u90ae\u7bb1\u6388\u6743\u7801 def set_password ( self , password : str ) -> None : \"\"\"\u8bbe\u7f6e\u5bc6\u7801 Args: password (str): \u5bc6\u7801\uff08\u660e\u6587\uff09 \"\"\" self . password_hash = generate_password_hash ( password ) # \u6839\u636e\u7528\u6237\u8f93\u5165\u7684\u5bc6\u7801\u751f\u6210\u5bc6\u7801\u6563\u5217\u503c def validate_password ( self , password : str ) -> bool : \"\"\"\u9a8c\u8bc1\u5bc6\u7801 Args: password (str): \u5bc6\u7801\uff08\u660e\u6587\uff09 Returns: \u5e03\u5c14\u503c\uff0c\u8868\u793a\u5bc6\u7801\u662f\u5426\u6b63\u786e \"\"\" return check_password_hash ( self . password_hash , password ) def set_userpath ( self ) -> None : \"\"\"\u8bbe\u7f6e\u7528\u6237\u7a7a\u95f4\u8def\u5f84\"\"\" # \u8def\u5f84\u7684\u524d\u82e5\u5e72\u4f4d\u4e3a\u7528\u6237\u540d\u548c user \u6807\u8bc6\uff0c\u540e\u9762\u7528\u968f\u673a\u5b57\u7b26\u4e32\u8865\u9f50\uff0c\u603b\u957f\u5ea6 20 \u4f4d\u3002 self . userpath = self . username + 'user' + '' . join ( random . sample ( string . ascii_letters + string . digits , 20 - len ( self . username ) - len ( 'user' )) ) def set_email ( self , email : str ) -> None : \"\"\"\u8bbe\u7f6e\u7528\u6237\u90ae\u7bb1 Args: email (str): \u90ae\u7bb1 \"\"\" self . email = email def email_authentication ( self , user_email : str = email , user_pwd : str = authorization_code , host : str = 'smtp.sina.com' ): \"\"\"\u90ae\u7bb1\u8ba4\u8bc1 Args: user_email: \u7528\u6237\u90ae\u7bb1 user_pwd: \u90ae\u7bb1\u6388\u6743\u7801 host: \u53d1\u9001\u90ae\u4ef6\u670d\u52a1\u5668\u5730\u5740 \"\"\" return yagmail . SMTP ( user = user_email , password = user_pwd , host = host ) def send_email ( self , to_email , email_title : str , email_message : str ) -> bool : \"\"\"\u53d1\u9001\u90ae\u4ef6\uff0c\u53ef\u4ee5\u5355\u53d1\u4e5f\u53ef\u4ee5\u7fa4\u53d1\uff0c\u53d6\u51b3\u4e8e\u4f20\u5165\u53c2\u6570 to_email \u7684\u7c7b\u578b Args: to_email (str | list): \u76ee\u6807\u90ae\u7bb1\u5730\u5740\uff0c\u82e5\u4e3a\u5217\u8868\u5219\u4ee3\u8868\u7fa4\u53d1 email_title (str): \u90ae\u4ef6\u6807\u9898 email_message (str): \u90ae\u4ef6\u6b63\u6587\uff0c\u53ef\u4ee5\u4f7f\u7528 HTML \u683c\u5f0f\u7684\u5b57\u7b26\u4e32 Returns: \u5e03\u5c14\u503c\uff0c\u8868\u793a\u662f\u5426\u53d1\u9001\u6210\u529f \"\"\" server = \"smtp.\" + self . email . split ( '@' )[ 1 ] if self . authorization_code is None : print ( \"\u6ca1\u6709\u90ae\u7bb1\u6388\u6743\u7801\uff01\" ) return False yag = yagmail . SMTP ( user = self . email , password = self . authorization_code , host = server ) if yag is None : print ( \"yag is None!\" ) return False if type ( to_email ) == \"str\" : # \u5355\u53d1 if re . match ( \"^.+ \\\\ @( \\\\ [?)[a-zA-Z0-9 \\\\ - \\\\ .]+ \\\\ .([a-zA-Z]{2,3}|[0-9]{1,3})( \\\\ ]?)$\" , to_email ) is None : print ( \"\u76ee\u6807\u90ae\u7bb1\u5730\u5740\u9519\u8bef\uff01\" ) return False try : yag . send ( to = to_email , subject = email_title , contents = email_message ) except smtplib . SMTPAuthenticationError : print ( \"\u6388\u6743\u7801\u9519\u8bef\uff01\" ) return True else : for email_addr in to_email : # \u7fa4\u53d1 if re . match ( \"^.+ \\\\ @( \\\\ [?)[a-zA-Z0-9 \\\\ - \\\\ .]+ \\\\ .([a-zA-Z]{2,3}|[0-9]{1,3})( \\\\ ]?)$\" , email_addr ) is None : print ( \"\u76ee\u6807\u90ae\u7bb1\u5730\u5740\u9519\u8bef\uff01\" ) return False try : yag . send ( to = email_addr , subject = email_title , contents = email_message ) except smtplib . SMTPAuthenticationError : print ( \"\u6388\u6743\u7801\u9519\u8bef\uff01\" ) return True def sub_func ( self , email_list , email_title , email_message ): self . send_email ( to_email = email_list , email_title = email_title , email_message = email_message ) print ( \"\u5df2\u53d1\u9001\" )","title":"1.1 \u7528\u6237\u4fe1\u606f\u8868"},{"location":"developer/database/#models.User.email_authentication","text":"\u90ae\u7bb1\u8ba4\u8bc1 Parameters: Name Type Description Default user_email str \u7528\u6237\u90ae\u7bb1 email user_pwd str \u90ae\u7bb1\u6388\u6743\u7801 authorization_code host str \u53d1\u9001\u90ae\u4ef6\u670d\u52a1\u5668\u5730\u5740 'smtp.sina.com' Source code in Flask\\models.py 66 67 68 69 70 71 72 73 74 75 76 def email_authentication ( self , user_email : str = email , user_pwd : str = authorization_code , host : str = 'smtp.sina.com' ): \"\"\"\u90ae\u7bb1\u8ba4\u8bc1 Args: user_email: \u7528\u6237\u90ae\u7bb1 user_pwd: \u90ae\u7bb1\u6388\u6743\u7801 host: \u53d1\u9001\u90ae\u4ef6\u670d\u52a1\u5668\u5730\u5740 \"\"\" return yagmail . SMTP ( user = user_email , password = user_pwd , host = host )","title":"email_authentication()"},{"location":"developer/database/#models.User.send_email","text":"\u53d1\u9001\u90ae\u4ef6\uff0c\u53ef\u4ee5\u5355\u53d1\u4e5f\u53ef\u4ee5\u7fa4\u53d1\uff0c\u53d6\u51b3\u4e8e\u4f20\u5165\u53c2\u6570 to_email \u7684\u7c7b\u578b Parameters: Name Type Description Default to_email str | list \u76ee\u6807\u90ae\u7bb1\u5730\u5740\uff0c\u82e5\u4e3a\u5217\u8868\u5219\u4ee3\u8868\u7fa4\u53d1 required email_title str \u90ae\u4ef6\u6807\u9898 required email_message str \u90ae\u4ef6\u6b63\u6587\uff0c\u53ef\u4ee5\u4f7f\u7528 HTML \u683c\u5f0f\u7684\u5b57\u7b26\u4e32 required Returns: Type Description bool \u5e03\u5c14\u503c\uff0c\u8868\u793a\u662f\u5426\u53d1\u9001\u6210\u529f Source code in Flask\\models.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 def send_email ( self , to_email , email_title : str , email_message : str ) -> bool : \"\"\"\u53d1\u9001\u90ae\u4ef6\uff0c\u53ef\u4ee5\u5355\u53d1\u4e5f\u53ef\u4ee5\u7fa4\u53d1\uff0c\u53d6\u51b3\u4e8e\u4f20\u5165\u53c2\u6570 to_email \u7684\u7c7b\u578b Args: to_email (str | list): \u76ee\u6807\u90ae\u7bb1\u5730\u5740\uff0c\u82e5\u4e3a\u5217\u8868\u5219\u4ee3\u8868\u7fa4\u53d1 email_title (str): \u90ae\u4ef6\u6807\u9898 email_message (str): \u90ae\u4ef6\u6b63\u6587\uff0c\u53ef\u4ee5\u4f7f\u7528 HTML \u683c\u5f0f\u7684\u5b57\u7b26\u4e32 Returns: \u5e03\u5c14\u503c\uff0c\u8868\u793a\u662f\u5426\u53d1\u9001\u6210\u529f \"\"\" server = \"smtp.\" + self . email . split ( '@' )[ 1 ] if self . authorization_code is None : print ( \"\u6ca1\u6709\u90ae\u7bb1\u6388\u6743\u7801\uff01\" ) return False yag = yagmail . SMTP ( user = self . email , password = self . authorization_code , host = server ) if yag is None : print ( \"yag is None!\" ) return False if type ( to_email ) == \"str\" : # \u5355\u53d1 if re . match ( \"^.+ \\\\ @( \\\\ [?)[a-zA-Z0-9 \\\\ - \\\\ .]+ \\\\ .([a-zA-Z]{2,3}|[0-9]{1,3})( \\\\ ]?)$\" , to_email ) is None : print ( \"\u76ee\u6807\u90ae\u7bb1\u5730\u5740\u9519\u8bef\uff01\" ) return False try : yag . send ( to = to_email , subject = email_title , contents = email_message ) except smtplib . SMTPAuthenticationError : print ( \"\u6388\u6743\u7801\u9519\u8bef\uff01\" ) return True else : for email_addr in to_email : # \u7fa4\u53d1 if re . match ( \"^.+ \\\\ @( \\\\ [?)[a-zA-Z0-9 \\\\ - \\\\ .]+ \\\\ .([a-zA-Z]{2,3}|[0-9]{1,3})( \\\\ ]?)$\" , email_addr ) is None : print ( \"\u76ee\u6807\u90ae\u7bb1\u5730\u5740\u9519\u8bef\uff01\" ) return False try : yag . send ( to = email_addr , subject = email_title , contents = email_message ) except smtplib . SMTPAuthenticationError : print ( \"\u6388\u6743\u7801\u9519\u8bef\uff01\" ) return True","title":"send_email()"},{"location":"developer/database/#models.User.set_email","text":"\u8bbe\u7f6e\u7528\u6237\u90ae\u7bb1 Parameters: Name Type Description Default email str \u90ae\u7bb1 required Source code in Flask\\models.py 58 59 60 61 62 63 64 def set_email ( self , email : str ) -> None : \"\"\"\u8bbe\u7f6e\u7528\u6237\u90ae\u7bb1 Args: email (str): \u90ae\u7bb1 \"\"\" self . email = email","title":"set_email()"},{"location":"developer/database/#models.User.set_password","text":"\u8bbe\u7f6e\u5bc6\u7801 Parameters: Name Type Description Default password str \u5bc6\u7801\uff08\u660e\u6587\uff09 required Source code in Flask\\models.py 29 30 31 32 33 34 35 36 def set_password ( self , password : str ) -> None : \"\"\"\u8bbe\u7f6e\u5bc6\u7801 Args: password (str): \u5bc6\u7801\uff08\u660e\u6587\uff09 \"\"\" self . password_hash = generate_password_hash ( password ) # \u6839\u636e\u7528\u6237\u8f93\u5165\u7684\u5bc6\u7801\u751f\u6210\u5bc6\u7801\u6563\u5217\u503c","title":"set_password()"},{"location":"developer/database/#models.User.set_userpath","text":"\u8bbe\u7f6e\u7528\u6237\u7a7a\u95f4\u8def\u5f84 Source code in Flask\\models.py 49 50 51 52 53 54 55 56 def set_userpath ( self ) -> None : \"\"\"\u8bbe\u7f6e\u7528\u6237\u7a7a\u95f4\u8def\u5f84\"\"\" # \u8def\u5f84\u7684\u524d\u82e5\u5e72\u4f4d\u4e3a\u7528\u6237\u540d\u548c user \u6807\u8bc6\uff0c\u540e\u9762\u7528\u968f\u673a\u5b57\u7b26\u4e32\u8865\u9f50\uff0c\u603b\u957f\u5ea6 20 \u4f4d\u3002 self . userpath = self . username + 'user' + '' . join ( random . sample ( string . ascii_letters + string . digits , 20 - len ( self . username ) - len ( 'user' )) )","title":"set_userpath()"},{"location":"developer/database/#models.User.validate_password","text":"\u9a8c\u8bc1\u5bc6\u7801 Parameters: Name Type Description Default password str \u5bc6\u7801\uff08\u660e\u6587\uff09 required Returns: Type Description bool \u5e03\u5c14\u503c\uff0c\u8868\u793a\u5bc6\u7801\u662f\u5426\u6b63\u786e Source code in Flask\\models.py 38 39 40 41 42 43 44 45 46 47 def validate_password ( self , password : str ) -> bool : \"\"\"\u9a8c\u8bc1\u5bc6\u7801 Args: password (str): \u5bc6\u7801\uff08\u660e\u6587\uff09 Returns: \u5e03\u5c14\u503c\uff0c\u8868\u793a\u5bc6\u7801\u662f\u5426\u6b63\u786e \"\"\" return check_password_hash ( self . password_hash , password )","title":"validate_password()"},{"location":"developer/database/#12","text":"\u6536\u96c6\u4fe1\u606f\u8868\u9879\u4ee3\u7801\u8bbe\u8ba1\u5982\u4e0b\u3002 Bases: db . Model \u6536\u96c6\u8868\u3002 \u8bb0\u5f55\u5df2\u521b\u5efa\u6536\u96c6\u7684\u76f8\u5173\u4fe1\u606f\u3002 Attributes: Name Type Description id db . Integer \u4e3b\u952e creator db . String \u521b\u5efa\u4eba\u5458\u540d\u79f0\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 creator_id db . String \u521b\u5efa\u4eba\u5458ID\uff08\u5916\u952e\uff1a\u5173\u8054user.id\uff1b\u4e0d\u53ef\u4e3a\u7a7a\uff09 collection_title db . String \u6536\u96c6\u6807\u9898\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 description db . String \u6536\u96c6\u63cf\u8ff0\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 start_date db . String \u5f00\u59cb\u65f6\u95f4\uff0c\u81ea\u52a8\u8bbe\u7f6e\u4e3a\u521b\u5efa\u6536\u96c6\u7684\u65f6\u95f4\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 end_date db . String \u7ed3\u675f\u65f6\u95f4\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 status db . Enum \u6536\u96c6\u7684\u72b6\u6001\uff08'0' \u53d1\u5e03\uff0c'1' \u6682\u5b58\uff0c'2' \u5df2\u7ed3\u675f\uff0c'3' \u5df2\u5931\u6548\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 namelist_path db . String \u5e94\u4ea4\u540d\u5355\u8def\u5f84 Source code in Flask\\models.py 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 class Collection_info ( db . Model ): \"\"\" \u6536\u96c6\u8868\u3002 \u8bb0\u5f55\u5df2\u521b\u5efa\u6536\u96c6\u7684\u76f8\u5173\u4fe1\u606f\u3002 Attributes: id (db.Integer): \u4e3b\u952e creator (db.String): \u521b\u5efa\u4eba\u5458\u540d\u79f0\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 creator_id (db.String): \u521b\u5efa\u4eba\u5458ID\uff08\u5916\u952e\uff1a\u5173\u8054user.id\uff1b\u4e0d\u53ef\u4e3a\u7a7a\uff09 collection_title (db.String): \u6536\u96c6\u6807\u9898\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 description (db.String): \u6536\u96c6\u63cf\u8ff0\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 start_date (db.String): \u5f00\u59cb\u65f6\u95f4\uff0c\u81ea\u52a8\u8bbe\u7f6e\u4e3a\u521b\u5efa\u6536\u96c6\u7684\u65f6\u95f4\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 end_date (db.String): \u7ed3\u675f\u65f6\u95f4\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 status (db.Enum): \u6536\u96c6\u7684\u72b6\u6001\uff08'0' \u53d1\u5e03\uff0c'1' \u6682\u5b58\uff0c'2' \u5df2\u7ed3\u675f\uff0c'3' \u5df2\u5931\u6548\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 namelist_path (db.String): \u5e94\u4ea4\u540d\u5355\u8def\u5f84 \"\"\" # * \u6536\u96c6\u72b6\u6001\u5e38\u91cf\u5b9a\u4e49 RELEASE , SAVED , FINISHED , OVERDUE = '0' , '1' , '2' , '3' # ? \u53d1\u5e03\uff0c\u6682\u5b58\uff0c\u5df2\u7ed3\u675f\uff0c\u5df2\u5931\u6548 id = db . Column ( db . Integer , primary_key = True ) # \u4e3b\u952e creator = db . Column ( db . String ( 30 ), nullable = False ) # \u521b\u5efa\u4eba\u5458\u540d\u79f0 creator_id = db . Column ( db . Integer , db . ForeignKey ( 'user.id' , ondelete = \"CASCADE\" ), nullable = False ) # \u521b\u5efa\u4eba\u5458ID collection_title = db . Column ( db . String ( 50 ), nullable = False ) # \u6536\u96c6\u540d\u79f0 description = db . Column ( db . Text , nullable = False ) # \u6536\u96c6\u63cf\u8ff0 start_date = db . Column ( db . DateTime , nullable = False , default = datetime . datetime . now ()) # \u5f00\u59cb\u65f6\u95f4 end_date = db . Column ( db . DateTime , nullable = False ) # \u6536\u96c6\u7ed3\u675f\u65f6\u95f4 status = db . Column ( db . Enum ( RELEASE , SAVED , FINISHED , OVERDUE ), nullable = False ) # \u5f53\u524d\u72b6\u6001 collection_path = db . Column ( db . String ( 50 )) # \u5e94\u4ea4\u540d\u5355\u8def\u5f84","title":"1.2 \u6536\u96c6\u4fe1\u606f\u8868"},{"location":"developer/database/#13","text":"\u9898\u76ee\u4fe1\u606f\u8868\u9879\u4ee3\u7801\u8bbe\u8ba1\u5982\u4e0b\u3002 Bases: db . Model \u9898\u76ee\u8868\u3002 \u8bb0\u5f55\u5df2\u521b\u5efa\u6536\u96c6\u7684\u9898\u76ee\u76f8\u5173\u4fe1\u606f\u3002 Attributes: Name Type Description id db . Integer \u4e3b\u952e collection_id db . String \u6536\u96c6id\uff08\u5916\u952e\uff1a\u5173\u8054collection_info.id\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 qno db . Integer \u9898\u76ee\u5e8f\u53f7\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 question_type db . Enum \u9898\u76ee\u7c7b\u578b\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09: '0' \u4e0a\u4f20\u6587\u4ef6\u9898; '1' \u5355\u9009; '2' \u591a\u9009; '3' \u59d3\u540d\u9898; '4' \u5b66\u53f7\u9898; '5' \u95ee\u5377\u9898(\u5355\u9009); '6' \u95ee\u5377\u9898(\u591a\u9009) question_title db . String \u95ee\u9898\u6807\u9898\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 question_description db . String \u95ee\u9898\u63cf\u8ff0 rename_rule db . String \u6587\u4ef6\u91cd\u547d\u540d\u89c4\u5219 file_path db . String \u63d0\u4ea4\u6587\u4ef6\u8def\u5f84\uff08\u4e0d\u53ef\u91cd\u590d\uff09\uff08\u6587\u4ef6\u4e0a\u4f20\u9898\u9700\u8bbe\u7f6e\uff0c\u5176\u4f59\u7c7b\u578b\u4e0d\u5fc5\uff09 Source code in Flask\\models.py 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 class Question_info ( db . Model ): \"\"\" \u9898\u76ee\u8868\u3002 \u8bb0\u5f55\u5df2\u521b\u5efa\u6536\u96c6\u7684\u9898\u76ee\u76f8\u5173\u4fe1\u606f\u3002 Attributes: id (db.Integer): \u4e3b\u952e collection_id (db.String): \u6536\u96c6id\uff08\u5916\u952e\uff1a\u5173\u8054collection_info.id\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 qno (db.Integer): \u9898\u76ee\u5e8f\u53f7\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 question_type (db.Enum): \u9898\u76ee\u7c7b\u578b\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09: '0' \u4e0a\u4f20\u6587\u4ef6\u9898; '1' \u5355\u9009; '2' \u591a\u9009; '3' \u59d3\u540d\u9898; '4' \u5b66\u53f7\u9898; '5' \u95ee\u5377\u9898(\u5355\u9009); '6' \u95ee\u5377\u9898(\u591a\u9009) question_title (db.String): \u95ee\u9898\u6807\u9898\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 question_description (db.String): \u95ee\u9898\u63cf\u8ff0 rename_rule (db.String): \u6587\u4ef6\u91cd\u547d\u540d\u89c4\u5219 file_path (db.String): \u63d0\u4ea4\u6587\u4ef6\u8def\u5f84\uff08\u4e0d\u53ef\u91cd\u590d\uff09\uff08\u6587\u4ef6\u4e0a\u4f20\u9898\u9700\u8bbe\u7f6e\uff0c\u5176\u4f59\u7c7b\u578b\u4e0d\u5fc5\uff09 \"\"\" # * \u95ee\u9898\u7c7b\u578b\u5e38\u91cf FILE_UPLOAD = '0' # ? \u89e3\u7b54\u9898 SINGLE_CHOICE = '1' # ?\uff0c\u5355\u9009 MULTI_CHOICE = '2' # ?\u591a\u9009 NAME = '3' # ?\u59d3\u540d SNO = '4' # ?\u5b66\u53f7 SINGLE_QUESTIONNAIRE = '5' # ?\u95ee\u5377\u9898\u76ee(\u5355\u9009) MULTI_QUESTIONNAIRE = '6' # ?\u95ee\u5377\u9898\u76ee(\u591a\u9009) id = db . Column ( db . Integer , primary_key = True ) # \u4e3b\u952e collection_id = db . Column ( db . Integer , db . ForeignKey ( 'collection_info.id' , ondelete = \"CASCADE\" ), nullable = False ) # \u5173\u8054\u6536\u96c6id qno = db . Column ( db . Integer , nullable = False ) # \u9898\u76ee\u5e8f\u53f7 question_type = db . Column ( db . Enum ( FILE_UPLOAD , SINGLE_CHOICE , MULTI_CHOICE , NAME , SNO , SINGLE_QUESTIONNAIRE , MULTI_QUESTIONNAIRE ), nullable = False ) # \u9898\u76ee\u7c7b\u578b question_title = db . Column ( db . String ( 50 ), nullable = False ) # \u95ee\u9898\u6807\u9898 question_description = db . Column ( db . Text ) # \u95ee\u9898\u63cf\u8ff0 rename_rule = db . Column ( db . String ( 20 )) # \u6587\u4ef6\u91cd\u547d\u540d\u89c4\u5219\uff0c\u5176\u503c\u4e3a\u9898\u76ee\u987a\u5e8f file_path = db . Column ( db . String ( 50 ), unique = True ) # \u63d0\u4ea4\u6587\u4ef6\u8def\u5f84","title":"1.3 \u9898\u76ee\u4fe1\u606f\u8868"},{"location":"developer/database/#14","text":"\u9009\u9879\u4fe1\u606f\u8868\u9879\u4ee3\u7801\u8bbe\u8ba1\u5982\u4e0b\u3002 Bases: db . Model \u95ee\u5377\u9898\u9009\u9879\u8868 \u8bb0\u5f55\u95ee\u5377\u9898\u7684\u6bcf\u4e00\u4e2a\u9009\u9879\u5185\u5bb9\u3002 Attributes: Name Type Description id db . Integer \u4e3b\u952e question_id db . Integer \u9898\u76eeid\uff08\u5916\u952e\uff1a\u5173\u8054question_info.id\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 collection_id db . Integer \u6536\u96c6id\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 qno db . Integer \u9898\u76ee\u5e8f\u53f7\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 option_sn db . Integer \u9009\u9879\u5e8f\u53f7\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 option_content db . Text \u9009\u9879\u5185\u5bb9\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 Source code in Flask\\models.py 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 class Option_info ( db . Model ): \"\"\"\u95ee\u5377\u9898\u9009\u9879\u8868 \u8bb0\u5f55\u95ee\u5377\u9898\u7684\u6bcf\u4e00\u4e2a\u9009\u9879\u5185\u5bb9\u3002 Attributes: id (db.Integer): \u4e3b\u952e question_id (db.Integer): \u9898\u76eeid\uff08\u5916\u952e\uff1a\u5173\u8054question_info.id\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 collection_id (db.Integer): \u6536\u96c6id\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 qno (db.Integer): \u9898\u76ee\u5e8f\u53f7\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 option_sn (db.Integer): \u9009\u9879\u5e8f\u53f7\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 option_content (db.Text): \u9009\u9879\u5185\u5bb9\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 \"\"\" id = db . Column ( db . Integer , primary_key = True ) # \u4e3b\u952e question_id = db . Column ( db . Integer , db . ForeignKey ( 'question_info.id' , ondelete = \"CASCADE\" ), nullable = False ) # \u5173\u8054\u9898\u76eeid collection_id = db . Column ( db . Integer , nullable = False ) # \u6536\u96c6id qno = db . Column ( db . Integer , nullable = False ) # \u9898\u76ee\u5e8f\u53f7 option_sn = db . Column ( db . Integer , nullable = False ) # \u9009\u9879\u5e8f\u53f7 option_content = db . Column ( db . Text , nullable = False ) # \u9009\u9879\u5185\u5bb9","title":"1.4 \u9009\u9879\u4fe1\u606f\u8868"},{"location":"developer/database/#15","text":"\u7b54\u6848\u4fe1\u606f\u8868\u9879\u4ee3\u7801\u8bbe\u8ba1\u5982\u4e0b\u3002 Bases: db . Model \u7b54\u6848\u8868\u3002 \u8bb0\u5f55\u5355\u9009\u9898\u548c\u591a\u9009\u9898\u7684\u7b54\u6848\u3002 Attributes: Name Type Description id db . Integer \u4e3b\u952e question_id db . Integer \u9898\u76eeid\uff08\u5916\u952e\uff1a\u5173\u8054question_info.id\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 collection_id db . Integer \u6536\u96c6id\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 qno db . Integer \u9898\u76ee\u5e8f\u53f7\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 answer_option db . String \u7b54\u6848\u9009\u9879\uff08\u5355\u9009\u9898\u683c\u5f0f\u4e3ax\uff0c\u591a\u9009\u9898\u683c\u5f0f\u4e3ax-x-x-\u2026\u2026\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 Source code in Flask\\models.py 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 class Answer_info ( db . Model ): \"\"\" \u7b54\u6848\u8868\u3002 \u8bb0\u5f55\u5355\u9009\u9898\u548c\u591a\u9009\u9898\u7684\u7b54\u6848\u3002 Attributes: id (db.Integer): \u4e3b\u952e question_id (db.Integer): \u9898\u76eeid\uff08\u5916\u952e\uff1a\u5173\u8054question_info.id\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 collection_id (db.Integer): \u6536\u96c6id\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 qno (db.Integer): \u9898\u76ee\u5e8f\u53f7\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 answer_option (db.String): \u7b54\u6848\u9009\u9879\uff08\u5355\u9009\u9898\u683c\u5f0f\u4e3ax\uff0c\u591a\u9009\u9898\u683c\u5f0f\u4e3ax-x-x-\u2026\u2026\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 \"\"\" id = db . Column ( db . Integer , primary_key = True ) # \u4e3b\u952e question_id = db . Column ( db . Integer , db . ForeignKey ( 'question_info.id' , ondelete = \"CASCADE\" ), nullable = False ) # \u5173\u8054\u9898\u76eeid collection_id = db . Column ( db . Integer , nullable = False ) # \u6536\u96c6id qno = db . Column ( db . Integer , nullable = False ) # \u9898\u76ee\u5e8f\u53f7 answer_option = db . Column ( db . String ( 30 ), nullable = False ) # \u7b54\u6848","title":"1.5 \u7b54\u6848\u4fe1\u606f\u8868"},{"location":"developer/database/#16","text":"\u63d0\u4ea4\u4fe1\u606f\u8868\u9879\u4ee3\u7801\u8bbe\u8ba1\u5982\u4e0b\u3002 Bases: db . Model \u6536\u96c6\u63d0\u4ea4\u8bb0\u5f55 \u8bb0\u5f55\u6240\u6709\u6536\u96c6\u7684\u63d0\u4ea4\u8bb0\u5f55\u3002 Attributes: Name Type Description id db . Integer \u4e3b\u952e collection_id db . Integer \u6536\u96c6id\uff08\u5916\u952e\uff1a\u5173\u8054collection_info.id\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 collection_title db . String \u6536\u96c6\u6807\u9898\uff08\u4e0d\u53ef\u4ee5\u4e3a\u7a7a\uff09 submitter_name db . String \u63d0\u4ea4\u8005\u59d3\u540d\uff08\u4e0d\u53ef\u4ee5\u4e3a\u7a7a\uff09 submit_time db . DateTime \u63d0\u4ea4\u65f6\u95f4\uff08\u4e0d\u53ef\u4ee5\u4e3a\u7a7a\uff09\uff0c\u9ed8\u8ba4\u4e3adatetime.datetime.now() Source code in Flask\\models.py 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 class Submission_info ( db . Model ): \"\"\"\u6536\u96c6\u63d0\u4ea4\u8bb0\u5f55 \u8bb0\u5f55\u6240\u6709\u6536\u96c6\u7684\u63d0\u4ea4\u8bb0\u5f55\u3002 Attributes: id (db.Integer): \u4e3b\u952e collection_id (db.Integer): \u6536\u96c6id\uff08\u5916\u952e\uff1a\u5173\u8054collection_info.id\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 collection_title (db.String): \u6536\u96c6\u6807\u9898\uff08\u4e0d\u53ef\u4ee5\u4e3a\u7a7a\uff09 submitter_name (db.String): \u63d0\u4ea4\u8005\u59d3\u540d\uff08\u4e0d\u53ef\u4ee5\u4e3a\u7a7a\uff09 submit_time (db.DateTime): \u63d0\u4ea4\u65f6\u95f4\uff08\u4e0d\u53ef\u4ee5\u4e3a\u7a7a\uff09\uff0c\u9ed8\u8ba4\u4e3adatetime.datetime.now() \"\"\" id = db . Column ( db . Integer , primary_key = True ) # \u4e3b\u952e collection_id = db . Column ( db . Integer , db . ForeignKey ( 'collection_info.id' , ondelete = \"CASCADE\" ), nullable = False ) # \u5173\u8054\u6536\u96c6id collection_title = db . Column ( db . String ( 50 ), nullable = False ) # \u6536\u96c6\u6807\u9898 submitter_name = db . Column ( db . String ( 30 ), nullable = False ) # \u63d0\u4ea4\u8005\u540d\u79f0 submit_time = db . Column ( db . DateTime , nullable = False , default = datetime . datetime . now ()) # \u63d0\u4ea4\u65f6\u95f4","title":"1.6 \u63d0\u4ea4\u4fe1\u606f\u8868"},{"location":"developer/database/#17","text":"\u63d0\u4ea4\u5185\u5bb9\u4fe1\u606f\u8868\u9879\u4ee3\u7801\u8bbe\u8ba1\u5982\u4e0b\u3002 Bases: db . Model \u63d0\u4ea4\u5185\u5bb9\u4fe1\u606f\u8868\u3002 \u8bb0\u5f55\u6536\u96c6\u6bcf\u4e00\u9898\u7684\u586b\u5199\u60c5\u51b5\u3002 Attributes: Name Type Description id db . Integer \u4e3b\u952e submission_id db . Integer \u63d0\u4ea4\u8bb0\u5f55id\uff08\u5916\u952e\uff1a\u5173\u8054submission_info.id\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 question_id db . Integer \u9898\u76eeid\uff08\u5916\u952e\uff1a\u5173\u8054question_info.id\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 collection_id db . Integer \u6536\u96c6id\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 qno db . Integer \u9898\u76ee\u5e8f\u53f7\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 result db . String \u67d0\u4e2a\u4eba\u5bf9\u8fd9\u4e00\u9898\u7684\u586b\u5199\u7ed3\u679c\uff08\u82e5\u4e3a\u6587\u4ef6\u4e0a\u4f20\u9898\uff0c\u5219\u6b64\u5b57\u6bb5\u5b58\u653e\u4e0a\u4f20\u7684\u6587\u4ef6\u540d\u79f0\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 Source code in Flask\\models.py 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 class Submit_Content_info ( db . Model ): \"\"\" \u63d0\u4ea4\u5185\u5bb9\u4fe1\u606f\u8868\u3002 \u8bb0\u5f55\u6536\u96c6\u6bcf\u4e00\u9898\u7684\u586b\u5199\u60c5\u51b5\u3002 Attributes: id (db.Integer): \u4e3b\u952e submission_id (db.Integer): \u63d0\u4ea4\u8bb0\u5f55id\uff08\u5916\u952e\uff1a\u5173\u8054submission_info.id\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 question_id (db.Integer): \u9898\u76eeid\uff08\u5916\u952e\uff1a\u5173\u8054question_info.id\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 collection_id (db.Integer): \u6536\u96c6id\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 qno (db.Integer): \u9898\u76ee\u5e8f\u53f7\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 result (db.String): \u67d0\u4e2a\u4eba\u5bf9\u8fd9\u4e00\u9898\u7684\u586b\u5199\u7ed3\u679c\uff08\u82e5\u4e3a\u6587\u4ef6\u4e0a\u4f20\u9898\uff0c\u5219\u6b64\u5b57\u6bb5\u5b58\u653e\u4e0a\u4f20\u7684\u6587\u4ef6\u540d\u79f0\uff09\uff08\u4e0d\u53ef\u4e3a\u7a7a\uff09 \"\"\" id = db . Column ( db . Integer , primary_key = True ) # \u4e3b\u952e submission_id = db . Column ( db . Integer , db . ForeignKey ( 'submission_info.id' , ondelete = \"CASCADE\" ), nullable = False ) # \u5173\u8054\u63d0\u4ea4\u8bb0\u5f55id question_id = db . Column ( db . Integer , db . ForeignKey ( 'question_info.id' , ondelete = \"CASCADE\" ), nullable = False ) # \u9898\u76eeid collection_id = db . Column ( db . Integer , nullable = False ) # \u6536\u96c6id qno = db . Column ( db . Integer , nullable = False ) # \u95ee\u9898\u5e8f\u53f7 result = db . Column ( db . String ( 50 ), nullable = False ) # \u586b\u5199\u7ed3\u679c","title":"1.7 \u5185\u5bb9\u4fe1\u606f\u8868"},{"location":"developer/database/#2-api","text":"\u6570\u636e\u5e93\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u64cd\u4f5c\u63a5\u53e3\u65b9\u4fbf Flask \u89c6\u56fe\u51fd\u6570\u5904\u7406\u6570\u636e\u3002","title":"2. \u6570\u636e\u5e93 API \u8bbe\u8ba1"},{"location":"developer/database/#21","text":"","title":"2.1 \u5e10\u53f7\u4fe1\u606f\u76f8\u5173"},{"location":"developer/database/#211","text":"\u4fee\u6539\u5bc6\u7801\u901a\u8fc7 modify_password \u5b9e\u73b0\u3002 \u4fee\u6539\u5bc6\u7801 Parameters: Name Type Description Default user_id int \u7528\u6237id required original_pswd str \u539f\u59cb\u5bc6\u7801 required new_pswd str \u65b0\u5bc6\u7801 required Returns: Type Description int \u82e5\u4e3a -1\uff0c\u5219\u7528\u6237 id \u4e0d\u5b58\u5728\uff1b\u82e5\u4e3a 0\uff0c\u5219\u539f\u5bc6\u7801\u9519\u8bef\uff1b\u82e5\u4e3a 1\uff0c\u5219\u4fee\u6539\u6210\u529f\u3002 Source code in Flask\\db_manipulation.py 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 def modify_password ( user_id : int , original_pswd : str , new_pswd : str ) -> int : \"\"\"\u4fee\u6539\u5bc6\u7801 Args: user_id: \u7528\u6237id original_pswd: \u539f\u59cb\u5bc6\u7801 new_pswd: \u65b0\u5bc6\u7801 Returns: \u82e5\u4e3a -1\uff0c\u5219\u7528\u6237 id \u4e0d\u5b58\u5728\uff1b\u82e5\u4e3a 0\uff0c\u5219\u539f\u5bc6\u7801\u9519\u8bef\uff1b\u82e5\u4e3a 1\uff0c\u5219\u4fee\u6539\u6210\u529f\u3002 \"\"\" user = User . query . filter_by ( id = user_id ) . first () # \u5728\u6570\u636e\u5e93\u4e2d\u67e5\u8be2\u7528\u6237 # \u8be5\u7528\u6237id\u4e0d\u5b58\u5728 if user is None : return - 1 # \u9a8c\u8bc1\u539f\u5bc6\u7801 if not user . validate_password ( original_pswd ): return 0 # \u4fee\u6539\u5bc6\u7801 user . set_password ( new_pswd ) db . session . commit () return 1 # \u4fee\u6539\u6210\u529f","title":"2.1.1 \u4fee\u6539\u5bc6\u7801"},{"location":"developer/database/#212","text":"\u4fee\u6539\u4e2a\u4eba\u4fe1\u606f\u901a\u8fc7 modify_personal_info \u5b9e\u73b0\u3002 \u4fee\u6539\u4e2a\u4eba\u4fe1\u606f\uff08\u6635\u79f0\u3001\u90ae\u7bb1\u3001\u90ae\u7bb1\u6388\u6743\u7801\uff09 Parameters: Name Type Description Default user_id int \u7528\u6237id required new_name str \u65b0\u6635\u79f0 required new_email str \u65b0\u90ae\u7bb1 required authorization_code str \u90ae\u7bb1\u6388\u6743\u7801 required Returns: Type Description int \u82e5\u4e3a-1\uff0c\u5219\u7528\u6237id\u4e0d\u5b58\u5728\uff1b\u82e5\u4e3a1\uff0c\u5219\u4fee\u6539\u6210\u529f\u3002 Source code in Flask\\db_manipulation.py 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 def modify_personal_info ( user_id : int , new_name : str , new_email : str , authorization_code : str ) -> int : \"\"\"\u4fee\u6539\u4e2a\u4eba\u4fe1\u606f\uff08\u6635\u79f0\u3001\u90ae\u7bb1\u3001\u90ae\u7bb1\u6388\u6743\u7801\uff09 Args: user_id: \u7528\u6237id new_name: \u65b0\u6635\u79f0 new_email: \u65b0\u90ae\u7bb1 authorization_code: \u90ae\u7bb1\u6388\u6743\u7801 Returns: \u82e5\u4e3a-1\uff0c\u5219\u7528\u6237id\u4e0d\u5b58\u5728\uff1b\u82e5\u4e3a1\uff0c\u5219\u4fee\u6539\u6210\u529f\u3002 \"\"\" user = User . query . get ( user_id ) # \u8be5\u7528\u6237id\u4e0d\u5b58\u5728 if user is None : return - 1 # \u4fee\u6539\u4e2a\u4eba\u4fe1\u606f user . name = new_name user . email = new_email user . authorization_code = authorization_code user . email_authentication ( user_email = user . email , user_pwd = user . authorization_code ) db . session . commit () return 1 # \u4fee\u6539\u6210\u529f","title":"2.1.2 \u4fee\u6539\u4e2a\u4eba\u4fe1\u606f"},{"location":"developer/database/#22","text":"","title":"2.2 \u6536\u96c6\u4fe1\u606f\u76f8\u5173"},{"location":"developer/database/#221","text":"\u6dfb\u52a0\u6536\u96c6\u901a\u8fc7 add_FC \u5b9e\u73b0\u3002 \u5c06\u65b0\u521b\u5efa\u7684\u6536\u96c6\u5b58\u5165\u6570\u636e\u5e93\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u6536\u96c6\u5206\u914d\u4e00\u4e2a\u6536\u96c6\u8005\u7528\u6237\u76ee\u5f55\u4e0b\u7684\u5b50\u76ee\u5f55\uff0c\u603b\u957f\u5ea6\u4e3a X \u4f4d\uff0c\u6700\u540e\u4e00\u4f4d\u4ee3\u8868\u6536\u96c6 id\u3002 Parameters: Name Type Description Default question_list list \u9898\u76ee\u4fe1\u606f\u5217\u8868 required user_id int \u7528\u6237id required Returns: Name Type Description collection_id int \u6536\u96c6id Source code in Flask\\db_manipulation.pydef add_FC ( question_list : list , user_id : int ) -> int : \"\"\"\u5c06\u65b0\u521b\u5efa\u7684\u6536\u96c6\u5b58\u5165\u6570\u636e\u5e93\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u6536\u96c6\u5206\u914d\u4e00\u4e2a\u6536\u96c6\u8005\u7528\u6237\u76ee\u5f55\u4e0b\u7684\u5b50\u76ee\u5f55\uff0c\u603b\u957f\u5ea6\u4e3a X \u4f4d\uff0c\u6700\u540e\u4e00\u4f4d\u4ee3\u8868\u6536\u96c6 id\u3002 Args: question_list: \u9898\u76ee\u4fe1\u606f\u5217\u8868 user_id: \u7528\u6237id Returns: collection_id (int): \u6536\u96c6id \"\"\" # ! \u6587\u4ef6\u7c7b\u578b\u53ef\u80fd\u6709\u591a\u4e2a\uff0c\u8bbe\u7f6e\u4e00\u4e2a\u8ba1\u6570\u5668\u8bb0\u5f55\u662f\u7b2c\u51e0\u4e2a\u6587\u4ef6 file_counter = 0 # * \u6587\u4ef6\u8ba1\u6570\u5668 list_of_question_dict = deepcopy ( question_list ) # ! \u4fdd\u5b58\u5143\u7ec4\u7684\u5217\u8868\uff0c\u4e0e\u5b57\u5178\u7c7b\u578b\u7684\u533a\u522b\u5728\u4e8e\u662f\u5426\u5bf9 key \u53bb\u91cd question_multidict = MultiDict ( question_list ) # \u524d\u7aef\u4f20\u6765\u7684deadLine\u4e3astring\u7c7b\u578b\uff0c\u5728\u6b64\u8f6c\u5316\u4e3adatetime\u7c7b\u578b deadline = question_multidict [ 'deadline' ] # ! \u89e3\u51b3 00 \u79d2\u7684\u95ee\u9898 if len ( deadline ) < 19 : deadline += ':00' deadline = deadline . replace ( \"T\" , \" \" ) question_multidict [ 'deadline' ] = datetime . strptime ( deadline , '%Y-%m- %d %H:%M:%S' ) # * \u751f\u6210\u5e94\u4ea4\u540d\u5355\u8def\u5f84 # collection_counter = Collection_info.query.filter_by(creator_id=user_id).count() # \u83b7\u53d6\u5f53\u524d\u7528\u6237\u521b\u5efa\u7684\u6536\u96c6\u603b\u6570 # namelist_path = current_user.userpath + '/' + str(collection_counter) + ''.join( # random.sample(string.ascii_letters + string.digits, 8) # ) # * \u603b\u957f\u5ea6\u4e3a 20 + 1 + 1 + 8 = 30 \u4f4d # \u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u6536\u96c6\u5bf9\u8c61,\u66f4\u65b0\u6587\u4ef6\u6536\u96c6\u4e3b\u8868\u91cc collection = Collection_info ( creator = question_multidict [ 'collector' ], creator_id = user_id , collection_title = question_multidict [ 'collectionTitle' ], description = question_multidict [ 'description' ], end_date = question_multidict [ 'deadline' ], # namelist_path=namelist_path, status = Collection_info . SAVED ) db . session . add ( collection ) db . session . commit () # \u63d0\u4ea4\u6570\u636e\u5e93\u4f1a\u8bdd\uff0c\u5426\u5219 id \u4e3aNone collection_id = collection . id # ! \u751f\u6210\u6587\u4ef6\u5b58\u50a8\u8def\u5f84\uff0c\u6700\u540e\u4e00\u4f4d\u56fa\u5b9a\u4e3a\u6536\u96c6 id # ! \u751f\u6210\u4f4d\u7f6e\u4e3a\uff1aFileStorage / userpath / filepath # * \u603b\u957f\u5ea6\u4e3a 20 + 5 + 10 = 35 \u4f4d # file_path = current_user.userpath + '/file' + ''.join( # random.sample(string.ascii_letters + string.digits, 4 - len(str(collection_id))) # ) + str(collection_id) file_path = os . path . join ( APP_FILE , current_user . userpath , 'file' + '' . join ( random . sample ( string . ascii_letters + string . digits , 10 - len ( str ( collection_id ))) ) + str ( collection_id ) ) os . makedirs ( file_path ) # \u521b\u5efa\u8be5\u6536\u96c6\u7684\u6587\u4ef6\u5b58\u50a8\u76ee\u5f55 # ! \u751f\u6210\u5e94\u4ea4\u540d\u5355\u8def\u5f84\uff0c\u4e0e\u6587\u4ef6\u5b58\u50a8\u8def\u5f84\u76f8\u540c # ! \u5e94\u4ea4\u540d\u5355\u4ee5 .csv \u683c\u5f0f\u5b58\u653e\u5728 filepath \u4e0b # ! \u751f\u6210\u4f4d\u7f6e\u4e3a\uff1aFileStorage / userpath / filepath / xxx.csv # * \u66f4\u65b0 Collection_info \u7684 collection_path \u5c5e\u6027 collection = Collection_info . query . filter_by ( id = collection_id ) collection . update ({ 'collection_path' : file_path }) db . session . commit () key_list = list ( question_multidict . keys ()) # \u95ee\u9898\u7684\u952e\u5217\u8868 question_key_list = [ question_key for question_key in key_list if \"question\" in question_key ] seq = 0 # \u66f4\u65b0\u95ee\u9898\u4e3b\u8868\u548c\u7b54\u6848\u8868 for question_key in question_key_list : seq += 1 # ? \u82e5\u4e3a\u59d3\u540d\u9898 if \"name\" in question_key : question = Question_info ( collection_id = collection_id , qno = seq , question_type = Question_info . NAME , question_title = question_multidict [ question_key ], question_description = question_multidict [ f 'detail { seq } ' ]) db . session . add ( question ) db . session . commit () # ? \u82e5\u4e3a\u5b66\u53f7\u9898 if \"sno\" in question_key : question = Question_info ( collection_id = collection_id , qno = seq , question_type = Question_info . SNO , question_title = question_multidict [ question_key ], question_description = question_multidict [ f 'detail { seq } ' ]) db . session . add ( question ) db . session . commit () # ? \u82e5\u4e3a\u5355\u9009\u9898 elif \"radio\" in question_key : question = Question_info ( collection_id = collection_id , qno = seq , question_type = Question_info . SINGLE_CHOICE , question_title = question_multidict [ question_key ], question_description = question_multidict [ f 'detail { seq } ' ]) db . session . add ( question ) db . session . commit () # \u5b58\u9009\u62e9\u9898\u7b54\u6848 answer = Answer_info ( collection_id = collection_id , question_id = question . id , qno = seq , answer_option = question_multidict [ f 'checked_radio { seq } ' ]) db . session . add ( answer ) db . session . commit () # ? \u82e5\u4e3a\u591a\u9009\u9898 elif \"multipleChoice\" in question_key : question = Question_info ( collection_id = collection_id , qno = seq , question_type = Question_info . MULTI_CHOICE , question_title = question_multidict [ question_key ], question_description = question_multidict [ f 'detail { seq } ' ]) db . session . add ( question ) db . session . commit () # \u5b58\u9009\u62e9\u9898\u7b54\u6848 ano_list = question_multidict . getlist ( f 'checked_mulans { seq } ' ) ano = '-' . join ( ano_list ) answer = Answer_info ( collection_id = collection_id , question_id = question . id , qno = seq , answer_option = ano ) db . session . add ( answer ) db . session . commit () # ? \u82e5\u4e3a\u95ee\u5377\u9898 elif \"question_qnaire\" in question_key : if question_multidict [ f 'choose_type { seq } ' ] == 'single' : qn_type = Question_info . SINGLE_QUESTIONNAIRE else : qn_type = Question_info . MULTI_QUESTIONNAIRE question = Question_info ( collection_id = collection_id , qno = seq , question_type = qn_type , question_title = question_multidict [ question_key ], question_description = question_multidict [ f 'detail { seq } ' ]) db . session . add ( question ) db . session . commit () # \u5b58\u95ee\u5377\u9898\u76ee\u5404\u9009\u9879\u7684\u5185\u5bb9 option_content = question_multidict . getlist ( f 'qn_option { seq } ' ) for i in range ( len ( option_content )): option = Option_info ( collection_id = collection_id , question_id = question . id , qno = seq , option_sn = i , option_content = option_content [ i ]) db . session . add ( option ) db . session . commit () # ? \u82e5\u4e3a\u6587\u4ef6\u4e0a\u4f20\u9898 elif \"file\" in question_key : # \u786e\u5b9a\u6587\u4ef6\u91cd\u547d\u540d\u89c4\u5219 file_counter += 1 rename_rule = [] rename_rule_list = [] # * \u91cd\u547d\u540d\u6240\u9700\u7684\u9898\u76ee question_num = str ( seq ) for elem in list_of_question_dict : if elem [ 0 ] == \"checked_topic\" + question_num : rename_rule_list . append ( elem [ 1 ]) # TODO \u903b\u8f91\u6709\u5f85\u4f18\u5316 cnt = 0 for elem in list_of_question_dict : if elem [ 1 ] not in rename_rule_list : continue rename_rule . append ( re . findall ( r \"\\d+\" , elem [ 0 ])[ 0 ]) # ! \u5f85\u6dfb\u52a0\u5206\u9694\u7b26 cnt += 1 if cnt >= len ( rename_rule_list ): # * \u9632\u6b62\u83b7\u53d6\u5230\u6587\u4ef6\u540e\u9762\u7684\u91cd\u547d\u540d\u89c4\u5219 break rename_rule = '-' . join ( rename_rule ) if rename_rule == '' : rename_rule = None question = Question_info ( collection_id = collection_id , qno = seq , question_type = Question_info . FILE_UPLOAD , question_title = question_multidict [ question_key ], question_description = question_multidict [ f 'detail { seq } ' ], rename_rule = rename_rule , # * \u547d\u540d\u89c4\u5219\u7528 - \u5206\u9694\uff0c\u6570\u5b57\u4ee3\u8868\u9898\u76ee\u5e8f\u53f7 # file_path=file_path + \"/\" + id_int_to_str( # file_counter # ) # ! \u521b\u5efa\u4e00\u4e2a\u4ee5 file_counter \u547d\u540d\u7684\u5b50\u76ee\u5f55 # ! \u521b\u5efa\u4e00\u4e2a\u4ee5 file_counter \u547d\u540d\u7684\u5b50\u76ee\u5f55 # file_path=os.path.join( # file_path, # id_int_to_str(file_counter) # ) file_path = os . path . join ( file_path , str ( file_counter ) ) ) db . session . add ( question ) db . session . commit () path = os . path . join ( APP_FILE , question . file_path ) print ( \"\u7b2c\" , seq , \"\u9898\u7684\u6587\u4ef6\u5b58\u50a8\u8def\u5f84\uff1a\" , path ) # ! \u8c03\u8bd5 try : os . makedirs ( path ) # \u521b\u5efa\u8be5\u9898\u7684\u6587\u4ef6\u5b58\u50a8\u76ee\u5f55 except OSError : print ( \"\u6587\u4ef6\u5b58\u50a8\u8def\u5f84\u9519\u8bef\uff01\" ) return collection_id","title":"2.2.1 \u6dfb\u52a0\u6536\u96c6\u95ee\u5377"},{"location":"developer/database/#222","text":"\u5220\u9664\u6536\u96c6\u901a\u8fc7 delete_collection \u5b9e\u73b0\u3002 \u5220\u9664id\u4e3acollection_id\u7684\u6536\u96c6\u5728\u6570\u636e\u5e93\u4e2d\u7684\u6240\u6709\u76f8\u5173\u4fe1\u606f Parameters: Name Type Description Default collection_id int \u6536\u96c6id required Source code in Flask\\db_manipulation.py 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 def delete_collection ( collection_id : int ) -> None : \"\"\"\u5220\u9664id\u4e3acollection_id\u7684\u6536\u96c6\u5728\u6570\u636e\u5e93\u4e2d\u7684\u6240\u6709\u76f8\u5173\u4fe1\u606f Args: collection_id: \u6536\u96c6id \"\"\" Submit_Content_info . query . filter_by ( collection_id = collection_id ) . delete () Submission_info . query . filter_by ( collection_id = collection_id ) . delete () Option_info . query . filter_by ( collection_id = collection_id ) . delete () Answer_info . query . filter_by ( collection_id = collection_id ) . delete () # \u5220\u9664\u8be5\u6536\u96c6\u7684\u5b58\u50a8\u8def\u5f84 file_path = Collection_info . query . get ( collection_id ) . collection_path file_path = Path ( os . path . join ( APP_FILE , file_path )) shutil . rmtree ( file_path ) Question_info . query . filter_by ( collection_id = collection_id ) . delete () Collection_info . query . filter_by ( id = collection_id ) . delete () db . session . commit ()","title":"2.2.2 \u5220\u9664\u6536\u96c6\u95ee\u5377"},{"location":"developer/database/#223","text":"\u67e5\u770b\u6536\u96c6\u4fe1\u606f\u901a\u8fc7 get_question_dict \u5b9e\u73b0\u3002 \u83b7\u53d6id\u4e3acollection_id\u7684\u6536\u96c6\u7684\u76f8\u5173\u4fe1\u606f Parameters: Name Type Description Default collection_id int \u6536\u96c6id required Returns: Type Description dict \u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u542b\u8be5\u6536\u96c6\u7684\u76f8\u5173\u4fe1\u606f\uff08\u6536\u96c6\u6807\u9898\u3001\u6536\u96c6\u63cf\u8ff0\u3001\u521b\u5efa\u8005\u3001\u622a\u6b62\u65f6\u95f4\u3001\u9898\u76ee\u7b49\u7b49\uff09\u3002 \u683c\u5f0f\u5982\u4e0b\uff1a [('collectionTitle', 'ceshi'), ('collector', '\u51ef'), ('deadline', '2022-11-18T22:31:49'), ('description', ''), ('question_name1', '\u59d3\u540d'), ('detail1', ''), ('question_sno2', '\u5b66\u53f7'), ('detail2', ''), ('question_file3', '\u6587\u4ef6'), ('detail3', ''), ('question_radio4', '\u5355\u9009\u9898'), ('detail4', ''), ('checked_radio4', 'A'), ('question_multipleChoice5', '\u591a\u9009\u9898'), ('detail5', ''), ('checked_mulans5', 'B'), ('checked_mulans5', 'C'), ('question_qnaire6', '\u95ee\u5377\u9898\u76ee'), ('detail6', ''), ('qn_option6', 'asdf'), ('qn_option6', 'adff'), ('choose_type6', 'single')] Source code in Flask\\db_manipulation.py 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 def get_question_dict ( collection_id : int ) -> dict : \"\"\"\u83b7\u53d6id\u4e3acollection_id\u7684\u6536\u96c6\u7684\u76f8\u5173\u4fe1\u606f Args: collection_id: \u6536\u96c6id Returns: (dict): \u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u542b\u8be5\u6536\u96c6\u7684\u76f8\u5173\u4fe1\u606f\uff08\u6536\u96c6\u6807\u9898\u3001\u6536\u96c6\u63cf\u8ff0\u3001\u521b\u5efa\u8005\u3001\u622a\u6b62\u65f6\u95f4\u3001\u9898\u76ee\u7b49\u7b49\uff09\u3002 \u683c\u5f0f\u5982\u4e0b\uff1a [('collectionTitle', 'ceshi'), ('collector', '\u51ef'), ('deadline', '2022-11-18T22:31:49'), ('description', ''), ('question_name1', '\u59d3\u540d'), ('detail1', ''), ('question_sno2', '\u5b66\u53f7'), ('detail2', ''), ('question_file3', '\u6587\u4ef6'), ('detail3', ''), ('question_radio4', '\u5355\u9009\u9898'), ('detail4', ''), ('checked_radio4', 'A'), ('question_multipleChoice5', '\u591a\u9009\u9898'), ('detail5', ''), ('checked_mulans5', 'B'), ('checked_mulans5', 'C'), ('question_qnaire6', '\u95ee\u5377\u9898\u76ee'), ('detail6', ''), ('qn_option6', 'asdf'), ('qn_option6', 'adff'), ('choose_type6', 'single')] \"\"\" seq = 0 question = {} collection = Collection_info . query . get ( collection_id ) if collection is None : return None seq += 1 question [ f ' { seq } _collectionTitle' ] = collection . collection_title seq += 1 question [ f ' { seq } _collector' ] = collection . creator seq += 1 question [ f ' { seq } _deadline' ] = collection . end_date . strftime ( \"%Y-%m- %d %H:%M:%S\" ) seq += 1 question [ f ' { seq } _description' ] = collection . description question_list = Question_info . query . filter_by ( collection_id = collection_id ) . order_by ( \"qno\" ) . all () for q in question_list : # \u82e5\u662f\u59d3\u540d\u9898 if q . question_type == Question_info . NAME : seq += 1 question [ f ' { seq } _question_name { q . qno } ' ] = q . question_title seq += 1 question [ f ' { seq } _detail { q . qno } ' ] = q . question_description # \u82e5\u662f\u59d3\u540d\u9898 if q . question_type == Question_info . SNO : seq += 1 question [ f ' { seq } _question_sno { q . qno } ' ] = q . question_title seq += 1 question [ f ' { seq } _detail { q . qno } ' ] = q . question_description # \u82e5\u662f\u6587\u4ef6\u4e0a\u4f20\u9898 if q . question_type == Question_info . FILE_UPLOAD : seq += 1 question [ f ' { seq } _question_file { q . qno } ' ] = q . question_title seq += 1 question [ f ' { seq } _detail { q . qno } ' ] = q . question_description # \u91cd\u547d\u540d\u89c4\u5219 if q . rename_rule is None : seq += 1 question [ f ' { seq } _checked_topic { q . qno } ' ] = '' else : qno_list = list ( map ( int , q . rename_rule . split ( '-' ))) for qno in qno_list : seq += 1 question [ f ' { seq } _checked_topic { q . qno } ' ] = Question_info . query . \\ filter_by ( collection_id = collection_id , qno = qno ) . first () . question_title # \u82e5\u662f\u5355\u9009\u9898 if q . question_type == Question_info . SINGLE_CHOICE : seq += 1 question [ f ' { seq } _question_radio { q . qno } ' ] = q . question_title seq += 1 question [ f ' { seq } _detail { q . qno } ' ] = q . question_description # \u5355\u9009\u9898\u7b54\u6848 seq += 1 question [ f ' { seq } _checked_radio { q . qno } ' ] = Answer_info . query . \\ filter_by ( question_id = q . id ) . first () . answer_option # \u82e5\u662f\u591a\u9009\u9898 if q . question_type == Question_info . MULTI_CHOICE : seq += 1 question [ f ' { seq } _question_multipleChoice { q . qno } ' ] = q . question_title seq += 1 question [ f ' { seq } _detail { q . qno } ' ] = q . question_description # \u591a\u9009\u9898\u7b54\u6848 answer_list = Answer_info . query . filter_by ( question_id = q . id ) . first () . answer_option . split ( '-' ) for answer in answer_list : seq += 1 question [ f ' { seq } _checked_mulans { q . qno } ' ] = answer # \u82e5\u662f\u95ee\u5377\u9898 if q . question_type == Question_info . SINGLE_QUESTIONNAIRE or \\ q . question_type == Question_info . MULTI_QUESTIONNAIRE : seq += 1 question [ f ' { seq } _question_qnaire { q . qno } ' ] = q . question_title seq += 1 question [ f ' { seq } _detail { q . qno } ' ] = q . question_description option_list = Option_info . query . filter_by ( question_id = q . id ) . order_by ( \"option_sn\" ) . all () for option in option_list : seq += 1 question [ f ' { seq } _qn_option { q . qno } ' ] = option . option_content if q . question_type == Question_info . SINGLE_QUESTIONNAIRE : seq += 1 question [ f ' { seq } _choose_type { q . qno } ' ] = \"single\" else : seq += 1 question [ f ' { seq } _choose_type { q . qno } ' ] = \"multiple\" return question","title":"2.2.3 \u67e5\u770b\u6536\u96c6\u4fe1\u606f"},{"location":"developer/database/#224","text":"\u4fee\u6539\u5df2\u521b\u5efa\u6536\u96c6\u7684\u4fe1\u606f\u901a\u8fc7 modify_collection \u5b9e\u73b0\u3002 \u4fee\u6539\u5df2\u521b\u5efa\u7684\u6536\u96c6 Parameters: Name Type Description Default collection_id int \u6536\u96c6id required question_list list \u95ee\u9898\u4fe1\u606f\u5217\u8868 required Source code in Flask\\db_manipulation.py 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 def modify_collection ( collection_id : int , question_list : list ) -> None : \"\"\"\u4fee\u6539\u5df2\u521b\u5efa\u7684\u6536\u96c6 Args: collection_id: \u6536\u96c6id question_list: \u95ee\u9898\u4fe1\u606f\u5217\u8868 \"\"\" question_multidict = MultiDict ( question_list ) # \u524d\u7aef\u4f20\u6765\u7684deadLine\u4e3astring\u7c7b\u578b\uff0c\u5728\u6b64\u8f6c\u5316\u4e3adatetime\u7c7b\u578b deadline = question_multidict [ 'deadline' ] if len ( deadline ) < 19 : deadline += ':00' # ! \u89e3\u51b3 00 \u79d2\u7684\u95ee\u9898 deadline = deadline . replace ( \"T\" , \" \" ) question_multidict [ 'deadline' ] = datetime . strptime ( deadline , '%Y-%m- %d %H:%M:%S' ) # \u66f4\u65b0Collection_info\u8868\u4e2d\u7684\u4fe1\u606f collection = Collection_info . query . filter_by ( id = collection_id ) collection . update ({ 'start_date' : datetime . now (), 'collection_title' : question_multidict [ 'collectionTitle' ], 'creator' : question_multidict [ 'collector' ], 'description' : question_multidict [ 'description' ], 'end_date' : question_multidict [ 'deadline' ]}) db . session . commit () # \u95ee\u9898\u7684\u952e\u5217\u8868 key_list = list ( question_multidict . keys ()) question_key_list = [ question_key for question_key in key_list if \"question\" in question_key ] seq = 0 for question_key in question_key_list : seq += 1 question = Question_info . query . filter_by ( collection_id = collection_id , qno = seq ) if 'name' in question_key : question . update ({ 'question_title' : question_multidict [ f 'question_name { seq } ' ], 'question_description' : question_multidict [ f 'detail { seq } ' ]}) elif 'sno' in question_key : question . update ({ 'question_title' : question_multidict [ f 'question_sno { seq } ' ], 'question_description' : question_multidict [ f 'detail { seq } ' ]}) elif 'file' in question_key : # \u786e\u5b9a\u6587\u4ef6\u91cd\u547d\u540d\u89c4\u5219 rename_rule = [] rename_rule_list = [] # * \u91cd\u547d\u540d\u6240\u9700\u7684\u9898\u76ee question_num = str ( seq ) for elem in question_list : if elem [ 0 ] == \"checked_topic\" + question_num : rename_rule_list . append ( elem [ 1 ]) cnt = 0 for elem in question_list : if elem [ 1 ] not in rename_rule_list : continue rename_rule . append ( re . findall ( r \"\\d+\" , elem [ 0 ])[ 0 ]) # ! \u5f85\u6dfb\u52a0\u5206\u9694\u7b26 cnt += 1 if cnt >= len ( rename_rule_list ): # * \u9632\u6b62\u83b7\u53d6\u5230\u6587\u4ef6\u540e\u9762\u7684\u91cd\u547d\u540d\u89c4\u5219 break rename_rule = '-' . join ( rename_rule ) if rename_rule == '' : rename_rule = None question . update ({ 'question_title' : question_multidict [ f 'question_file { seq } ' ], 'question_description' : question_multidict [ f 'detail { seq } ' ], 'rename_rule' : rename_rule }) elif 'radio' in question_key : question . update ({ 'question_title' : question_multidict [ f 'question_radio { seq } ' ], 'question_description' : question_multidict [ f 'detail { seq } ' ]}) # \u66f4\u65b0\u7b54\u6848 answer = Answer_info . query . filter_by ( collection_id = collection_id , qno = seq ) answer . update ({ 'answer_option' : question_multidict [ f 'checked_radio { seq } ' ]}) elif 'multipleChoice' in question_key : question . update ({ 'question_title' : question_multidict [ f 'question_multipleChoice { seq } ' ], 'question_description' : question_multidict [ f 'detail { seq } ' ]}) # \u66f4\u65b0\u7b54\u6848 ano_list = question_multidict . getlist ( f 'checked_mulans { seq } ' ) ano = '-' . join ( ano_list ) answer = Answer_info . query . filter_by ( collection_id = collection_id , qno = seq ) answer . update ({ 'answer_option' : ano }) elif 'qnaire' in question_key : question . update ({ 'question_title' : question_multidict [ f 'question_qnaire { seq } ' ], 'question_description' : question_multidict [ f 'detail { seq } ' ]}) if question_multidict [ f 'choose_type { seq } ' ] == 'single' : question . update ({ 'question_type' : Question_info . SINGLE_QUESTIONNAIRE }) else : question . update ({ 'question_type' : Question_info . MULTI_QUESTIONNAIRE }) # \u5148\u5220\u9664\u539f\u6765\u7684\u9009\u9879\u5185\u5bb9\uff0c\u5728\u521b\u5efa\u65b0\u7684 Option_info . query . filter_by ( question_id = question . first () . id ) . delete () # \u66f4\u65b0\u9009\u9879 option_content = question_multidict . getlist ( f 'qn_option { seq } ' ) for index , value in enumerate ( option_content ): option = Option_info ( collection_id = collection_id , question_id = question . first () . id , qno = seq , option_sn = index , option_content = value ) db . session . add ( option ) db . session . commit ()","title":"2.2.4 \u4fee\u6539\u6536\u96c6\u4fe1\u606f"},{"location":"developer/database/#225","text":"\u83b7\u53d6\u67d0\u4e2a\u6536\u96c6\u7684\u63d0\u4ea4\u4fe1\u606f\u901a\u8fc7 submission_record \u5b9e\u73b0\u3002 \u83b7\u53d6id\u4e3acollection_id\u7684\u6536\u96c6\u7684\u63d0\u4ea4\u8bb0\u5f55\uff08\u59d3\u540d\uff0c\u63d0\u4ea4\u65f6\u95f4\uff0c\u6587\u4ef6\u6570\u91cf\uff0c\u6587\u4ef6\u8be6\u60c5\uff09 Parameters: Name Type Description Default collection_id int \u6536\u96c6id required Returns: Type Description list \u4e00\u4e2a\u5143\u7ec4\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7ec4\u8868\u793a\u4e00\u6761\u63d0\u4ea4\u4fe1\u606f\u3002 For example: [('\u8ba1\u80dc\u7fd4', datetime.datetime(2022, 11, 5, 20, 25, 32, 142115), 2, ['jsx1.pdf', 'jsx2.doc']), ('\u5f20\u96bd\u7fca', datetime.datetime(2022, 11, 5, 20, 25, 32, 142115), 1, ['zjy1.pdf'])] Source code in Flask\\db_manipulation.py 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 def submission_record ( collection_id : int ) -> list : \"\"\"\u83b7\u53d6id\u4e3acollection_id\u7684\u6536\u96c6\u7684\u63d0\u4ea4\u8bb0\u5f55\uff08\u59d3\u540d\uff0c\u63d0\u4ea4\u65f6\u95f4\uff0c\u6587\u4ef6\u6570\u91cf\uff0c\u6587\u4ef6\u8be6\u60c5\uff09 Args: collection_id: \u6536\u96c6id Returns: (list): \u4e00\u4e2a\u5143\u7ec4\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7ec4\u8868\u793a\u4e00\u6761\u63d0\u4ea4\u4fe1\u606f\u3002 For example: [('\u8ba1\u80dc\u7fd4', datetime.datetime(2022, 11, 5, 20, 25, 32, 142115), 2, ['jsx1.pdf', 'jsx2.doc']), ('\u5f20\u96bd\u7fca', datetime.datetime(2022, 11, 5, 20, 25, 32, 142115), 1, ['zjy1.pdf'])] \"\"\" # \u83b7\u53d6\u63d0\u4ea4\u540d\u5355\u5217\u8868 name_list = Submission_info . query . \\ filter_by ( collection_id = collection_id ) . \\ order_by ( \"id\" ) . \\ with_entities ( Submission_info . submitter_name ) . \\ all () name_list = list ( map ( itemgetter ( 0 ), name_list )) # \u83b7\u53d6\u63d0\u4ea4\u65f6\u95f4\u5217\u8868 time_list = Submission_info . query . \\ filter_by ( collection_id = collection_id ) . \\ order_by ( \"id\" ) . \\ with_entities ( Submission_info . submit_time ) . \\ all () time_list = list ( map ( itemgetter ( 0 ), time_list )) # \u83b7\u53d6\u63d0\u4ea4\u4fe1\u606fid\u5217\u8868 submission_id_list = Submission_info . query . \\ filter_by ( collection_id = collection_id ) . \\ order_by ( 'id' ) . \\ with_entities ( Submission_info . id ) . \\ all () submission_id_list = list ( map ( itemgetter ( 0 ), submission_id_list )) # \u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u9898\u7684\u95ee\u9898id\u5217\u8868 question_id_list = Question_info . query . \\ filter_by ( collection_id = collection_id , question_type = Question_info . FILE_UPLOAD ) . \\ with_entities ( Question_info . id ) . all () question_id_list = list ( map ( itemgetter ( 0 ), question_id_list )) file_num_list = [] for id in submission_id_list : num = Submit_Content_info . query . \\ filter ( Submit_Content_info . submission_id == id , Submit_Content_info . question_id . in_ ( question_id_list )) . count () file_num_list . append ( num ) # \u6784\u5efa\u6587\u4ef6\u8be6\u60c5\u5217\u8868 file_list = [] for id in submission_id_list : file = Submit_Content_info . query . filter ( Submit_Content_info . submission_id == id , Submit_Content_info . question_id . in_ ( question_id_list )) . \\ with_entities ( Submit_Content_info . result ) . \\ all () file = list ( map ( itemgetter ( 0 ), file )) file_list . append ( file ) record = list ( zip ( name_list , time_list , file_num_list , file_list )) # \u5bf9\u5143\u7ec4\u5217\u8868\u6839\u636esubmit_time\u8fdb\u884c\u964d\u5e8f\u6392\u5e8f record = list ( reversed ( sorted ( record , key = lambda x : ( x [ 1 ] . timestamp (), x [ 0 ])))) return record \u5bf9\u5e94\u7684\u53e6\u4e00\u4e2a\u7248\u672c\u662f submission_record_v2 \uff0c\u76f8\u6bd4 submission_record \u591a\u8fd4\u56de\u4e86\u63d0\u4ea4 id\u3002 \u83b7\u53d6id\u4e3acollection_id\u7684\u6536\u96c6\u7684\u63d0\u4ea4\u8bb0\u5f55\uff08\u59d3\u540d\uff0c\u63d0\u4ea4\u65f6\u95f4\uff0c\u6587\u4ef6\u6570\u91cf\uff0c\u6587\u4ef6\u8be6\u60c5\uff09 Parameters: Name Type Description Default collection_id int \u6536\u96c6id required Returns: Type Description list \u4e00\u4e2a\u5143\u7ec4\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7ec4\u8868\u793a\u4e00\u6761\u63d0\u4ea4\u4fe1\u606f\uff0c\u5143\u7ec4\u6309Submission.id\u6392\u5e8f\u3002 \u6bcf\u4e2a\u5143\u7ec4\u683c\u5f0f\u4e3a\uff08\u63d0\u4ea4\u8bb0\u5f55id: int, \u59d3\u540d: string, \u63d0\u4ea4\u65f6\u95f4: datetime, \u6587\u4ef6\u6570\u91cf: int, \u6587\u4ef6\u8be6\u60c5: list\uff09 \u4f8b\u5982: [(1, '\u8ba1\u80dc\u7fd4', datetime.datetime(2022, 11, 5, 20, 25, 32, 142115), 2, ['jsx1.pdf', 'jsx2.doc']), (2, '\u5f20\u96bd\u7fca', datetime.datetime(2022, 11, 5, 20, 25, 32, 142115), 1, ['zjy1.pdf'])] Source code in Flask\\db_manipulation.py 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 def submission_record_v2 ( collection_id : int ) -> list : \"\"\"\u83b7\u53d6id\u4e3acollection_id\u7684\u6536\u96c6\u7684\u63d0\u4ea4\u8bb0\u5f55\uff08\u59d3\u540d\uff0c\u63d0\u4ea4\u65f6\u95f4\uff0c\u6587\u4ef6\u6570\u91cf\uff0c\u6587\u4ef6\u8be6\u60c5\uff09 Args: collection_id: \u6536\u96c6id Returns: (list): \u4e00\u4e2a\u5143\u7ec4\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7ec4\u8868\u793a\u4e00\u6761\u63d0\u4ea4\u4fe1\u606f\uff0c\u5143\u7ec4\u6309Submission.id\u6392\u5e8f\u3002 \u6bcf\u4e2a\u5143\u7ec4\u683c\u5f0f\u4e3a\uff08\u63d0\u4ea4\u8bb0\u5f55id: int, \u59d3\u540d: string, \u63d0\u4ea4\u65f6\u95f4: datetime, \u6587\u4ef6\u6570\u91cf: int, \u6587\u4ef6\u8be6\u60c5: list\uff09 \u4f8b\u5982: [(1, '\u8ba1\u80dc\u7fd4', datetime.datetime(2022, 11, 5, 20, 25, 32, 142115), 2, ['jsx1.pdf', 'jsx2.doc']), (2, '\u5f20\u96bd\u7fca', datetime.datetime(2022, 11, 5, 20, 25, 32, 142115), 1, ['zjy1.pdf'])] \"\"\" # \u83b7\u53d6\u63d0\u4ea4\u8bb0\u5f55id id_list = Submission_info . query . \\ filter_by ( collection_id = collection_id ) . \\ order_by ( \"id\" ) . \\ with_entities ( Submission_info . id ) . \\ all () id_list = list ( map ( itemgetter ( 0 ), id_list )) # \u83b7\u53d6\u63d0\u4ea4\u540d\u5355\u5217\u8868 name_list = Submission_info . query . \\ filter_by ( collection_id = collection_id ) . \\ order_by ( \"id\" ) . \\ with_entities ( Submission_info . submitter_name ) . \\ all () name_list = list ( map ( itemgetter ( 0 ), name_list )) # \u83b7\u53d6\u63d0\u4ea4\u65f6\u95f4\u5217\u8868 time_list = Submission_info . query . \\ filter_by ( collection_id = collection_id ) . \\ order_by ( \"id\" ) . \\ with_entities ( Submission_info . submit_time ) . \\ all () time_list = list ( map ( itemgetter ( 0 ), time_list )) # \u83b7\u53d6\u63d0\u4ea4\u4fe1\u606fid\u5217\u8868 submission_id_list = Submission_info . query . \\ filter_by ( collection_id = collection_id ) . \\ order_by ( 'id' ) . \\ with_entities ( Submission_info . id ) . \\ all () submission_id_list = list ( map ( itemgetter ( 0 ), submission_id_list )) # \u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u9898\u7684\u95ee\u9898id\u5217\u8868 question_id_list = Question_info . query . \\ filter_by ( collection_id = collection_id , question_type = Question_info . FILE_UPLOAD ) . \\ with_entities ( Question_info . id ) . all () question_id_list = list ( map ( itemgetter ( 0 ), question_id_list )) file_num_list = [] for id in submission_id_list : num = Submit_Content_info . query . \\ filter ( Submit_Content_info . submission_id == id , Submit_Content_info . question_id . in_ ( question_id_list )) . count () file_num_list . append ( num ) # \u6784\u5efa\u6587\u4ef6\u8be6\u60c5\u5217\u8868 file_list = [] for id in submission_id_list : file = Submit_Content_info . query . filter ( Submit_Content_info . submission_id == id , Submit_Content_info . question_id . in_ ( question_id_list )) . \\ with_entities ( Submit_Content_info . result ) . \\ all () file = list ( map ( itemgetter ( 0 ), file )) file_list . append ( file ) record = list ( zip ( id_list , name_list , time_list , file_num_list , file_list )) # \u5bf9\u5143\u7ec4\u5217\u8868\u6839\u636esubmit_time\u8fdb\u884c\u964d\u5e8f\u6392\u5e8f record = list ( reversed ( sorted ( record , key = lambda x : ( x [ 2 ] . timestamp (), x [ 0 ])))) return record","title":"2.2.5 \u83b7\u53d6\u63d0\u4ea4\u4fe1\u606f"},{"location":"developer/database/#226","text":"\u5411\u6570\u636e\u5e93\u4e2d\u6dfb\u52a0\u7528\u6237\u586b\u5199\u7684\u5185\u5bb9\u901a\u8fc7 save_submission \u5b9e\u73b0\u3002 \u4fdd\u5b58\u6536\u96c6\u63d0\u4ea4\u5185\u5bb9 Parameters: Name Type Description Default submission_list list \u63d0\u4ea4\u4fe1\u606f\u5217\u8868 required collection_id int \u6536\u96c6id required file werkzeug . datastructures . ImmutableMultiDict \u7f51\u9875\u63d0\u4ea4\u8868\u5355\u4e2d\u7684\u6587\u4ef6\u6570\u636e required Returns: Type Description int \u82e5\u63d0\u4ea4\u65f6\u95f4\u8d85\u8fc7\u6536\u96c6\u622a\u6b62\u65f6\u95f4\uff0c\u5219\u8fd4\u56de-1\uff1b int \u82e5\u672a\u8d85\u65f6\uff0c\u5219\u8fd4\u56de\u63d0\u4ea4\u8bb0\u5f55id\u3002 Source code in Flask\\db_manipulation.py 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 def save_submission ( submission_list : list , collection_id : int , file : werkzeug . datastructures . ImmutableMultiDict ) -> int : \"\"\"\u4fdd\u5b58\u6536\u96c6\u63d0\u4ea4\u5185\u5bb9 Args: submission_list: \u63d0\u4ea4\u4fe1\u606f\u5217\u8868 collection_id: \u6536\u96c6id file: \u7f51\u9875\u63d0\u4ea4\u8868\u5355\u4e2d\u7684\u6587\u4ef6\u6570\u636e Returns: \u82e5\u63d0\u4ea4\u65f6\u95f4\u8d85\u8fc7\u6536\u96c6\u622a\u6b62\u65f6\u95f4\uff0c\u5219\u8fd4\u56de-1\uff1b \u82e5\u672a\u8d85\u65f6\uff0c\u5219\u8fd4\u56de\u63d0\u4ea4\u8bb0\u5f55id\u3002 \"\"\" submission_multidict = MultiDict ( submission_list ) key_list = list ( submission_multidict . keys ()) # \u63d0\u53d6\u95ee\u9898\u7684\u952e\u503c\u5217\u8868 name_key_list = list ( filter ( lambda x : x . find ( \"name\" ) >= 0 , key_list )) if len ( name_key_list ) != 0 : name_key = name_key_list [ 0 ] qno = re . findall ( r \"\\d+\" , name_key )[ 0 ] # \u521b\u5efa\u4e00\u4e2a\u63d0\u4ea4\u8bb0\u5f55\uff0c\u5e76\u52a0\u5165\u6570\u636e\u5e93 submission = Submission_info ( collection_id = collection_id , submitter_name = submission_multidict [ 'submit_name' + qno ], submit_time = datetime . now ()) else : submission = Submission_info ( collection_id = collection_id , submitter_name = '' , submit_time = datetime . now ()) # ! \u5224\u65ad\u63d0\u4ea4\u65f6\u95f4\u662f\u5426\u8d85\u8fc7\u622a\u6b62\u65f6\u95f4 deadline = Collection_info . query . get ( collection_id ) . end_date diff = ( submission . submit_time - deadline ) . total_seconds () if diff > 0 : print ( '\u63d0\u4ea4\u65f6\u95f4\u8d85\u65f6\uff01' ) return - 1 # \u82e5\u672a\u8d85\u65f6 submission . collection_title = Collection_info . query . get ( collection_id ) . collection_title db . session . add ( submission ) db . session . commit () submission_id = submission . id # \u83b7\u5f97\u8be5\u63d0\u4ea4\u8bb0\u5f55\u7684id key_list = [ key for key in key_list if \"question\" in key ] seq = 0 for key in key_list : seq += 1 submit_content = Submit_Content_info ( submission_id = submission_id , collection_id = collection_id , qno = seq ) question_id = Question_info . query . filter_by ( collection_id = collection_id , qno = seq ) . first () . id submit_content . question_id = question_id # \u82e5\u4e3a\u59d3\u540d\u9898 if \"name\" in key : submit_content . result = submission_multidict [ f 'submit_name { seq } ' ] # \u82e5\u4e3a\u5b66\u53f7\u9898 elif \"sno\" in key : submit_content . result = submission_multidict [ f 'submit_sno { seq } ' ] # \u82e5\u4e3a\u6587\u4ef6\u4e0a\u4f20\u9898 elif \"file\" in key : filename = file . get ( f 'submit_file { seq } ' ) . filename submit_content . result = filename # \u82e5\u4e3a\u5355\u9009\u9898 elif \"radio\" in key : submit_content . result = submission_multidict [ f 'submit_checked_radio { seq } ' ] # \u82e5\u4e3a\u591a\u9009\u9898 elif \"multipleChoice\" in key : result = submission_multidict . getlist ( f \"submit_checked_mulans { seq } \" ) result = '-' . join ( result ) submit_content . result = result elif \"qnaire\" in key : result = submission_multidict . getlist ( f \"submit_checked_qnaire { seq } \" ) result = '-' . join ( result ) submit_content . result = result db . session . add ( submit_content ) db . session . commit () return submission_id","title":"2.2.6 \u6dfb\u52a0\u63d0\u4ea4\u4fe1\u606f"},{"location":"developer/database/#227","text":"\u5c06\u63d0\u4ea4\u8005\u4e0a\u4f20\u7684\u6587\u4ef6\u5b58\u50a8\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u901a\u8fc7 file_upload \u5b9e\u73b0\u3002 \u5c06\u63d0\u4ea4\u7684\u6587\u4ef6\u91cd\u547d\u540d\u540e\uff0c\u5b58\u50a8\u5230\u9898\u76ee\u76f8\u5e94\u7684\u8def\u5f84\u4e2d Parameters: Name Type Description Default collection_id int \u6536\u96c6id required question_list list \u95ee\u9898\u4fe1\u606f\u5217\u8868 required file werkzeug . datastructures . ImmutableMultiDict \u7f51\u9875\u63d0\u4ea4\u8868\u5355\u4e2d\u7684\u6587\u4ef6\u6570\u636e required Returns: Type Description werkzeug . datastructures . ImmutableMultiDict \u8fd4\u56de\u91cd\u547d\u540d\u540e\u7684\u8868\u5355\u4e2d\u7684\u6587\u4ef6\u6570\u636e\uff0c\u4ee5\u4fbf\u8c03\u7528save_submission\u51fd\u6570\u65f6\u4f7f\u7528 Source code in Flask\\db_manipulation.py 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 def file_upload ( collection_id : int , question_list : list , file : werkzeug . datastructures . ImmutableMultiDict ) -> werkzeug . datastructures . ImmutableMultiDict : \"\"\"\u5c06\u63d0\u4ea4\u7684\u6587\u4ef6\u91cd\u547d\u540d\u540e\uff0c\u5b58\u50a8\u5230\u9898\u76ee\u76f8\u5e94\u7684\u8def\u5f84\u4e2d Args: collection_id: \u6536\u96c6id question_list: \u95ee\u9898\u4fe1\u606f\u5217\u8868 file: \u7f51\u9875\u63d0\u4ea4\u8868\u5355\u4e2d\u7684\u6587\u4ef6\u6570\u636e Returns: \u8fd4\u56de\u91cd\u547d\u540d\u540e\u7684\u8868\u5355\u4e2d\u7684\u6587\u4ef6\u6570\u636e\uff0c\u4ee5\u4fbf\u8c03\u7528save_submission\u51fd\u6570\u65f6\u4f7f\u7528 \"\"\" question_multidict = MultiDict ( question_list ) key_list = list ( question_multidict . keys ()) file_key_list = list ( filter ( lambda x : 'file' in x , key_list )) submit_key_list = list ( filter ( lambda x : 'submit' in x , key_list )) for file_key in file_key_list : qno_str = re . findall ( r \"\\d+\" , file_key )[ 0 ] question = Question_info . query . filter_by ( collection_id = collection_id , qno = int ( qno_str )) . first () f = file [ 'submit_file' + qno_str ] # \u786e\u5b9a\u6587\u4ef6\u5b58\u50a8\u8def\u5f84 # path = './FileStorage/' + question.file_path path = os . path . join ( APP_FILE , question . file_path ) # \u91cd\u547d\u540d\u6587\u4ef6 rename_rule = question . rename_rule if rename_rule is not None : # \u82e5\u91cd\u547d\u540d\u89c4\u5219\u4e0d\u4e3a\u7a7a filename_list = f . filename . split ( '.' ) # \u5c06\u6587\u4ef6\u540d\u5206\u4e3a\u540d\u79f0\u548c\u540e\u7f00\u4e24\u90e8\u5206\uff0c\u4fbf\u4e8e\u540e\u9762\u4fee\u6539\u540d\u79f0 new_filename = '' rename_qno_list = rename_rule . split ( '-' ) # \u91cd\u547d\u540d\u4f9d\u8d56\u7684\u9898\u76ee\u5e8f\u53f7\u5217\u8868 for index , qno in enumerate ( rename_qno_list ): key = list ( filter ( lambda x : qno in x , submit_key_list ))[ 0 ] new_filename += question_multidict [ key ] if index != len ( rename_qno_list ) - 1 : new_filename += '_' filename_list [ 0 ] = new_filename f . filename = '.' . join ( filename_list ) # \u4fee\u6539\u6587\u4ef6\u540d # print(\"\u91cd\u547d\u540d\u540e\u6587\u4ef6\u540d\u4e3a\uff1a\", f.filename) # \u4fdd\u5b58\u6587\u4ef6\u5230\u6307\u5b9a\u8def\u5f84 f . save ( os . path . join ( path , f . filename )) return file","title":"2.2.7 \u63d0\u4ea4\u6587\u4ef6\u5b58\u50a8"},{"location":"developer/database/#23","text":"","title":"2.3 \u72b6\u6001\u66f4\u65b0\u76f8\u5173"},{"location":"developer/database/#231","text":"\u8ba1\u7b97\u67d0\u4e2a\u6536\u96c6\u8fd8\u6709\u591a\u957f\u65f6\u95f4\u622a\u6b62\u7684\u5012\u8ba1\u65f6\u901a\u8fc7 deadline_countdown \u5b9e\u73b0\u3002 \u622a\u6b62\u5012\u8ba1\u65f6 Parameters: Name Type Description Default collection_id int \u6536\u96c6id required Returns: Type Description Datetime \u622a\u6b62\u5012\u8ba1\u65f6\u3002 Source code in Flask\\db_manipulation.py 594 595 596 597 598 599 600 601 602 603 604 605 def deadline_countdown ( collection_id : int ): \"\"\" \u622a\u6b62\u5012\u8ba1\u65f6 Args: collection_id: \u6536\u96c6id Returns: (Datetime): \u622a\u6b62\u5012\u8ba1\u65f6\u3002 \"\"\" current_time = datetime . now () # \u83b7\u53d6\u5f53\u524d\u65f6\u95f4 deadline = Collection_info . query . get ( collection_id ) . end_date # \u67e5\u8be2\u95ee\u5377\u622a\u6b62\u65f6\u95f4 return deadline - current_time # \u8fd4\u56de\u5012\u8ba1\u65f6","title":"2.3.1 \u8ba1\u7b97\u6536\u96c6\u622a\u6b62\u5012\u8ba1\u65f6"},{"location":"developer/database/#234","text":"\u5c06\u6536\u96c6\u7684\u72b6\u6001\u4fee\u6539\u4e3a\u201c\u5df2\u622a\u6b62\u201d\u901a\u8fc7 stop_collection \u5b9e\u73b0\u3002 \u505c\u6b62\u6536\u96c6 Parameters: Name Type Description Default collection_id int \u6536\u96c6id required action_list list \u64cd\u4f5c\u7801\u5217\u8868 required Source code in Flask\\db_manipulation.py 952 953 954 955 956 957 958 959 960 961 962 963 964 def stop_collection ( collection_id : int , action_list : list ) -> None : \"\"\"\u505c\u6b62\u6536\u96c6 Args: collection_id: \u6536\u96c6id action_list: \u64cd\u4f5c\u7801\u5217\u8868 \"\"\" collection = Collection_info . query . filter_by ( id = collection_id ) collection . update ({ 'status' : Collection_info . FINISHED }) # \u72b6\u6001\u6807\u8bb0\u4e3a\u5df2\u622a\u6b62 new_ddl = action_list [ 2 ] new_ddl = datetime . strptime ( new_ddl , '%Y-%m- %d %H:%M:%S' ) collection . update ({ 'end_date' : new_ddl }) db . session . commit ()","title":"2.3.4 \u4fee\u6539\u6536\u96c6\u72b6\u6001\u4e3a\u622a\u6b62"},{"location":"developer/database/#24","text":"","title":"2.4 \u7edf\u8ba1\u6c47\u603b\u76f8\u5173"},{"location":"developer/database/#241","text":"\u7edf\u8ba1\u63d0\u4ea4\u6570\u91cf\u901a\u8fc7 count_submission \u5b9e\u73b0\u3002 \u7edf\u8ba1\u4e00\u4e2a\u6536\u96c6\u7684\u63d0\u4ea4\u6570\u91cf Parameters: Name Type Description Default collection_id int \u6536\u96c6id None Returns: Type Description int \u82e5collection_id\u4e0d\u4e3a None\uff0c\u5219\u8fd4\u56de\u8be5\u95ee\u5377\u7684\u63d0\u4ea4\u6570\u91cf\uff0c\u662f\u4e00\u4e2a\u6574\u6570\uff1b\u5426\u5219\u8fd4\u56deNone\u3002 Source code in Flask\\db_manipulation.py 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 def count_submission ( collection_id : int = None ) -> int : \"\"\"\u7edf\u8ba1\u4e00\u4e2a\u6536\u96c6\u7684\u63d0\u4ea4\u6570\u91cf Args: collection_id: \u6536\u96c6id Returns: \u82e5collection_id\u4e0d\u4e3a None\uff0c\u5219\u8fd4\u56de\u8be5\u95ee\u5377\u7684\u63d0\u4ea4\u6570\u91cf\uff0c\u662f\u4e00\u4e2a\u6574\u6570\uff1b\u5426\u5219\u8fd4\u56deNone\u3002 \"\"\" # \u5148\u770b\u662f\u5426\u7ed9\u4e86\u53c2\u6570collection_id if collection_id is not None : return Submission_info . query . filter_by ( collection_id = collection_id ) . count () return None","title":"2.4.1 \u7edf\u8ba1\u63d0\u4ea4\u6570\u91cf"},{"location":"developer/database/#242","text":"\u7edf\u8ba1\u5df2\u6536\u6587\u4ef6\u6570\u901a\u8fc7 count_filenum \u5b9e\u73b0\u3002 \u7edf\u8ba1\u4e00\u4e2a\u6536\u96c6\u7684\u5df2\u6536\u6587\u4ef6\u6570 Parameters: Name Type Description Default collection_id int \u6536\u96c6id None Returns: Type Description int \u82e5collection_id\u4e0d\u4e3aNone\uff0c\u5219\u8fd4\u56de\u8be5\u95ee\u5377\u7684\u5df2\u6536\u6587\u4ef6\u6570\uff0c\u662f\u4e00\u4e2a\u6574\u6570\uff1b\u5426\u5219\u8fd4\u56deNone\u3002 Source code in Flask\\db_manipulation.py 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 def count_filenum ( collection_id : int = None ) -> int : \"\"\"\u7edf\u8ba1\u4e00\u4e2a\u6536\u96c6\u7684\u5df2\u6536\u6587\u4ef6\u6570 Args: collection_id: \u6536\u96c6id Returns: \u82e5collection_id\u4e0d\u4e3aNone\uff0c\u5219\u8fd4\u56de\u8be5\u95ee\u5377\u7684\u5df2\u6536\u6587\u4ef6\u6570\uff0c\u662f\u4e00\u4e2a\u6574\u6570\uff1b\u5426\u5219\u8fd4\u56deNone\u3002 \"\"\" # \u82e5\u6ca1\u7ed9\u53c2\u6570question_id\uff0c\u4f46\u7ed9\u4e86\u53c2\u6570collection_id if collection_id is not None : # \u67e5\u8be2\u6536\u96c6\u4e2d\u6240\u6709\u6587\u4ef6\u4e0a\u4f20\u9898\u7684id question_id_list = Question_info . query . filter_by ( collection_id = collection_id , question_type = Question_info . FILE_UPLOAD ) . with_entities ( Question_info . id ) . all () question_id_list = list ( map ( itemgetter ( 0 ), question_id_list )) file_num = 0 # \u904d\u5386\u8be5\u6536\u96c6\u4e2d\u6240\u6709\u6587\u4ef6\u4e0a\u4f20\u9898\uff0c\u7edf\u8ba1\u5df2\u6536\u6587\u4ef6\u603b\u6570 for q_id in question_id_list : # path = './FileStorage/' + Question_info.query.filter_by(id=q_id).first().file_path path = os . path . join ( APP_FILE , Question_info . query . filter_by ( id = q_id ) . first () . file_path ) files = os . listdir ( path ) file_num += len ( files ) return file_num return None","title":"2.4.2 \u7edf\u8ba1\u5df2\u6536\u6587\u4ef6\u6570"},{"location":"developer/database/#243","text":"\u83b7\u53d6\u6536\u96c6\u4fe1\u606f\u548c\u6307\u5b9a id \u7684\u7528\u6237\u63d0\u4ea4\u5185\u5bb9\u901a\u8fc7 get_submission_dict \u5b9e\u73b0\u3002 \u83b7\u53d6id\u4e3acollection_id\u7684\u6536\u96c6\u3001\u63d0\u4ea4\u8bb0\u5f55id\u4e3asubmission_id\u7684\u7528\u6237\u63d0\u4ea4\u5185\u5bb9\u4fe1\u606f Parameters: Name Type Description Default collection_id int \u6536\u96c6id required submission_id int \u63d0\u4ea4\u8bb0\u5f55id required Returns: Type Description dict \u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u542b\u8be5\u63d0\u4ea4\u8bb0\u5f55\u4e2d\u7528\u6237\u7684\u63d0\u4ea4\u5185\u5bb9\u3002 \u683c\u5f0f\u5982\u4e0b\uff1a {'1_collectionTitle': '\u6838\u9178\u68c0\u6d4b', '2_collector': '\u5f20\u4e09', '3_deadline': '2022-11-15 15:23:09', '4_description': '', '5_question_name1': '\u59d3\u540d', '6_detail1': '', '7_submit_name1': '\u738b\u5e7f\u51ef', '8_question_sno2': '\u5b66\u53f7', '9_detail2': '', '10_submit_sno2': 'U202012345', '11_question_file3': '\u6587\u4ef6', '12_detail3': '', '13_submit_file3': '\u7cfb\u7edf\u8bbe\u8ba1.md', '14_question_radio4': '\u5355\u9009\u9898', '15_detail4': '', '16_checked_radio4': 'A', '17_submit_radio4': 'B', '18_question_multipleChoice5': '\u591a\u9009\u9898', '19_detail5': '', '20_checked_mulans5': 'C', '21_checked_mulans5': 'D', '22_submit_mulans5': 'A', '23_submit_mulans5': 'B', '24_question_qnaire6': '\u95ee\u5377\u9898\u76ee', '25_detail6': '\u662f\u5426\u5df2\u505a\u6838\u9178', '26_qn_option6': '\u662f', '27_qn_option6': '\u5426', '28_submit_qnaire6': '2'} Source code in Flask\\db_manipulation.py 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 def get_submission_dict ( collection_id : int , submission_id : int ) -> dict : \"\"\"\u83b7\u53d6id\u4e3acollection_id\u7684\u6536\u96c6\u3001\u63d0\u4ea4\u8bb0\u5f55id\u4e3asubmission_id\u7684\u7528\u6237\u63d0\u4ea4\u5185\u5bb9\u4fe1\u606f Args: collection_id: \u6536\u96c6id submission_id: \u63d0\u4ea4\u8bb0\u5f55id Returns: (dict): \u4e00\u4e2a\u5b57\u5178\uff0c\u5305\u542b\u8be5\u63d0\u4ea4\u8bb0\u5f55\u4e2d\u7528\u6237\u7684\u63d0\u4ea4\u5185\u5bb9\u3002 \u683c\u5f0f\u5982\u4e0b\uff1a {'1_collectionTitle': '\u6838\u9178\u68c0\u6d4b', '2_collector': '\u5f20\u4e09', '3_deadline': '2022-11-15 15:23:09', '4_description': '', '5_question_name1': '\u59d3\u540d', '6_detail1': '', '7_submit_name1': '\u738b\u5e7f\u51ef', '8_question_sno2': '\u5b66\u53f7', '9_detail2': '', '10_submit_sno2': 'U202012345', '11_question_file3': '\u6587\u4ef6', '12_detail3': '', '13_submit_file3': '\u7cfb\u7edf\u8bbe\u8ba1.md', '14_question_radio4': '\u5355\u9009\u9898', '15_detail4': '', '16_checked_radio4': 'A', '17_submit_radio4': 'B', '18_question_multipleChoice5': '\u591a\u9009\u9898', '19_detail5': '', '20_checked_mulans5': 'C', '21_checked_mulans5': 'D', '22_submit_mulans5': 'A', '23_submit_mulans5': 'B', '24_question_qnaire6': '\u95ee\u5377\u9898\u76ee', '25_detail6': '\u662f\u5426\u5df2\u505a\u6838\u9178', '26_qn_option6': '\u662f', '27_qn_option6': '\u5426', '28_submit_qnaire6': '2'} \"\"\" seq = 0 submission = {} collection = Collection_info . query . get ( collection_id ) if collection is None : return None seq += 1 submission [ f ' { seq } _collectionTitle' ] = collection . collection_title seq += 1 submission [ f ' { seq } _collector' ] = collection . creator seq += 1 submission [ f ' { seq } _deadline' ] = collection . end_date . strftime ( \"%Y-%m- %d %H:%M:%S\" ) seq += 1 submission [ f ' { seq } _description' ] = collection . description question_list = Question_info . query . filter_by ( collection_id = collection_id ) . order_by ( \"qno\" ) . all () submission_content_list = Submit_Content_info . query . filter_by ( submission_id = submission_id ) . order_by ( \"qno\" ) . all () for q , s in list ( zip ( question_list , submission_content_list )): # \u82e5\u662f\u59d3\u540d\u9898 if q . question_type == Question_info . NAME : seq += 1 submission [ f ' { seq } _question_name { q . qno } ' ] = q . question_title seq += 1 submission [ f ' { seq } _detail { q . qno } ' ] = q . question_description seq += 1 submission [ f ' { seq } _submit_name { q . qno } ' ] = s . result # \u82e5\u662f\u59d3\u540d\u9898 if q . question_type == Question_info . SNO : seq += 1 submission [ f ' { seq } _question_sno { q . qno } ' ] = q . question_title seq += 1 submission [ f ' { seq } _detail { q . qno } ' ] = q . question_description seq += 1 submission [ f ' { seq } _submit_sno { q . qno } ' ] = s . result # \u82e5\u662f\u6587\u4ef6\u4e0a\u4f20\u9898 if q . question_type == Question_info . FILE_UPLOAD : seq += 1 submission [ f ' { seq } _question_file { q . qno } ' ] = q . question_title seq += 1 submission [ f ' { seq } _detail { q . qno } ' ] = q . question_description seq += 1 submission [ f ' { seq } _submit_file { q . qno } ' ] = s . result # \u82e5\u662f\u5355\u9009\u9898 if q . question_type == Question_info . SINGLE_CHOICE : seq += 1 submission [ f ' { seq } _question_radio { q . qno } ' ] = q . question_title seq += 1 submission [ f ' { seq } _detail { q . qno } ' ] = q . question_description # \u5355\u9009\u9898\u7b54\u6848 seq += 1 submission [ f ' { seq } _checked_radio { q . qno } ' ] = Answer_info . query . \\ filter_by ( question_id = q . id ) . first () . answer_option # \u7528\u6237\u63d0\u4ea4\u7b54\u6848 seq += 1 submission [ f ' { seq } _submit_radio { q . qno } ' ] = s . result # \u82e5\u662f\u591a\u9009\u9898 if q . question_type == Question_info . MULTI_CHOICE : seq += 1 submission [ f ' { seq } _question_multipleChoice { q . qno } ' ] = q . question_title seq += 1 submission [ f ' { seq } _detail { q . qno } ' ] = q . question_description # \u591a\u9009\u9898\u7b54\u6848 answer_list = Answer_info . query . filter_by ( question_id = q . id ) . first () . answer_option . split ( '-' ) for answer in answer_list : seq += 1 submission [ f ' { seq } _checked_mulans { q . qno } ' ] = answer # \u7528\u6237\u63d0\u4ea4\u7b54\u6848 submit_option_list = s . result . split ( '-' ) for submit_option in submit_option_list : seq += 1 submission [ f ' { seq } _submit_mulans { q . qno } ' ] = submit_option # \u82e5\u662f\u95ee\u5377\u9898 if q . question_type == Question_info . SINGLE_QUESTIONNAIRE or \\ q . question_type == Question_info . MULTI_QUESTIONNAIRE : seq += 1 submission [ f ' { seq } _question_qnaire { q . qno } ' ] = q . question_title seq += 1 submission [ f ' { seq } _detail { q . qno } ' ] = q . question_description # \u9009\u9879\u5185\u5bb9 option_list = Option_info . query . filter_by ( question_id = q . id ) . order_by ( \"option_sn\" ) . all () for option in option_list : seq += 1 submission [ f ' { seq } _qn_option { q . qno } ' ] = option . option_content # \u7528\u6237\u63d0\u4ea4\u9009\u9879 submit_option_list = s . result . split ( '-' ) for submit_option in submit_option_list : seq += 1 submission [ f ' { seq } _submit_qnaire { q . qno } ' ] = submit_option return submission","title":"2.4.3 \u83b7\u53d6\u6536\u96c6\u4fe1\u606f\u548c\u63d0\u4ea4\u8bb0\u5f55"},{"location":"developer/database/#244","text":"\u7edf\u8ba1\u9009\u62e9\u9898\u3001\u95ee\u5377\u9898\u7b54\u9898\u60c5\u51b5\u901a\u8fc7 collection_data_statistics \u5b9e\u73b0\u3002 \u5bf9\u6536\u96c6\u4e2d\u7684\u9009\u62e9\u9898\u3001\u95ee\u5377\u9898\u7684\u7b54\u9898\u60c5\u51b5\u8fdb\u884c\u6570\u636e\u7edf\u8ba1 Parameters: Name Type Description Default collection_id int \u6536\u96c6id required Returns: Name Type Description choice_statistics dict \u9009\u62e9\u9898\u7b54\u9898\u60c5\u51b5\u6570\u636e\u7edf\u8ba1\u3002\u82e5\u6536\u96c6\u4e2d\u65e0\u9009\u62e9\u9898\uff0c\u5219\u8fd4\u56deNone\uff1b\u5426\u5219\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u683c\u5f0f\u5982\u4e0b: choice_data = {'question_1': { 'questionName': '\u5355\u9009\u9898', 'correctAnswer': 'A', 'accuracy': 0.25, 'A': ['\u738b\u6893\u7199'], 'B': ['\u5f20\u96bd\u7fca'], 'C': ['\u738b\u5e7f\u51ef'], 'D': ['\u8ba1\u80dc\u7fd4'] }, 'question_2': { 'questionName': '\u591a\u9009\u9898', 'correctAnswer': 'C-D', 'accuracy': 0.25, 'A': ['\u738b\u6893\u7199', '\u8ba1\u80dc\u7fd4'], 'B': ['\u738b\u6893\u7199', '\u5f20\u96bd\u7fca'], 'C': ['\u5f20\u96bd\u7fca', '\u738b\u5e7f\u51ef'], 'D': ['\u738b\u5e7f\u51ef', '\u8ba1\u80dc\u7fd4'] } } qnaire_statistics dict \u95ee\u5377\u9898\u7b54\u9898\u60c5\u51b5\u6570\u636e\u7edf\u8ba1\u3002\u82e5\u6536\u96c6\u4e2d\u65e0\u95ee\u5377\u9898\uff0c\u5219\u8fd4\u56deNone\uff1b\u5426\u5219\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u683c\u5f0f\u5982\u4e0b: qnaire_data = {'question_1': { 'questionName': '\u4f60\u559c\u6b22\u5403\u5c4e\u5417\uff1f', 'optionNumber': 2, 'option_1': { 'optionName': '\u559c\u6b22', 'peopleNumber': 3, 'people': ['\u738b\u6893\u7199', '\u5f20\u96bd\u7fca', '\u738b\u5e7f\u51ef'] }, 'option_2': { 'optionName': '\u4e0d\u559c\u6b22', 'peopleNumber': 1, 'people': ['\u8ba1\u80dc\u7fd4'] } } } Source code in Flask\\db_manipulation.py 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 def collection_data_statistics ( collection_id : int ) -> dict : \"\"\"\u5bf9\u6536\u96c6\u4e2d\u7684\u9009\u62e9\u9898\u3001\u95ee\u5377\u9898\u7684\u7b54\u9898\u60c5\u51b5\u8fdb\u884c\u6570\u636e\u7edf\u8ba1 Args: collection_id: \u6536\u96c6id Returns: choice_statistics: \u9009\u62e9\u9898\u7b54\u9898\u60c5\u51b5\u6570\u636e\u7edf\u8ba1\u3002\u82e5\u6536\u96c6\u4e2d\u65e0\u9009\u62e9\u9898\uff0c\u5219\u8fd4\u56deNone\uff1b\u5426\u5219\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u683c\u5f0f\u5982\u4e0b: choice_data = {'question_1': { 'questionName': '\u5355\u9009\u9898', 'correctAnswer': 'A', 'accuracy': 0.25, 'A': ['\u738b\u6893\u7199'], 'B': ['\u5f20\u96bd\u7fca'], 'C': ['\u738b\u5e7f\u51ef'], 'D': ['\u8ba1\u80dc\u7fd4'] }, 'question_2': { 'questionName': '\u591a\u9009\u9898', 'correctAnswer': 'C-D', 'accuracy': 0.25, 'A': ['\u738b\u6893\u7199', '\u8ba1\u80dc\u7fd4'], 'B': ['\u738b\u6893\u7199', '\u5f20\u96bd\u7fca'], 'C': ['\u5f20\u96bd\u7fca', '\u738b\u5e7f\u51ef'], 'D': ['\u738b\u5e7f\u51ef', '\u8ba1\u80dc\u7fd4'] } } qnaire_statistics: \u95ee\u5377\u9898\u7b54\u9898\u60c5\u51b5\u6570\u636e\u7edf\u8ba1\u3002\u82e5\u6536\u96c6\u4e2d\u65e0\u95ee\u5377\u9898\uff0c\u5219\u8fd4\u56deNone\uff1b\u5426\u5219\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u683c\u5f0f\u5982\u4e0b: qnaire_data = {'question_1': { 'questionName': '\u4f60\u559c\u6b22\u5403\u5c4e\u5417\uff1f', 'optionNumber': 2, 'option_1': { 'optionName': '\u559c\u6b22', 'peopleNumber': 3, 'people': ['\u738b\u6893\u7199', '\u5f20\u96bd\u7fca', '\u738b\u5e7f\u51ef'] }, 'option_2': { 'optionName': '\u4e0d\u559c\u6b22', 'peopleNumber': 1, 'people': ['\u8ba1\u80dc\u7fd4'] } } } \"\"\" choice_qtype = [ Question_info . SINGLE_CHOICE , Question_info . MULTI_CHOICE ] qnaire_qtype = [ Question_info . SINGLE_QUESTIONNAIRE , Question_info . MULTI_QUESTIONNAIRE ] # \u67e5\u627e\u9009\u62e9\u9898 choice_qlist = Question_info . query . filter ( Question_info . collection_id == collection_id , Question_info . question_type . in_ ( choice_qtype )) . \\ with_entities ( Question_info . id , Question_info . question_title ) . all () # \u67e5\u770b\u662f\u5426\u7531\u63d0\u4ea4 submission = Submission_info . query . filter_by ( collection_id = collection_id ) . all () # \u5224\u65ad\u662f\u5426\u5b58\u5728\u9009\u62e9\u9898 if len ( choice_qlist ) == 0 or len ( submission ) == 0 : choice_statistics = None else : choice_statistics = {} seq = 0 for id , title in choice_qlist : seq += 1 detail = {} detail [ 'questionName' ] = title answer = Answer_info . query . filter_by ( question_id = id ) . first () . answer_option detail [ 'correctAnswer' ] = answer submit_content_list = Submit_Content_info . query . filter_by ( question_id = id ) . \\ with_entities ( Submit_Content_info . submission_id , Submit_Content_info . result ) . \\ all () id_list , result_list = zip ( * submit_content_list ) id_list , result_list = list ( id_list ), list ( result_list ) detail [ 'accuracy' ] = result_list . count ( answer ) / len ( result_list ) # \u8ba1\u7b97\u6b64\u9898\u6b63\u786e\u7387 # \u5c06submission_id\u6839\u636e\u9009\u62e9\u7684\u9009\u9879\u8fdb\u884c\u5206\u7c7b A_list = list ( filter ( lambda x : 'A' in x [ 1 ], submit_content_list )) A_id_list = list ( map ( itemgetter ( 0 ), A_list )) B_list = list ( filter ( lambda x : 'B' in x [ 1 ], submit_content_list )) B_id_list = list ( map ( itemgetter ( 0 ), B_list )) C_list = list ( filter ( lambda x : 'C' in x [ 1 ], submit_content_list )) C_id_list = list ( map ( itemgetter ( 0 ), C_list )) D_list = list ( filter ( lambda x : 'D' in x [ 1 ], submit_content_list )) D_id_list = list ( map ( itemgetter ( 0 ), D_list )) name_list = Submission_info . query . filter ( Submission_info . id . in_ ( A_id_list )) . \\ with_entities ( Submission_info . submitter_name ) . \\ all () name_list = list ( map ( itemgetter ( 0 ), name_list )) detail [ 'A' ] = name_list name_list = Submission_info . query . filter ( Submission_info . id . in_ ( B_id_list )) . \\ with_entities ( Submission_info . submitter_name ) . \\ all () name_list = list ( map ( itemgetter ( 0 ), name_list )) detail [ 'B' ] = name_list name_list = Submission_info . query . filter ( Submission_info . id . in_ ( C_id_list )) . \\ with_entities ( Submission_info . submitter_name ) . \\ all () name_list = list ( map ( itemgetter ( 0 ), name_list )) detail [ 'C' ] = name_list name_list = Submission_info . query . filter ( Submission_info . id . in_ ( D_id_list )) . \\ with_entities ( Submission_info . submitter_name ) . \\ all () name_list = list ( map ( itemgetter ( 0 ), name_list )) detail [ 'D' ] = name_list choice_statistics [ f 'question_ { seq } ' ] = detail # \u67e5\u627e\u95ee\u5377\u9898 qnaire_qlist = Question_info . query . filter ( Question_info . collection_id == collection_id , Question_info . question_type . in_ ( qnaire_qtype )) . \\ with_entities ( Question_info . id , Question_info . question_title ) . all () # \u5224\u65ad\u662f\u5426\u5b58\u5728\u95ee\u5377\u9898 if len ( qnaire_qlist ) == 0 or len ( submission ) == 0 : qnaire_statistics = None else : qnaire_statistics = {} seq = 0 for id , title in qnaire_qlist : seq += 1 detail = {} detail [ 'questionName' ] = title option_list = Option_info . query . filter_by ( question_id = id ) . \\ with_entities ( Option_info . option_sn , Option_info . option_content ) . \\ all () detail [ 'optionNumber' ] = len ( option_list ) submit_content_list = Submit_Content_info . query . filter_by ( question_id = id ) . \\ with_entities ( Submit_Content_info . submission_id , Submit_Content_info . result ) . \\ all () for sn , content in option_list : option = {} option [ 'optionName' ] = content submission_list = list ( filter ( lambda x : str ( sn + 1 ) in x [ 1 ], submit_content_list )) submission_id_list = list ( map ( itemgetter ( 0 ), submission_list )) name_list = Submission_info . query . filter ( Submission_info . id . in_ ( submission_id_list )) . \\ with_entities ( Submission_info . submitter_name ) . \\ all () name_list = list ( map ( itemgetter ( 0 ), name_list )) option [ 'peopleNumber' ] = len ( name_list ) option [ 'people' ] = name_list detail [ f 'option_ { sn + 1 } ' ] = option qnaire_statistics [ f 'question_ { seq } ' ] = detail print ( \"\u9009\u62e9\u9898\u6570\u636e\u7edf\u8ba1\uff1a\" , choice_statistics ) print ( \"\u95ee\u5377\u9898\u6570\u636e\u7edf\u8ba1\uff1a\" , qnaire_statistics ) return choice_statistics , qnaire_statistics","title":"2.4.4 \u7edf\u8ba1\u7b54\u9898\u60c5\u51b5"},{"location":"developer/dev-pro/","text":"\u9879\u76ee\u7ed3\u6784 # \u6574\u4e2a\u9879\u76ee\u7684\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\u3002 SE2022-Code/ \u251c\u2500\u2500 Docs \u2502 \u251c\u2500\u2500 about \u2502 \u251c\u2500\u2500 developer \u2502 \u251c\u2500\u2500 images \u2502 \u2514\u2500\u2500 user-guide \u2514\u2500\u2500 Src \u2514\u2500\u2500 Flask \u251c\u2500\u2500 static \u251c\u2500\u2500 stopwords \u2514\u2500\u2500 templates 1. \u6587\u6863\u90e8\u5206 # Docs/ \u76ee\u5f55\u4e0b\u5b58\u653e\u6240\u6709\u9879\u76ee\u6587\u6863\u7684 .md \u6587\u4ef6\u4ee5\u53ca\u5176\u4ed6\u4e00\u4e9b\u8d44\u6e90\u3002 2. \u4ee3\u7801\u90e8\u5206 # Src/ \u76ee\u5f55\u4e0b\u5b58\u653e\u6240\u6709\u9879\u76ee\u4ee3\u7801\u8d44\u6e90\u3002\u5176\u4e2d\u6700\u91cd\u8981\u7684\u662f Flask/ \u76ee\u5f55\u3002 Src/ \u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\u3002 Src/ \u251c\u2500\u2500 data.db \u251c\u2500\u2500 Flask \u2502 \u251c\u2500\u2500 app.py \u2502 \u251c\u2500\u2500 collection_statistic.py \u2502 \u251c\u2500\u2500 commands.py \u2502 \u251c\u2500\u2500 db_manipulation.py \u2502 \u251c\u2500\u2500 EaD.py \u2502 \u251c\u2500\u2500 errors.py \u2502 \u251c\u2500\u2500 init.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u251c\u2500\u2500 alert.css \u2502 \u2502 \u251c\u2500\u2500 css \u2502 \u2502 \u2502 \u251c\u2500\u2500 all.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 collect_details.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 create_link.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 file_collecting.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 file_preview.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 file_submitting.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 index.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 login.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 mycollection_1.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 mycollection.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 personal_homepage.css \u2502 \u2502 \u2502 \u2514\u2500\u2500 register.css \u2502 \u2502 \u251c\u2500\u2500 favicon.ico \u2502 \u2502 \u251c\u2500\u2500 iconfont \u2502 \u2502 \u2502 \u251c\u2500\u2500 demo.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 demo_index.html \u2502 \u2502 \u2502 \u251c\u2500\u2500 iconfont.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 iconfont.js \u2502 \u2502 \u2502 \u251c\u2500\u2500 iconfont.json \u2502 \u2502 \u2502 \u251c\u2500\u2500 iconfont.ttf \u2502 \u2502 \u2502 \u251c\u2500\u2500 iconfont.woff \u2502 \u2502 \u2502 \u2514\u2500\u2500 iconfont.woff2 \u2502 \u2502 \u251c\u2500\u2500 images \u2502 \u2502 \u2502 \u251c\u2500\u2500 1 .svg \u2502 \u2502 \u2502 \u251c\u2500\u2500 collectioncard_1.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 collectioncard_2.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 collectioncard_m.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 collectioncard.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 collectiondetailcard_1.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 collectiondetailcard.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 Dodoco.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 favicon-16.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 favicon-32.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 keli.gif \u2502 \u2502 \u2502 \u251c\u2500\u2500 left-bottom.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 left-top.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 mycollectioncard_1.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 mycollectioncard.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 portrait.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 right-bottom.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 right-top.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 round1.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 round2.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 test.png \u2502 \u2502 \u2502 \u2514\u2500\u2500 touxiang.png \u2502 \u2502 \u251c\u2500\u2500 js \u2502 \u2502 \u2502 \u251c\u2500\u2500 collect_detail_chart.js \u2502 \u2502 \u2502 \u251c\u2500\u2500 collect_details.js \u2502 \u2502 \u2502 \u251c\u2500\u2500 file_collecting.js \u2502 \u2502 \u2502 \u251c\u2500\u2500 file_editing.js \u2502 \u2502 \u2502 \u251c\u2500\u2500 file_preview.js \u2502 \u2502 \u2502 \u251c\u2500\u2500 file_submitting.js \u2502 \u2502 \u2502 \u251c\u2500\u2500 mycollection.js \u2502 \u2502 \u2502 \u2514\u2500\u2500 personal_homepage.js \u2502 \u2502 \u2514\u2500\u2500 js_not_compressed \u2502 \u2502 \u251c\u2500\u2500 collect_detail_chart.js \u2502 \u2502 \u251c\u2500\u2500 file_collecting.js \u2502 \u2502 \u251c\u2500\u2500 file_editing.js \u2502 \u2502 \u251c\u2500\u2500 file_preview.js \u2502 \u2502 \u251c\u2500\u2500 file_submitting.js \u2502 \u2502 \u251c\u2500\u2500 mycollection.js \u2502 \u2502 \u2514\u2500\u2500 personal_homepage.js \u2502 \u251c\u2500\u2500 templates \u2502 \u2502 \u251c\u2500\u2500 404 .html \u2502 \u2502 \u251c\u2500\u2500 collection_details.html \u2502 \u2502 \u251c\u2500\u2500 create_link.html \u2502 \u2502 \u251c\u2500\u2500 file_collecting.html \u2502 \u2502 \u251c\u2500\u2500 file_editing.html \u2502 \u2502 \u251c\u2500\u2500 file_preview.html \u2502 \u2502 \u251c\u2500\u2500 file_submitting.html \u2502 \u2502 \u251c\u2500\u2500 index.html \u2502 \u2502 \u251c\u2500\u2500 login.html \u2502 \u2502 \u251c\u2500\u2500 mycollection.html \u2502 \u2502 \u251c\u2500\u2500 personal_homepage.html \u2502 \u2502 \u251c\u2500\u2500 register.html \u2502 \u2502 \u2514\u2500\u2500 submit_successfully.html \u2502 \u251c\u2500\u2500 test.py \u2502 \u2514\u2500\u2500 views.py \u2514\u2500\u2500 wsgi.py 2.1 static \u76ee\u5f55 # static/ \u76ee\u5f55\u4e0b\u5b58\u653e\u7f51\u9875\u76f8\u5173\u7684\u6587\u4ef6\uff0c\u5305\u62ec css/ \u3001 iconfont/ \u3001 images/ \u3001 js/ \u6587\u4ef6\u5939\u3002 static/ \u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\u3002 static/ \u251c\u2500\u2500 css \u251c\u2500\u2500 iconfont \u251c\u2500\u2500 images \u2514\u2500\u2500 js 2.2 templates \u76ee\u5f55 # templates/ \u76ee\u5f55\u4e0b\u5b58\u653e\u6240\u6709 html \u7f51\u9875\u6587\u4ef6\u3002 templates/ \u251c\u2500\u2500 404 .html \u251c\u2500\u2500 collection_details.html \u251c\u2500\u2500 create_link.html \u251c\u2500\u2500 file_collecting.html \u251c\u2500\u2500 file_editing.html \u251c\u2500\u2500 file_preview.html \u251c\u2500\u2500 file_submitting.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 login.html \u251c\u2500\u2500 mycollection.html \u251c\u2500\u2500 personal_homepage.html \u251c\u2500\u2500 register.html \u2514\u2500\u2500 submit_successfully.html 2.3 Python \u6587\u4ef6 # Flask/ \u76ee\u5f55\u4e0b\uff0c\u91cd\u8981\u7684\u6709\u8fd9\u4e9b Python \u6587\u4ef6\uff1a init.py : \u521d\u59cb\u5316 Flask \u7a0b\u5e8f views.py : \u89c6\u56fe\u51fd\u6570 models.py : \u6570\u636e\u5e93\u7c7b\u5b9a\u4e49 errors.py : \u9519\u8bef\u5904\u7406 db_manipulation.py : \u6570\u636e\u5e93 API \u5b9a\u4e49 collection_statistic.py : \u7edf\u8ba1\u51fd\u6570 3. \u914d\u7f6e\u6587\u4ef6 # \u9664\u53bb\u4e0a\u9762\u5df2\u7ecf\u4ecb\u7ecd\u8fc7\u7684\u90e8\u5206\uff0c Src/ \u76ee\u5f55\u4e0b\u8fd8\u6709\u51e0\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u8fd9\u91cc\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b requirements.txt \u548c mkdocs.yml \u3002 3.1 requirements.txt # requirements.txt \u6587\u4ef6\u8bb0\u5f55\u4e86\u9879\u76ee\u6240\u4f9d\u8d56\u7684\u5168\u90e8 Python \u5305\u4ee5\u53ca\u7248\u672c\u8981\u6c42\uff0c\u914d\u7f6e\u73af\u5883\u65f6\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5feb\u901f\u68c0\u67e5\u548c\u8865\u5145\u6240\u9700\u8981\u7684\u5305\u3002 pip install -r requirements.txt 3.2 mkdocs.yml # mkdocs.yml \u6587\u4ef6\u8bb0\u5f55\u4e86\u8be5\u9879\u76ee\u6587\u6863\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u81ea\u5b9a\u4e49\u914d\u7f6e\u53ef\u4ee5\u53c2\u8003 mkdocs-material mkdocstrings-python","title":"DEV"},{"location":"developer/dev-pro/#_1","text":"\u6574\u4e2a\u9879\u76ee\u7684\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\u3002 SE2022-Code/ \u251c\u2500\u2500 Docs \u2502 \u251c\u2500\u2500 about \u2502 \u251c\u2500\u2500 developer \u2502 \u251c\u2500\u2500 images \u2502 \u2514\u2500\u2500 user-guide \u2514\u2500\u2500 Src \u2514\u2500\u2500 Flask \u251c\u2500\u2500 static \u251c\u2500\u2500 stopwords \u2514\u2500\u2500 templates","title":"\u9879\u76ee\u7ed3\u6784"},{"location":"developer/dev-pro/#1","text":"Docs/ \u76ee\u5f55\u4e0b\u5b58\u653e\u6240\u6709\u9879\u76ee\u6587\u6863\u7684 .md \u6587\u4ef6\u4ee5\u53ca\u5176\u4ed6\u4e00\u4e9b\u8d44\u6e90\u3002","title":"1. \u6587\u6863\u90e8\u5206"},{"location":"developer/dev-pro/#2","text":"Src/ \u76ee\u5f55\u4e0b\u5b58\u653e\u6240\u6709\u9879\u76ee\u4ee3\u7801\u8d44\u6e90\u3002\u5176\u4e2d\u6700\u91cd\u8981\u7684\u662f Flask/ \u76ee\u5f55\u3002 Src/ \u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\u3002 Src/ \u251c\u2500\u2500 data.db \u251c\u2500\u2500 Flask \u2502 \u251c\u2500\u2500 app.py \u2502 \u251c\u2500\u2500 collection_statistic.py \u2502 \u251c\u2500\u2500 commands.py \u2502 \u251c\u2500\u2500 db_manipulation.py \u2502 \u251c\u2500\u2500 EaD.py \u2502 \u251c\u2500\u2500 errors.py \u2502 \u251c\u2500\u2500 init.py \u2502 \u251c\u2500\u2500 models.py \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u251c\u2500\u2500 alert.css \u2502 \u2502 \u251c\u2500\u2500 css \u2502 \u2502 \u2502 \u251c\u2500\u2500 all.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 collect_details.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 create_link.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 file_collecting.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 file_preview.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 file_submitting.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 index.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 login.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 mycollection_1.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 mycollection.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 personal_homepage.css \u2502 \u2502 \u2502 \u2514\u2500\u2500 register.css \u2502 \u2502 \u251c\u2500\u2500 favicon.ico \u2502 \u2502 \u251c\u2500\u2500 iconfont \u2502 \u2502 \u2502 \u251c\u2500\u2500 demo.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 demo_index.html \u2502 \u2502 \u2502 \u251c\u2500\u2500 iconfont.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 iconfont.js \u2502 \u2502 \u2502 \u251c\u2500\u2500 iconfont.json \u2502 \u2502 \u2502 \u251c\u2500\u2500 iconfont.ttf \u2502 \u2502 \u2502 \u251c\u2500\u2500 iconfont.woff \u2502 \u2502 \u2502 \u2514\u2500\u2500 iconfont.woff2 \u2502 \u2502 \u251c\u2500\u2500 images \u2502 \u2502 \u2502 \u251c\u2500\u2500 1 .svg \u2502 \u2502 \u2502 \u251c\u2500\u2500 collectioncard_1.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 collectioncard_2.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 collectioncard_m.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 collectioncard.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 collectiondetailcard_1.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 collectiondetailcard.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 Dodoco.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 favicon-16.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 favicon-32.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 keli.gif \u2502 \u2502 \u2502 \u251c\u2500\u2500 left-bottom.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 left-top.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 mycollectioncard_1.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 mycollectioncard.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 portrait.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 right-bottom.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 right-top.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 round1.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 round2.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 test.png \u2502 \u2502 \u2502 \u2514\u2500\u2500 touxiang.png \u2502 \u2502 \u251c\u2500\u2500 js \u2502 \u2502 \u2502 \u251c\u2500\u2500 collect_detail_chart.js \u2502 \u2502 \u2502 \u251c\u2500\u2500 collect_details.js \u2502 \u2502 \u2502 \u251c\u2500\u2500 file_collecting.js \u2502 \u2502 \u2502 \u251c\u2500\u2500 file_editing.js \u2502 \u2502 \u2502 \u251c\u2500\u2500 file_preview.js \u2502 \u2502 \u2502 \u251c\u2500\u2500 file_submitting.js \u2502 \u2502 \u2502 \u251c\u2500\u2500 mycollection.js \u2502 \u2502 \u2502 \u2514\u2500\u2500 personal_homepage.js \u2502 \u2502 \u2514\u2500\u2500 js_not_compressed \u2502 \u2502 \u251c\u2500\u2500 collect_detail_chart.js \u2502 \u2502 \u251c\u2500\u2500 file_collecting.js \u2502 \u2502 \u251c\u2500\u2500 file_editing.js \u2502 \u2502 \u251c\u2500\u2500 file_preview.js \u2502 \u2502 \u251c\u2500\u2500 file_submitting.js \u2502 \u2502 \u251c\u2500\u2500 mycollection.js \u2502 \u2502 \u2514\u2500\u2500 personal_homepage.js \u2502 \u251c\u2500\u2500 templates \u2502 \u2502 \u251c\u2500\u2500 404 .html \u2502 \u2502 \u251c\u2500\u2500 collection_details.html \u2502 \u2502 \u251c\u2500\u2500 create_link.html \u2502 \u2502 \u251c\u2500\u2500 file_collecting.html \u2502 \u2502 \u251c\u2500\u2500 file_editing.html \u2502 \u2502 \u251c\u2500\u2500 file_preview.html \u2502 \u2502 \u251c\u2500\u2500 file_submitting.html \u2502 \u2502 \u251c\u2500\u2500 index.html \u2502 \u2502 \u251c\u2500\u2500 login.html \u2502 \u2502 \u251c\u2500\u2500 mycollection.html \u2502 \u2502 \u251c\u2500\u2500 personal_homepage.html \u2502 \u2502 \u251c\u2500\u2500 register.html \u2502 \u2502 \u2514\u2500\u2500 submit_successfully.html \u2502 \u251c\u2500\u2500 test.py \u2502 \u2514\u2500\u2500 views.py \u2514\u2500\u2500 wsgi.py","title":"2. \u4ee3\u7801\u90e8\u5206"},{"location":"developer/dev-pro/#21-static","text":"static/ \u76ee\u5f55\u4e0b\u5b58\u653e\u7f51\u9875\u76f8\u5173\u7684\u6587\u4ef6\uff0c\u5305\u62ec css/ \u3001 iconfont/ \u3001 images/ \u3001 js/ \u6587\u4ef6\u5939\u3002 static/ \u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\u3002 static/ \u251c\u2500\u2500 css \u251c\u2500\u2500 iconfont \u251c\u2500\u2500 images \u2514\u2500\u2500 js","title":"2.1 static \u76ee\u5f55"},{"location":"developer/dev-pro/#22-templates","text":"templates/ \u76ee\u5f55\u4e0b\u5b58\u653e\u6240\u6709 html \u7f51\u9875\u6587\u4ef6\u3002 templates/ \u251c\u2500\u2500 404 .html \u251c\u2500\u2500 collection_details.html \u251c\u2500\u2500 create_link.html \u251c\u2500\u2500 file_collecting.html \u251c\u2500\u2500 file_editing.html \u251c\u2500\u2500 file_preview.html \u251c\u2500\u2500 file_submitting.html \u251c\u2500\u2500 index.html \u251c\u2500\u2500 login.html \u251c\u2500\u2500 mycollection.html \u251c\u2500\u2500 personal_homepage.html \u251c\u2500\u2500 register.html \u2514\u2500\u2500 submit_successfully.html","title":"2.2 templates \u76ee\u5f55"},{"location":"developer/dev-pro/#23-python","text":"Flask/ \u76ee\u5f55\u4e0b\uff0c\u91cd\u8981\u7684\u6709\u8fd9\u4e9b Python \u6587\u4ef6\uff1a init.py : \u521d\u59cb\u5316 Flask \u7a0b\u5e8f views.py : \u89c6\u56fe\u51fd\u6570 models.py : \u6570\u636e\u5e93\u7c7b\u5b9a\u4e49 errors.py : \u9519\u8bef\u5904\u7406 db_manipulation.py : \u6570\u636e\u5e93 API \u5b9a\u4e49 collection_statistic.py : \u7edf\u8ba1\u51fd\u6570","title":"2.3 Python \u6587\u4ef6"},{"location":"developer/dev-pro/#3","text":"\u9664\u53bb\u4e0a\u9762\u5df2\u7ecf\u4ecb\u7ecd\u8fc7\u7684\u90e8\u5206\uff0c Src/ \u76ee\u5f55\u4e0b\u8fd8\u6709\u51e0\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u8fd9\u91cc\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b requirements.txt \u548c mkdocs.yml \u3002","title":"3. \u914d\u7f6e\u6587\u4ef6"},{"location":"developer/dev-pro/#31-requirementstxt","text":"requirements.txt \u6587\u4ef6\u8bb0\u5f55\u4e86\u9879\u76ee\u6240\u4f9d\u8d56\u7684\u5168\u90e8 Python \u5305\u4ee5\u53ca\u7248\u672c\u8981\u6c42\uff0c\u914d\u7f6e\u73af\u5883\u65f6\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5feb\u901f\u68c0\u67e5\u548c\u8865\u5145\u6240\u9700\u8981\u7684\u5305\u3002 pip install -r requirements.txt","title":"3.1 requirements.txt"},{"location":"developer/dev-pro/#32-mkdocsyml","text":"mkdocs.yml \u6587\u4ef6\u8bb0\u5f55\u4e86\u8be5\u9879\u76ee\u6587\u6863\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u81ea\u5b9a\u4e49\u914d\u7f6e\u53ef\u4ee5\u53c2\u8003 mkdocs-material mkdocstrings-python","title":"3.2 mkdocs.yml"},{"location":"developer/flask/","text":"Flask \u54cd\u5e94\u8bbe\u8ba1 # 1. \u7528\u6237\u76f8\u5173\u6a21\u5757 # 1.1 \u8d26\u53f7\u5904\u7406 # \u767b\u5f55\u72b6\u6001\u76f8\u5173\u51fd\u6570\u6709 register \u3001 login \u3001 logout \uff0c\u5206\u522b\u7528\u4e8e \u7528\u6237\u6ce8\u518c \u3001 \u7528\u6237\u767b\u5f55 \u3001 \u7528\u6237\u767b\u51fa \u3002 1.1.1 \u7528\u6237\u6ce8\u518c # \u7528\u6237\u6ce8\u518c\u901a\u8fc7 register \u5b9e\u73b0\uff0c\u652f\u6301\u7528\u6237\u521b\u5efa\u8d26\u53f7\u3002 \u5173\u4e8e\u521b\u5efa\u8d26\u53f7 \u521b\u5efa\u8d26\u53f7\u5b58\u5728\u4e00\u5b9a\u7684\u9650\u5236\uff0c\u7528\u6237\u540d\u5fc5\u987b\u552f\u4e00\u4e14\u672a\u6ce8\u518c\u8fc7\uff0c\u5bc6\u7801\u9700\u8981\u7b26\u5408\u8981\u6c42\u3002 \u8d26\u53f7\u521b\u5efa\u6210\u529f\u540e\uff0c\u4f1a\u4e3a\u8be5\u8d26\u53f7\u5206\u914d\u4e00\u4e2a\u552f\u4e00\u7684\u6587\u4ef6\u76ee\u5f55\uff0c\u4f4d\u4e8e APP_FILE \u4e0b\u3002 \u6ce8\u518c\u9875\u9762 Returns: Type Description Response \u82e5\u4e3a POST \u8bf7\u6c42\uff0c\u6ce8\u518c\u6210\u529f\u91cd\u5b9a\u5411\u56de login \u9875\u9762\uff0c\u6ce8\u518c\u5931\u8d25\u91cd\u5b9a\u5411\u56de register \u9875\u9762\u3002 str \u82e5\u4e3a GET \u8bf7\u6c42\uff0c\u8f6c\u5230 register \u9875\u9762\u3002 Source code in Flask\\views.py 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 @app . route ( '/register' , methods = [ 'GET' , 'POST' ]) def register (): \"\"\"\u6ce8\u518c\u9875\u9762 Returns: (Response): \u82e5\u4e3a POST \u8bf7\u6c42\uff0c\u6ce8\u518c\u6210\u529f\u91cd\u5b9a\u5411\u56de login \u9875\u9762\uff0c\u6ce8\u518c\u5931\u8d25\u91cd\u5b9a\u5411\u56de register \u9875\u9762\u3002 (str): \u82e5\u4e3a GET \u8bf7\u6c42\uff0c\u8f6c\u5230 register \u9875\u9762\u3002 \"\"\" if request . method == 'POST' : username = request . form [ 'username' ] psw = request . form [ 'psw' ] email = request . form [ 'email' ] psw_confirm = request . form [ 'psw_confirm' ] # \u68c0\u67e5\u8f93\u5165\u662f\u5426\u4e3a\u7a7a if not username or not psw or not psw_confirm : flash ( 'Invalid input!' ) return redirect ( url_for ( 'register' )) # \u68c0\u67e52\u6b21\u8f93\u5165\u7684\u5bc6\u7801\u662f\u5426\u4e00\u81f4 if psw != psw_confirm : flash ( 'The passwords entered do not match!' ) return redirect ( url_for ( 'register' )) # \u68c0\u67e5\u6ce8\u518c\u7684\u7528\u6237\u540d\u662f\u5426\u5df2\u7ecf\u5b58\u5728 num = User . query . filter_by ( username = username ) . count () if num : flash ( 'The username already exists!' ) return redirect ( url_for ( 'register' )) # \u6ce8\u518c\u6210\u529f\uff0c\u5c06\u7528\u6237\u4fe1\u606f\u5b58\u5165\u6570\u636e\u5e93 user = User ( username = username , name = username ) # \u521d\u59cb\u5316\u65f6\uff0c\u7528\u6237\u6635\u79f0\u548c\u7528\u6237\u540d\u76f8\u540c user . set_password ( psw ) user . set_userpath () # * \u8bbe\u7f6e\u7528\u6237\u7a7a\u95f4\u8def\u5f84 user . set_email ( email ) # * \u8bbe\u7f6e\u7528\u6237\u90ae\u7bb1 db . session . add ( user ) db . session . commit () # \u63d0\u4ea4\u6570\u636e\u5e93\u4f1a\u8bdd flash ( 'Successfully Registered!' ) path = os . path . join ( APP_FILE , user . userpath ) print ( path ) # ! \u5f02\u5e38\u5904\u7406 try : os . makedirs ( path ) # \u521b\u5efa\u7528\u6237\u76ee\u5f55 except OSError : if not os . path . isdir ( path ): print ( \"\u7528\u6237\u76ee\u5f55\u521b\u5efa\u5931\u8d25\uff01\" ) return redirect ( url_for ( 'login' )) return render_template ( 'register.html' ) 1.1.2 \u7528\u6237\u767b\u5f55 # \u7528\u6237\u767b\u5f55\u901a\u8fc7 login \u5b9e\u73b0\uff0c\u652f\u6301\u7528\u6237\u901a\u8fc7\u5df2\u6ce8\u518c\u7684\u8d26\u53f7\u767b\u5f55\u3002 \u767b\u5f55\u9875\u9762 Returns: Type Description Response \u82e5\u4e3a POST \u8bf7\u6c42\uff0c\u767b\u5f55\u6210\u529f\u91cd\u5b9a\u5411\u56de index \u4e3b\u9875\uff0c\u767b\u5f55\u5931\u8d25\u91cd\u5b9a\u5411\u56de login \u9875\u9762\u3002 str \u82e5\u4e3a GET \u8bf7\u6c42\uff0c\u8f6c\u5230 login \u9875\u9762\u3002 Source code in Flask\\views.py 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 @app . route ( '/login' , methods = [ 'GET' , 'POST' ]) def login (): \"\"\"\u767b\u5f55\u9875\u9762 Returns: (Response): \u82e5\u4e3a POST \u8bf7\u6c42\uff0c\u767b\u5f55\u6210\u529f\u91cd\u5b9a\u5411\u56de index \u4e3b\u9875\uff0c\u767b\u5f55\u5931\u8d25\u91cd\u5b9a\u5411\u56de login \u9875\u9762\u3002 (str): \u82e5\u4e3a GET \u8bf7\u6c42\uff0c\u8f6c\u5230 login \u9875\u9762\u3002 \"\"\" if request . method == 'POST' : username = request . form [ 'username' ] password = request . form [ 'password' ] # \u68c0\u67e5\u8f93\u5165\u662f\u5426\u4e3a\u7a7a if not username or not password : flash ( 'Invalid input.' ) return redirect ( url_for ( 'login' )) user = User . query . filter_by ( username = username ) . first () # \u5728\u6570\u636e\u5e93\u4e2d\u67e5\u8be2\u7528\u6237 # \u9a8c\u8bc1\u7528\u6237\u540d if user is None : flash ( 'The username doesn \\' t exist!' ) # \u5982\u679c\u7528\u6237\u540d\u4e0d\u5b58\u5728\uff0c\u663e\u793a\u9519\u8bef\u6d88\u606f return redirect ( url_for ( 'login' )) # \u91cd\u5b9a\u5411\u56de\u767b\u5f55\u9875\u9762 # \u5bc6\u7801\u9519\u8bef if not user . validate_password ( password ): flash ( 'Password Error\uff01' ) # \u5982\u679c\u9a8c\u8bc1\u5931\u8d25\uff0c\u663e\u793a\u9519\u8bef\u6d88\u606f return redirect ( url_for ( 'login' )) # \u91cd\u5b9a\u5411\u56de\u767b\u5f55\u9875\u9762 login_user ( user ) # \u767b\u5165\u7528\u6237 return redirect ( url_for ( 'index' )) # \u91cd\u5b9a\u5411\u5230\u6587\u4ef6\u6536\u96c6\u754c\u9762 return render_template ( 'login.html' ) 1.1.3 \u7528\u6237\u767b\u51fa # \u7528\u6237\u767b\u51fa\u901a\u8fc7 logout \u5b9e\u73b0\uff0c\u652f\u6301\u767b\u5f55\u6001\u7684\u7528\u6237\u9000\u51fa\u767b\u5f55\u3002 \u9000\u51fa\u767b\u5f55 Returns: Type Description Response \u8f6c\u5230 index.html \u4e3b\u9875\u3002 Source code in Flask\\views.py 502 503 504 505 506 507 508 509 510 511 @app . route ( '/logout' , methods = [ 'GET' , 'POST' ]) def logout () -> Response : \"\"\"\u9000\u51fa\u767b\u5f55 Returns: \u8f6c\u5230 index.html \u4e3b\u9875\u3002 \"\"\" logout_user () # \u767b\u51fa\u7528\u6237 flash ( 'Goodbye!' ) return redirect ( url_for ( 'index' )) # \u91cd\u5b9a\u5411\u56de\u9996\u9875 1.2 \u4e2a\u4eba\u4fe1\u606f # \u4e2a\u4eba\u4fe1\u606f\u76f8\u5173\u5904\u7406\u901a\u8fc7 personal_homepage \u5b9e\u73b0\uff0c\u652f\u6301\u7528\u6237\u4fee\u6539\u4e2a\u4eba\u4fe1\u606f\u3001\u4fee\u6539\u5bc6\u7801\u3002 \u5173\u4e8e\u4fee\u6539\u5bc6\u7801 \u4fee\u6539\u5bc6\u7801\u6210\u529f\u6216\u5931\u8d25\uff0c\u7cfb\u7edf\u4f1a\u7ed9\u51fa\u76f8\u5e94\u7684\u63d0\u793a\u3002 \u4e2a\u4eba\u4e3b\u9875 Returns: Type Description Response | str \u91cd\u5b9a\u5411\u6216\u8f6c\u5230 personal_homepage, \u643a\u5e26\u53c2\u6570 r_code\u3002 Source code in Flask\\views.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 @app . route ( '/personal_homepage' , methods = [ 'GET' , 'POST' ]) @login_required def personal_homepage (): \"\"\"\u4e2a\u4eba\u4e3b\u9875 Returns: (Response | str): \u91cd\u5b9a\u5411\u6216\u8f6c\u5230 personal_homepage, \u643a\u5e26\u53c2\u6570 r_code\u3002 \"\"\" if request . method == 'POST' : tmp_data = request . form . to_dict () ''' \u5982\u679c\u662f\u4fee\u6539\u4e2a\u4eba\u4fe1\u606f {'username': '\u5f20\u96bd\u7fca', 'phone': '\u672a\u8bbe\u7f6e', 'email': '729695343@qq.com', 'authorization-code': '\u672a\u8bbe\u7f6e'} \u5982\u679c\u662f\u4fee\u6539\u5bc6\u7801 {'psw_confirm': '123456', 'submit': ''} ''' value_type_check ( tmp_data ) if 'username' in tmp_data . keys (): # * \u4fee\u6539\u4e2a\u4eba\u4fe1\u606f r_code = modify_personal_info ( current_user . id , tmp_data [ 'username' ], tmp_data [ 'email' ], tmp_data [ 'authorization-code' ] ) if r_code == 1 : print ( \"\u4fee\u6539\u4e2a\u4eba\u4fe1\u606f\u6210\u529f\u3002\" ) else : print ( \"\u4fee\u6539\u4e2a\u4eba\u4fe1\u606f\u5931\u8d25\uff01\u8be5\u7528\u6237\u4e0d\u5b58\u5728\u3002\" ) else : # * \u4fee\u6539\u5bc6\u7801 r_code = modify_password ( current_user . id , tmp_data [ 'psw_initial' ], tmp_data [ 'psw_confirm' ] ) # TODO \u5f85\u4fee\u6539 if r_code == 1 : print ( \"\u4fee\u6539\u5bc6\u7801\u6210\u529f\u3002\" ) else : print ( \"\u4fee\u6539\u5bc6\u7801\u5931\u8d25\uff01\" ) return redirect ( url_for ( 'personal_homepage' , r_code = r_code )) user_authorization_code = current_user . authorization_code if user_authorization_code is None : user_authorization_code = \"\u672a\u8bbe\u7f6e\" return render_template ( \"personal_homepage.html\" , user_authorization_code = user_authorization_code , user_pwd_hash = current_user . password_hash , # TODO \u5f85\u4fee\u6539 r_code = 2 ) 2. \u6536\u96c6\u76f8\u5173\u6a21\u5757 # \u4e0e\u6536\u96c6\u529f\u80fd\u76f8\u5173\u7684\u51fd\u6570\u6709 generate_collection \u3001 file_editing \u3001 copy_collection \u3001 collection_details \uff0c\u5206\u522b\u7528\u4e8e \u521b\u5efa\u6536\u96c6 \u3001 \u7f16\u8f91/\u91cd\u542f\u6536\u96c6 \u3001 \u590d\u5236\u6536\u96c6 \u3001 \u67e5\u770b\u6536\u96c6\u8be6\u60c5 \u3002 2.1 \u521b\u5efa\u6536\u96c6 # \u521b\u5efa\u6536\u96c6\u901a\u8fc7 generate_collection \u5b9e\u73b0\uff0c\u652f\u6301\u767b\u5f55\u7528\u6237\u521b\u5efa\u6536\u96c6\u3002 \u751f\u6210\u4e00\u4e2a\u6536\u96c6\u5bf9\u8c61 Returns: Type Description Response | str \u82e5\u4e3a POST \u8bf7\u6c42\uff0c\u521b\u5efa\u6210\u529f\uff0c\u91cd\u5b9a\u5411\u5230 create_link \u9875\u9762\uff1b\u521b\u5efa\u5931\u8d25\uff0c\u8f6c\u5230 index \u9875\u9762\u3002 Response \u82e5\u4e3a GET \u8bf7\u6c42\uff0c\u8f6c\u5230 file_collecting \u9875\u9762\u3002 Source code in Flask\\views.py 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 @app . route ( '/file_collecting' , methods = [ 'GET' , 'POST' ]) @login_required def generate_collection (): \"\"\"\u751f\u6210\u4e00\u4e2a\u6536\u96c6\u5bf9\u8c61 Returns: (Response | str): \u82e5\u4e3a POST \u8bf7\u6c42\uff0c\u521b\u5efa\u6210\u529f\uff0c\u91cd\u5b9a\u5411\u5230 create_link \u9875\u9762\uff1b\u521b\u5efa\u5931\u8d25\uff0c\u8f6c\u5230 index \u9875\u9762\u3002 (Response): \u82e5\u4e3a GET \u8bf7\u6c42\uff0c\u8f6c\u5230 file_collecting \u9875\u9762\u3002 \"\"\" if request . method == 'POST' : # \u70b9\u51fb\u4e86\u63d0\u4ea4\u6309\u94ae question_list = request . form # \u83b7\u53d6\u9898\u76ee\u4fe1\u606f\u5217\u8868 if not question_list : flash ( \"Transport Error!\" ) # \u83b7\u53d6\u5931\u8d25 return render_template ( 'index.html' ) else : a = list ( question_list . items ( multi = True )) print ( '\u521b\u5efa\u6536\u96c6\uff1a' , a ) # ! \u8c03\u8bd5\u7528 collection_id = add_FC ( a , current_user . id ) # question = get_question_MultiDict(t) # print(question) flash ( \"Successfully create a collection!\" ) # share_link = \"127.0.0.1:5000/file_submitting/submit\" + id_int_to_str(collection_id) share_link = \"127.0.0.1:5000/file_submitting/submit\" + encryption ( str ( collection_id )) # return redirect(url_for('create_link', share_id=id_int_to_str(collection_id))) return redirect ( url_for ( 'create_link' , share_id = encryption ( str ( collection_id )))) return render_template ( 'file_collecting.html' ) 2.2 \u7f16\u8f91/\u91cd\u542f\u6536\u96c6 # \u7f16\u8f91\u6216\u91cd\u542f\u6536\u96c6\u901a\u8fc7 file_editing \u5b9e\u73b0\uff0c\u652f\u6301\u767b\u5f55\u7528\u6237\u7f16\u8f91\u8fdb\u884c\u4e2d\u7684\u6536\u96c6\u6216\u8005\u91cd\u542f\u5df2\u622a\u6b62\u7684\u6536\u96c6\u3002 \u6536\u96c6\u7f16\u8f91\u754c\u9762 Parameters: Name Type Description Default collection_id str \u6536\u96c6 id required Returns: Type Description Response | str \u82e5\u4e3a POST \u8bf7\u6c42\uff0c\u7f16\u8f91\u6210\u529f\u91cd\u5b9a\u5411\u56de index \u4e3b\u9875\uff0c\u7f16\u8f91\u5931\u8d25\u8f6c index \u4e3b\u9875\u3002 str \u82e5\u4e3a GET \u8bf7\u6c42\uff0c\u67e5\u8be2\u5230\u6536\u96c6\u8f6c file_editing \u9875\u9762\uff0c\u672a\u67e5\u8be2\u5230\u8f6c 404 \u9875\u9762\u3002 Source code in Flask\\views.py 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 @app . route ( '/file_editing/<string:collection_id>' , methods = [ 'GET' , 'POST' ]) @login_required def file_editing ( collection_id ): \"\"\"\u6536\u96c6\u7f16\u8f91\u754c\u9762 Args: collection_id (str): \u6536\u96c6 id Returns: (Response | str): \u82e5\u4e3a POST \u8bf7\u6c42\uff0c\u7f16\u8f91\u6210\u529f\u91cd\u5b9a\u5411\u56de index \u4e3b\u9875\uff0c\u7f16\u8f91\u5931\u8d25\u8f6c index \u4e3b\u9875\u3002 (str): \u82e5\u4e3a GET \u8bf7\u6c42\uff0c\u67e5\u8be2\u5230\u6536\u96c6\u8f6c file_editing \u9875\u9762\uff0c\u672a\u67e5\u8be2\u5230\u8f6c 404 \u9875\u9762\u3002 \"\"\" if is_accessible ( current_user . id , int ( decryption ( collection_id ))) == False : return redirect ( url_for ( 'no_access' )) if request . method == 'POST' : question_list = request . form if not question_list : flash ( \"\u63d0\u4ea4\u7f16\u8f91\u5931\u8d25\uff01\" ) print ( \"\u63d0\u4ea4\u7f16\u8f91\u5931\u8d25\uff01\" ) return render_template ( 'index.html' ) else : a = list ( question_list . items ( multi = True )) print ( \"\u7f16\u8f91\u540e\u7684\u5185\u5bb9\uff1a\" , a ) # ! \u8c03\u8bd5\u7528 # modify_collection(id_str_to_int(collection_id), a) modify_collection ( int ( decryption ( collection_id )), a ) print ( \"\u63d0\u4ea4\u7f16\u8f91\u6210\u529f\uff01\" ) return redirect ( url_for ( 'mycollection' )) # \u7f16\u8f91\u5b8c\u6210\uff0c\u8fd4\u56de\u4e3b\u9875 # collection_id = id_str_to_int(collection_id) collection_id = int ( decryption ( collection_id )) question_dict = get_question_dict ( collection_id ) print ( question_dict ) if question_dict is None : return render_template ( \"404.html\" ) return render_template ( 'file_editing.html' , collection = question_dict ) 2.3 \u590d\u5236\u6536\u96c6 # \u590d\u5236\u6536\u96c6\u901a\u8fc7 copy_collection \u5b9e\u73b0\uff0c\u652f\u6301\u767b\u5f55\u7528\u6237\u5728\u539f\u6709\u6536\u96c6\u57fa\u7840\u4e0a\u8bbe\u7f6e\u65b0\u7684\u6536\u96c6\u3002 \u590d\u5236\u6536\u96c6 Parameters: Name Type Description Default collection_id str \u5f85\u590d\u5236\u7684\u6536\u96c6 id required Source code in Flask\\views.py 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 @app . route ( '/file_collecting/<string:collection_id>' , methods = [ 'GET' , 'POST' ]) @login_required def copy_collection ( collection_id : str ): \"\"\"\u590d\u5236\u6536\u96c6 Args: collection_id (str): \u5f85\u590d\u5236\u7684\u6536\u96c6 id \"\"\" if is_accessible ( current_user . id , int ( decryption ( collection_id ))) == False : return redirect ( url_for ( 'no_access' )) if request . method == 'POST' : question_list = request . form if not question_list : flash ( \"\u590d\u5236\u6536\u96c6\u5931\u8d25\uff01\" ) return render_template ( 'index.html' ) a = list ( question_list . items ( multi = True )) print ( a ) add_FC ( a , current_user . id ) flash ( \"\u590d\u5236\u6536\u96c6\u6210\u529f\uff01\" ) print ( \"\u590d\u5236\u6536\u96c6\u6210\u529f\uff01\" ) return redirect ( url_for ( 'index' )) # collection_id = id_str_to_int(collection_id) collection_id = int ( decryption ( collection_id )) question_dict = get_question_dict ( collection_id ) print ( question_dict ) if question_dict is None : return render_template ( \"404.html\" ) return render_template ( 'file_collecting.html' , collection = question_dict ) 2.4 \u67e5\u770b\u6536\u96c6\u8be6\u60c5 # \u67e5\u770b\u6536\u96c6\u8be6\u60c5\u901a\u8fc7 collection_details \u5b9e\u73b0\uff0c\u652f\u6301\u767b\u5f55\u7528\u6237\u67e5\u770b\u6536\u96c6\u7684\u5177\u4f53\u6536\u96c6\u60c5\u51b5\u3002 \u6536\u96c6\u8be6\u60c5\u9875\u9762 Parameters: Name Type Description Default collection_id str \u6536\u96c6 id required Returns: Type Description Response | str collection_details \u6536\u96c6\u8be6\u60c5\u9875\u9762\u3002 Source code in Flask\\views.py 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 @app . route ( '/collection_details/<string:collection_id>' , methods = [ 'GET' , 'POST' ]) @login_required def collection_details ( collection_id : str ): \"\"\"\u6536\u96c6\u8be6\u60c5\u9875\u9762 Args: collection_id (str): \u6536\u96c6 id Returns: (Response | str): collection_details \u6536\u96c6\u8be6\u60c5\u9875\u9762\u3002 \"\"\" if is_accessible ( current_user . id , int ( decryption ( collection_id ))) == False : return redirect ( url_for ( 'no_access' )) if request . method == 'POST' : namelist_data = request . form . to_dict () # * \u83b7\u53d6\u5e94\u4ea4\u540d\u5355\u6570\u636e print ( \"\u524d\u7aef\u6570\u636e: \" , namelist_data ) if 'hidden-input' in namelist_data . keys (): # namelist_path = './FileStorage/' + \\ # Collection_info.query.filter_by(creator_id=current_user.id).first().namelist_path # namelist_path = os.path.join( # APP_FILE, # Collection_info.query.get( # id_str_to_int(collection_id) # ).collection_path # ) namelist_path = os . path . join ( APP_FILE , Collection_info . query . get ( int ( decryption ( collection_id ))) . collection_path ) print ( \"\u5e94\u4ea4\u540d\u5355\u8def\u5f84\uff1a\" , namelist_path ) namelist = pd . read_csv ( namelist_path + \"/\u5e94\u4ea4\u540d\u5355.csv\" , encoding = 'utf-8' ) # * \u5220\u9664\u88ab\u70b9\u51fb\u7684\u540d\u5b57 delete_name = namelist_data [ 'hidden-input' ] namelist = namelist [ ~ namelist [ '\u59d3\u540d' ] . isin ([ delete_name ])] # namelist = namelist[~(namelist['\u59d3\u540d'].str == namelist_data['hidden-input'])] namelist . to_csv ( namelist_path + \"/\u5e94\u4ea4\u540d\u5355.csv\" , encoding = 'utf-8' , index = False ) # * \u4fdd\u5b58\u4e3a csv \u6587\u4ef6 return redirect ( url_for ( 'collection_details' , collection_id = collection_id )) name_list = list ( set ( namelist_data [ 'name_data' ] . split ())) namelist_csv = pd . DataFrame ( columns = [ \"\u59d3\u540d\" ], data = name_list ) # print(namelist_csv) # namelist_path = './FileStorage/' + Collection_info.query.filter_by( # creator_id=current_user.id).first().namelist_path # namelist_path = os.path.join( # APP_FILE, # Collection_info.query.get(id_str_to_int(collection_id)).collection_path # ) namelist_path = os . path . join ( APP_FILE , Collection_info . query . get ( int ( decryption ( collection_id ))) . collection_path ) print ( namelist_path ) if os . path . exists ( namelist_path + \"/\u5e94\u4ea4\u540d\u5355.csv\" ): tmp_csv = pd . read_csv ( namelist_path + '/\u5e94\u4ea4\u540d\u5355.csv' , encoding = 'utf-8' ) for name in name_list : if name in tmp_csv [ '\u59d3\u540d' ] . values : name_list . remove ( name ) pd . DataFrame ( data = name_list ) . to_csv ( namelist_path + \"/\u5e94\u4ea4\u540d\u5355.csv\" , mode = 'a' , header = False , encoding = 'utf-8' ) else : namelist_csv . to_csv ( namelist_path + \"/\u5e94\u4ea4\u540d\u5355.csv\" , encoding = 'utf-8' ) # * \u4fdd\u5b58\u4e3a csv \u6587\u4ef6 return redirect ( url_for ( 'collection_details' , collection_id = collection_id )) # collection_id = id_str_to_int(collection_id) # * \u8f6c\u6362\u4e3a\u5b9e\u9645\u7684\u6536\u96c6 id collection_id = int ( decryption ( collection_id )) # * \u8f6c\u6362\u4e3a\u5b9e\u9645\u7684\u6536\u96c6 id parameter_dict_list = [] # submission_list = submission_record( # collection_id=collection_id) # * \u83b7\u53d6\u5bf9\u5e94 id \u7684\u6536\u96c6\u4fe1\u606f submission_list = submission_record_v2 ( collection_id = collection_id ) # * \u83b7\u53d6\u5bf9\u5e94 id \u7684\u6536\u96c6\u4fe1\u606f print ( submission_list ) who_has_submitted_list = [ submission [ 1 ] for submission in submission_list ] # * \u5df2\u63d0\u4ea4\u5217\u8868 namelist_path = os . path . join ( APP_FILE , Collection_info . query . get ( collection_id ) . collection_path ) who_should_submit_list = [] if os . path . exists ( namelist_path + \"/\u5e94\u4ea4\u540d\u5355.csv\" ): who_should_submit_list = pd . read_csv ( namelist_path + \"/\u5e94\u4ea4\u540d\u5355.csv\" , encoding = 'utf-8' )[ '\u59d3\u540d' ] . tolist () print ( who_should_submit_list ) # * \u5df2\u63d0\u4ea4\u540d\u5355\u751f\u6210\u903b\u8f91\uff1a\u5728\u5e94\u4ea4\u540d\u5355\u4e2d\u4e14\u63d0\u4ea4\u4e86\u6587\u4ef6 submitted_list = list ( set ( who_has_submitted_list ) & set ( who_should_submit_list )) submitted_list . sort () print ( \"\u5df2\u63d0\u4ea4\u540d\u5355: \" , submitted_list ) # * \u672a\u63d0\u4ea4\u540d\u5355\u751f\u6210\u903b\u8f91\uff1a\u5728\u5e94\u4ea4\u540d\u5355\u4e2d\u4f46\u672a\u63d0\u4ea4\u6587\u4ef6 not_submitted_list = list ( set ( who_should_submit_list ) - set ( who_has_submitted_list )) not_submitted_list . sort () print ( \"\u672a\u63d0\u4ea4\u540d\u5355: \" , not_submitted_list ) # for idx, submission in enumerate(submission_list): for submission in submission_list : # * \u521b\u5efa\u4e00\u4e2a\u5b57\u5178\u7c7b\u578b\uff0c\u7528\u4e8e\u4f20\u53c2 idx = submission [ 0 ] # \u63d0\u4ea4 id submitter_name = submission [ 1 ] # \u63d0\u4ea4\u8005\u59d3\u540d submit_time = submission [ 2 ] # \u63d0\u4ea4\u65f6\u95f4 file_submitted_count = submission [ 3 ] # \u63d0\u4ea4\u6587\u4ef6\u6570\u91cf file_submitted_list = submission [ 4 ] # \u63d0\u4ea4\u6587\u4ef6\u5217\u8868 tmp_dict = { 'submitter_id' : idx , # ! \u5df2\u7ecf\u4fee\u6b63\u4e3a\u63d0\u4ea4 id 'submitter_name' : submitter_name , 'submit_time' : submit_time . strftime ( '%Y-%m- %d %H:%M:%S' ), 'file_submitted_count' : file_submitted_count , 'file_submitted_list' : file_submitted_list } parameter_dict_list . append ( tmp_dict ) return render_template ( 'collection_details.html' , json_object = parameter_dict_list , json_length = len ( parameter_dict_list ), submission_count = count_submission ( collection_id = collection_id ), filenum_count = count_filenum ( collection_id = collection_id ), ddl_countdown = Collection_info . query . get ( collection_id ) . end_date . strftime ( '%Y-%m- %d %H:%M:%S' ), submitted_list = submitted_list , not_submitted_list = not_submitted_list ) 3. \u7edf\u8ba1\u76f8\u5173\u6a21\u5757 # \u4e0e\u7edf\u8ba1\u529f\u80fd\u76f8\u5173\u7684\u51fd\u6570\u6709 mycollection \u3001 send_statistic_file \u3001 statistics \uff0c\u5206\u522b\u7528\u4e8e \u7528\u6237\u6536\u96c6\u6c47\u603b \u3001 \u6536\u96c6\u4fe1\u606f\u6c47\u603b \u3001 \u7edf\u8ba1\u56fe\u8868\u6c47\u603b \u3002 3.1 \u7528\u6237\u6536\u96c6\u6c47\u603b # \u6c47\u603b\u7528\u6237\u521b\u5efa\u7684\u6240\u6709\u6536\u96c6\u901a\u8fc7 mycollection \u5b9e\u73b0\uff0c\u652f\u6301\u767b\u5f55\u7528\u6237\u67e5\u770b\u6536\u96c6\u603b\u89c8\u3002 \u6536\u96c6\u603b\u89c8\u9875\u9762 Source code in Flask\\views.py 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 @app . route ( '/mycollection' , methods = [ 'GET' , 'POST' ]) @login_required def mycollection (): \"\"\" \u6536\u96c6\u603b\u89c8\u9875\u9762 \"\"\" # * \u5982\u679c\u68c0\u6d4b\u5230\u5bf9\u6536\u96c6\u7684\u64cd\u4f5c if request . method == 'POST' : user_action = request . form [ 'hidden-input' ] # \u83b7\u53d6\u7528\u6237\u64cd\u4f5c\u7684\u76f8\u5173\u4fe1\u606f user_action_list = user_action . split ( '$' ) collection_id = user_action_list [ 1 ] # \u5f85\u64cd\u4f5c\u7684\u6536\u96c6 id # * \u6839\u636e\u7b2c\u4e00\u4e2a\u53c2\u6570\u786e\u5b9a\u64cd\u4f5c\u7c7b\u578b if user_action_list [ 0 ] == 'share' : # ? \u5206\u4eab\uff0c\u5df2\u5b8c\u6210 submitting_page = 'file_submitting' + '/submit' + collection_id print ( submitting_page ) # ! \u8c03\u8bd5 print ( \"\u5206\u4eab\" ) elif user_action_list [ 0 ] == 'collect-details' : # \u7edf\u8ba1 print ( \"\u7edf\u8ba1\" ) elif user_action_list [ 0 ] == 'edit' : # \u7f16\u8f91 print ( \"\u7f16\u8f91\" ) elif user_action_list [ 0 ] == 'restart' : # \u91cd\u542f print ( \"\u91cd\u542f\" ) elif user_action_list [ 0 ] == 'copy' : # \u590d\u5236 print ( \"\u590d\u5236\" ) elif user_action_list [ 0 ] == 'stop' : # ? \u505c\u6b62\uff0c\u5df2\u5b8c\u6210 # stop_collection(id_str_to_int(collection_id), user_action_list) stop_collection ( int ( decryption ( collection_id )), user_action_list ) print ( \"\u505c\u6b62\" ) elif user_action_list [ 0 ] == 'del' : # ? \u5220\u9664\uff0c\u5df2\u5b8c\u6210 # delete_collection(id_str_to_int(collection_id)) delete_collection ( int ( decryption ( collection_id ))) print ( \"\u5220\u9664\" ) # return redirect(url_for('mycollection')) # else: update_status ( current_user . id ) # \u66f4\u65b0\u5f53\u524d\u7528\u6237\u6240\u6709\u6536\u96c6\u7684 status \u5b57\u6bb5 collection_list = Collection_info . query . filter_by ( creator_id = current_user . id ) . all () parameter_dict_list = [] for collection in collection_list : # * \u521b\u5efa\u4e00\u4e2a\u5b57\u5178\u7c7b\u578b\uff0c\u7528\u4e8e\u4f20\u53c2\uff0c\u53ef\u5220\u9664 tmp_dict = { 'username' : current_user . username , 'collection_title' : collection . collection_title , 'collection_status' : \"\u8fdb\u884c\u4e2d\" if collection . status == '0' else \"\u5df2\u622a\u6b62\" , 'collection_id' : collection . id , # ! \u591a\u4f20\u4e00\u4e2a\u6536\u96c6 id 'submit_count' : count_submission ( collection_id = collection . id ), 'deadline' : collection . end_date . strftime ( '%Y-%m- %d %H:%M:%S' ) } parameter_dict_list . append ( tmp_dict ) return render_template ( 'mycollection.html' , username = current_user . name , user_email = current_user . email , json_object = json . dumps ( parameter_dict_list ), json_length = len ( parameter_dict_list ) ) 3.2 \u6536\u96c6\u4fe1\u606f\u6c47\u603b # \u7edf\u8ba1\u63d0\u4ea4\u8005\u63d0\u4ea4\u60c5\u51b5\u5e76\u751f\u6210 Excel \u8868\u683c\u901a\u8fc7 send_statistic_file \u5b9e\u73b0\uff0c\u751f\u6210\u7684\u6536\u96c6\u8be6\u60c5\u8868\u683c\u4fdd\u5b58\u5728\u5bf9\u5e94\u7684\u6536\u96c6\u76ee\u5f55\u4e0b\u3002 \u6c47\u603b\u6240\u6709\u63d0\u4ea4\u8005\u4e0a\u4f20\u7684\u6587\u4ef6\u5e76\u538b\u7f29\u4e3a zip \u6587\u4ef6\u4e5f\u901a\u8fc7 send_statistic_file \u5b9e\u73b0\uff0c\u751f\u6210\u7684 zip \u6587\u4ef6\u4fdd\u5b58\u5728\u7528\u6237\u76ee\u5f55\u4e0b\u3002 \u8fd4\u56de\u8bf7\u6c42\u7684\u6587\u4ef6\uff0c\u7528\u4e8e\u67e5\u770b\u6c47\u603b\u548c\u4e0b\u8f7d\u6587\u4ef6 Returns: Type Description Response \u8bf7\u6c42\u7684\u6587\u4ef6\u3002\u8bf7\u6c42\u53c2\u6570\u4e3a zip\uff0c\u8fd4\u56de\u538b\u7f29\u5305\uff1b\u8bf7\u6c42\u53c2\u6570\u4e3a excel\uff0c\u8fd4\u56de\u63d0\u4ea4\u60c5\u51b5\u3002 Source code in Flask\\views.py 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 @app . route ( '/download' ) @login_required def send_statistic_file () -> Response : \"\"\"\u8fd4\u56de\u8bf7\u6c42\u7684\u6587\u4ef6\uff0c\u7528\u4e8e\u67e5\u770b\u6c47\u603b\u548c\u4e0b\u8f7d\u6587\u4ef6 Returns: (Response): \u8bf7\u6c42\u7684\u6587\u4ef6\u3002\u8bf7\u6c42\u53c2\u6570\u4e3a zip\uff0c\u8fd4\u56de\u538b\u7f29\u5305\uff1b\u8bf7\u6c42\u53c2\u6570\u4e3a excel\uff0c\u8fd4\u56de\u63d0\u4ea4\u60c5\u51b5\u3002 \"\"\" tmp_data = request . args . to_dict () print ( tmp_data ) # collection_id = id_str_to_int(tmp_data['collectionId']) collection_id = int ( decryption ( tmp_data [ 'collectionId' ])) file_type = tmp_data [ 'fileType' ] if file_type == 'zip' : # * \u7528\u6237\u8bf7\u6c42\u6240\u6709\u6536\u96c6\u6587\u4ef6 print ( \"collection_id: \" , collection_id ) tmp_path = Collection_info . query . get ( collection_id ) . collection_path # * zip \u538b\u7f29\u6587\u4ef6\u4ee5\u6536\u96c6\u6807\u9898\u547d\u540d zip_file_name = Collection_info . query . get ( collection_id ) . collection_title + '.zip' # print(\"\u6536\u96c6\u6807\u9898: \", zip_file_name) source_dir = os . path . join ( APP_FILE , tmp_path ) destination_dir = os . path . join ( APP_FILE , current_user . userpath ) print ( \"\u6e90\u8def\u5f84: \" , source_dir ) print ( \"\u76ee\u6807\u8def\u5f84: \" , destination_dir ) # ! \u8fd4\u56de\u538b\u7f29\u5305 # * \u751f\u6210\u538b\u7f29\u6587\u4ef6 generate_zip ( source_dir , os . path . join ( destination_dir , zip_file_name )) response = make_response ( destination_dir , zip_file_name ) return response else : # * \u7528\u6237\u8bf7\u6c42\u6c47\u603b\u8868\u683c namelist_path = os . path . join ( APP_FILE , Collection_info . query . get ( collection_id ) . collection_path ) # * Excel \u4ee5\u6536\u96c6\u6807\u9898\u547d\u540d excel_name = Collection_info . query . get ( collection_id ) . collection_title + '.xlsx' # * \u6c47\u603b\u8868\u683c\u8def\u5f84 excel_path = namelist_path # * \u5e94\u4ea4\u540d\u5355\u5217\u8868 who_should_submit_list = [] if os . path . exists ( os . path . join ( namelist_path , '\u5e94\u4ea4\u540d\u5355.csv' )): who_should_submit_list = pd . read_csv ( namelist_path + \"/\u5e94\u4ea4\u540d\u5355.csv\" , encoding = 'utf-8' )[ '\u59d3\u540d' ] . to_list () # * \u5df2\u4ea4\u540d\u5355\u5217\u8868 who_has_submitted_list = [ submission [ 0 ] for submission in submission_record ( collection_id = collection_id ) ] # * \u751f\u6210\u6c47\u603b\u8868\u683c generate_excel ( who_should_submit_list , who_has_submitted_list , excel_name , excel_path ) response = make_response ( excel_path , excel_name ) return response 3.3 \u7edf\u8ba1\u56fe\u8868\u6c47\u603b # \u6c47\u603b\u6240\u6709\u63d0\u4ea4\u8005\u63d0\u4ea4\u7684\u95ee\u5377\u4fe1\u606f\u901a\u8fc7 statistics \u5b9e\u73b0\u3002 \u7edf\u8ba1\u4fe1\u606f\u751f\u6210 Returns: Type Description str json \u683c\u5f0f\u7684\u7edf\u8ba1\u4fe1\u606f Source code in Flask\\views.py 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 @app . route ( '/statistics' ) def statistics () -> str : \"\"\"\u7edf\u8ba1\u4fe1\u606f\u751f\u6210 Returns: (str): json \u683c\u5f0f\u7684\u7edf\u8ba1\u4fe1\u606f \"\"\" tmp_data = request . args . to_dict () print ( \"\u7edf\u8ba1\u53c2\u6570: \" , tmp_data ) if 'collectionId' not in tmp_data . keys (): print ( \"\u7edf\u8ba1\u53c2\u6570\u9519\u8bef\" ) return redirect ( url_for ( 'page_not_found' )) # collection_id = id_str_to_int(tmp_data['collectionId']) collection_id = int ( decryption ( tmp_data [ 'collectionId' ])) choice_statistics , qnaire_statistics = collection_data_statistics ( collection_id ) print ( \"choice_statistics: \" , choice_statistics ) print ( \"qnaire_statistics: \" , qnaire_statistics ) new_dict = { \"data_choice\" : choice_statistics , \"data_qnaire\" : qnaire_statistics } print ( \"new_dict: \" , new_dict ) json_message = json . dumps ( new_dict , indent = 2 , sort_keys = True , ensure_ascii = False ) return json_message","title":"FLASK"},{"location":"developer/flask/#flask","text":"","title":"Flask \u54cd\u5e94\u8bbe\u8ba1"},{"location":"developer/flask/#1","text":"","title":"1. \u7528\u6237\u76f8\u5173\u6a21\u5757"},{"location":"developer/flask/#11","text":"\u767b\u5f55\u72b6\u6001\u76f8\u5173\u51fd\u6570\u6709 register \u3001 login \u3001 logout \uff0c\u5206\u522b\u7528\u4e8e \u7528\u6237\u6ce8\u518c \u3001 \u7528\u6237\u767b\u5f55 \u3001 \u7528\u6237\u767b\u51fa \u3002","title":"1.1 \u8d26\u53f7\u5904\u7406"},{"location":"developer/flask/#111","text":"\u7528\u6237\u6ce8\u518c\u901a\u8fc7 register \u5b9e\u73b0\uff0c\u652f\u6301\u7528\u6237\u521b\u5efa\u8d26\u53f7\u3002 \u5173\u4e8e\u521b\u5efa\u8d26\u53f7 \u521b\u5efa\u8d26\u53f7\u5b58\u5728\u4e00\u5b9a\u7684\u9650\u5236\uff0c\u7528\u6237\u540d\u5fc5\u987b\u552f\u4e00\u4e14\u672a\u6ce8\u518c\u8fc7\uff0c\u5bc6\u7801\u9700\u8981\u7b26\u5408\u8981\u6c42\u3002 \u8d26\u53f7\u521b\u5efa\u6210\u529f\u540e\uff0c\u4f1a\u4e3a\u8be5\u8d26\u53f7\u5206\u914d\u4e00\u4e2a\u552f\u4e00\u7684\u6587\u4ef6\u76ee\u5f55\uff0c\u4f4d\u4e8e APP_FILE \u4e0b\u3002 \u6ce8\u518c\u9875\u9762 Returns: Type Description Response \u82e5\u4e3a POST \u8bf7\u6c42\uff0c\u6ce8\u518c\u6210\u529f\u91cd\u5b9a\u5411\u56de login \u9875\u9762\uff0c\u6ce8\u518c\u5931\u8d25\u91cd\u5b9a\u5411\u56de register \u9875\u9762\u3002 str \u82e5\u4e3a GET \u8bf7\u6c42\uff0c\u8f6c\u5230 register \u9875\u9762\u3002 Source code in Flask\\views.py 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 @app . route ( '/register' , methods = [ 'GET' , 'POST' ]) def register (): \"\"\"\u6ce8\u518c\u9875\u9762 Returns: (Response): \u82e5\u4e3a POST \u8bf7\u6c42\uff0c\u6ce8\u518c\u6210\u529f\u91cd\u5b9a\u5411\u56de login \u9875\u9762\uff0c\u6ce8\u518c\u5931\u8d25\u91cd\u5b9a\u5411\u56de register \u9875\u9762\u3002 (str): \u82e5\u4e3a GET \u8bf7\u6c42\uff0c\u8f6c\u5230 register \u9875\u9762\u3002 \"\"\" if request . method == 'POST' : username = request . form [ 'username' ] psw = request . form [ 'psw' ] email = request . form [ 'email' ] psw_confirm = request . form [ 'psw_confirm' ] # \u68c0\u67e5\u8f93\u5165\u662f\u5426\u4e3a\u7a7a if not username or not psw or not psw_confirm : flash ( 'Invalid input!' ) return redirect ( url_for ( 'register' )) # \u68c0\u67e52\u6b21\u8f93\u5165\u7684\u5bc6\u7801\u662f\u5426\u4e00\u81f4 if psw != psw_confirm : flash ( 'The passwords entered do not match!' ) return redirect ( url_for ( 'register' )) # \u68c0\u67e5\u6ce8\u518c\u7684\u7528\u6237\u540d\u662f\u5426\u5df2\u7ecf\u5b58\u5728 num = User . query . filter_by ( username = username ) . count () if num : flash ( 'The username already exists!' ) return redirect ( url_for ( 'register' )) # \u6ce8\u518c\u6210\u529f\uff0c\u5c06\u7528\u6237\u4fe1\u606f\u5b58\u5165\u6570\u636e\u5e93 user = User ( username = username , name = username ) # \u521d\u59cb\u5316\u65f6\uff0c\u7528\u6237\u6635\u79f0\u548c\u7528\u6237\u540d\u76f8\u540c user . set_password ( psw ) user . set_userpath () # * \u8bbe\u7f6e\u7528\u6237\u7a7a\u95f4\u8def\u5f84 user . set_email ( email ) # * \u8bbe\u7f6e\u7528\u6237\u90ae\u7bb1 db . session . add ( user ) db . session . commit () # \u63d0\u4ea4\u6570\u636e\u5e93\u4f1a\u8bdd flash ( 'Successfully Registered!' ) path = os . path . join ( APP_FILE , user . userpath ) print ( path ) # ! \u5f02\u5e38\u5904\u7406 try : os . makedirs ( path ) # \u521b\u5efa\u7528\u6237\u76ee\u5f55 except OSError : if not os . path . isdir ( path ): print ( \"\u7528\u6237\u76ee\u5f55\u521b\u5efa\u5931\u8d25\uff01\" ) return redirect ( url_for ( 'login' )) return render_template ( 'register.html' )","title":"1.1.1 \u7528\u6237\u6ce8\u518c"},{"location":"developer/flask/#112","text":"\u7528\u6237\u767b\u5f55\u901a\u8fc7 login \u5b9e\u73b0\uff0c\u652f\u6301\u7528\u6237\u901a\u8fc7\u5df2\u6ce8\u518c\u7684\u8d26\u53f7\u767b\u5f55\u3002 \u767b\u5f55\u9875\u9762 Returns: Type Description Response \u82e5\u4e3a POST \u8bf7\u6c42\uff0c\u767b\u5f55\u6210\u529f\u91cd\u5b9a\u5411\u56de index \u4e3b\u9875\uff0c\u767b\u5f55\u5931\u8d25\u91cd\u5b9a\u5411\u56de login \u9875\u9762\u3002 str \u82e5\u4e3a GET \u8bf7\u6c42\uff0c\u8f6c\u5230 login \u9875\u9762\u3002 Source code in Flask\\views.py 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 @app . route ( '/login' , methods = [ 'GET' , 'POST' ]) def login (): \"\"\"\u767b\u5f55\u9875\u9762 Returns: (Response): \u82e5\u4e3a POST \u8bf7\u6c42\uff0c\u767b\u5f55\u6210\u529f\u91cd\u5b9a\u5411\u56de index \u4e3b\u9875\uff0c\u767b\u5f55\u5931\u8d25\u91cd\u5b9a\u5411\u56de login \u9875\u9762\u3002 (str): \u82e5\u4e3a GET \u8bf7\u6c42\uff0c\u8f6c\u5230 login \u9875\u9762\u3002 \"\"\" if request . method == 'POST' : username = request . form [ 'username' ] password = request . form [ 'password' ] # \u68c0\u67e5\u8f93\u5165\u662f\u5426\u4e3a\u7a7a if not username or not password : flash ( 'Invalid input.' ) return redirect ( url_for ( 'login' )) user = User . query . filter_by ( username = username ) . first () # \u5728\u6570\u636e\u5e93\u4e2d\u67e5\u8be2\u7528\u6237 # \u9a8c\u8bc1\u7528\u6237\u540d if user is None : flash ( 'The username doesn \\' t exist!' ) # \u5982\u679c\u7528\u6237\u540d\u4e0d\u5b58\u5728\uff0c\u663e\u793a\u9519\u8bef\u6d88\u606f return redirect ( url_for ( 'login' )) # \u91cd\u5b9a\u5411\u56de\u767b\u5f55\u9875\u9762 # \u5bc6\u7801\u9519\u8bef if not user . validate_password ( password ): flash ( 'Password Error\uff01' ) # \u5982\u679c\u9a8c\u8bc1\u5931\u8d25\uff0c\u663e\u793a\u9519\u8bef\u6d88\u606f return redirect ( url_for ( 'login' )) # \u91cd\u5b9a\u5411\u56de\u767b\u5f55\u9875\u9762 login_user ( user ) # \u767b\u5165\u7528\u6237 return redirect ( url_for ( 'index' )) # \u91cd\u5b9a\u5411\u5230\u6587\u4ef6\u6536\u96c6\u754c\u9762 return render_template ( 'login.html' )","title":"1.1.2 \u7528\u6237\u767b\u5f55"},{"location":"developer/flask/#113","text":"\u7528\u6237\u767b\u51fa\u901a\u8fc7 logout \u5b9e\u73b0\uff0c\u652f\u6301\u767b\u5f55\u6001\u7684\u7528\u6237\u9000\u51fa\u767b\u5f55\u3002 \u9000\u51fa\u767b\u5f55 Returns: Type Description Response \u8f6c\u5230 index.html \u4e3b\u9875\u3002 Source code in Flask\\views.py 502 503 504 505 506 507 508 509 510 511 @app . route ( '/logout' , methods = [ 'GET' , 'POST' ]) def logout () -> Response : \"\"\"\u9000\u51fa\u767b\u5f55 Returns: \u8f6c\u5230 index.html \u4e3b\u9875\u3002 \"\"\" logout_user () # \u767b\u51fa\u7528\u6237 flash ( 'Goodbye!' ) return redirect ( url_for ( 'index' )) # \u91cd\u5b9a\u5411\u56de\u9996\u9875","title":"1.1.3 \u7528\u6237\u767b\u51fa"},{"location":"developer/flask/#12","text":"\u4e2a\u4eba\u4fe1\u606f\u76f8\u5173\u5904\u7406\u901a\u8fc7 personal_homepage \u5b9e\u73b0\uff0c\u652f\u6301\u7528\u6237\u4fee\u6539\u4e2a\u4eba\u4fe1\u606f\u3001\u4fee\u6539\u5bc6\u7801\u3002 \u5173\u4e8e\u4fee\u6539\u5bc6\u7801 \u4fee\u6539\u5bc6\u7801\u6210\u529f\u6216\u5931\u8d25\uff0c\u7cfb\u7edf\u4f1a\u7ed9\u51fa\u76f8\u5e94\u7684\u63d0\u793a\u3002 \u4e2a\u4eba\u4e3b\u9875 Returns: Type Description Response | str \u91cd\u5b9a\u5411\u6216\u8f6c\u5230 personal_homepage, \u643a\u5e26\u53c2\u6570 r_code\u3002 Source code in Flask\\views.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 @app . route ( '/personal_homepage' , methods = [ 'GET' , 'POST' ]) @login_required def personal_homepage (): \"\"\"\u4e2a\u4eba\u4e3b\u9875 Returns: (Response | str): \u91cd\u5b9a\u5411\u6216\u8f6c\u5230 personal_homepage, \u643a\u5e26\u53c2\u6570 r_code\u3002 \"\"\" if request . method == 'POST' : tmp_data = request . form . to_dict () ''' \u5982\u679c\u662f\u4fee\u6539\u4e2a\u4eba\u4fe1\u606f {'username': '\u5f20\u96bd\u7fca', 'phone': '\u672a\u8bbe\u7f6e', 'email': '729695343@qq.com', 'authorization-code': '\u672a\u8bbe\u7f6e'} \u5982\u679c\u662f\u4fee\u6539\u5bc6\u7801 {'psw_confirm': '123456', 'submit': ''} ''' value_type_check ( tmp_data ) if 'username' in tmp_data . keys (): # * \u4fee\u6539\u4e2a\u4eba\u4fe1\u606f r_code = modify_personal_info ( current_user . id , tmp_data [ 'username' ], tmp_data [ 'email' ], tmp_data [ 'authorization-code' ] ) if r_code == 1 : print ( \"\u4fee\u6539\u4e2a\u4eba\u4fe1\u606f\u6210\u529f\u3002\" ) else : print ( \"\u4fee\u6539\u4e2a\u4eba\u4fe1\u606f\u5931\u8d25\uff01\u8be5\u7528\u6237\u4e0d\u5b58\u5728\u3002\" ) else : # * \u4fee\u6539\u5bc6\u7801 r_code = modify_password ( current_user . id , tmp_data [ 'psw_initial' ], tmp_data [ 'psw_confirm' ] ) # TODO \u5f85\u4fee\u6539 if r_code == 1 : print ( \"\u4fee\u6539\u5bc6\u7801\u6210\u529f\u3002\" ) else : print ( \"\u4fee\u6539\u5bc6\u7801\u5931\u8d25\uff01\" ) return redirect ( url_for ( 'personal_homepage' , r_code = r_code )) user_authorization_code = current_user . authorization_code if user_authorization_code is None : user_authorization_code = \"\u672a\u8bbe\u7f6e\" return render_template ( \"personal_homepage.html\" , user_authorization_code = user_authorization_code , user_pwd_hash = current_user . password_hash , # TODO \u5f85\u4fee\u6539 r_code = 2 )","title":"1.2 \u4e2a\u4eba\u4fe1\u606f"},{"location":"developer/flask/#2","text":"\u4e0e\u6536\u96c6\u529f\u80fd\u76f8\u5173\u7684\u51fd\u6570\u6709 generate_collection \u3001 file_editing \u3001 copy_collection \u3001 collection_details \uff0c\u5206\u522b\u7528\u4e8e \u521b\u5efa\u6536\u96c6 \u3001 \u7f16\u8f91/\u91cd\u542f\u6536\u96c6 \u3001 \u590d\u5236\u6536\u96c6 \u3001 \u67e5\u770b\u6536\u96c6\u8be6\u60c5 \u3002","title":"2. \u6536\u96c6\u76f8\u5173\u6a21\u5757"},{"location":"developer/flask/#21","text":"\u521b\u5efa\u6536\u96c6\u901a\u8fc7 generate_collection \u5b9e\u73b0\uff0c\u652f\u6301\u767b\u5f55\u7528\u6237\u521b\u5efa\u6536\u96c6\u3002 \u751f\u6210\u4e00\u4e2a\u6536\u96c6\u5bf9\u8c61 Returns: Type Description Response | str \u82e5\u4e3a POST \u8bf7\u6c42\uff0c\u521b\u5efa\u6210\u529f\uff0c\u91cd\u5b9a\u5411\u5230 create_link \u9875\u9762\uff1b\u521b\u5efa\u5931\u8d25\uff0c\u8f6c\u5230 index \u9875\u9762\u3002 Response \u82e5\u4e3a GET \u8bf7\u6c42\uff0c\u8f6c\u5230 file_collecting \u9875\u9762\u3002 Source code in Flask\\views.py 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 @app . route ( '/file_collecting' , methods = [ 'GET' , 'POST' ]) @login_required def generate_collection (): \"\"\"\u751f\u6210\u4e00\u4e2a\u6536\u96c6\u5bf9\u8c61 Returns: (Response | str): \u82e5\u4e3a POST \u8bf7\u6c42\uff0c\u521b\u5efa\u6210\u529f\uff0c\u91cd\u5b9a\u5411\u5230 create_link \u9875\u9762\uff1b\u521b\u5efa\u5931\u8d25\uff0c\u8f6c\u5230 index \u9875\u9762\u3002 (Response): \u82e5\u4e3a GET \u8bf7\u6c42\uff0c\u8f6c\u5230 file_collecting \u9875\u9762\u3002 \"\"\" if request . method == 'POST' : # \u70b9\u51fb\u4e86\u63d0\u4ea4\u6309\u94ae question_list = request . form # \u83b7\u53d6\u9898\u76ee\u4fe1\u606f\u5217\u8868 if not question_list : flash ( \"Transport Error!\" ) # \u83b7\u53d6\u5931\u8d25 return render_template ( 'index.html' ) else : a = list ( question_list . items ( multi = True )) print ( '\u521b\u5efa\u6536\u96c6\uff1a' , a ) # ! \u8c03\u8bd5\u7528 collection_id = add_FC ( a , current_user . id ) # question = get_question_MultiDict(t) # print(question) flash ( \"Successfully create a collection!\" ) # share_link = \"127.0.0.1:5000/file_submitting/submit\" + id_int_to_str(collection_id) share_link = \"127.0.0.1:5000/file_submitting/submit\" + encryption ( str ( collection_id )) # return redirect(url_for('create_link', share_id=id_int_to_str(collection_id))) return redirect ( url_for ( 'create_link' , share_id = encryption ( str ( collection_id )))) return render_template ( 'file_collecting.html' )","title":"2.1 \u521b\u5efa\u6536\u96c6"},{"location":"developer/flask/#22","text":"\u7f16\u8f91\u6216\u91cd\u542f\u6536\u96c6\u901a\u8fc7 file_editing \u5b9e\u73b0\uff0c\u652f\u6301\u767b\u5f55\u7528\u6237\u7f16\u8f91\u8fdb\u884c\u4e2d\u7684\u6536\u96c6\u6216\u8005\u91cd\u542f\u5df2\u622a\u6b62\u7684\u6536\u96c6\u3002 \u6536\u96c6\u7f16\u8f91\u754c\u9762 Parameters: Name Type Description Default collection_id str \u6536\u96c6 id required Returns: Type Description Response | str \u82e5\u4e3a POST \u8bf7\u6c42\uff0c\u7f16\u8f91\u6210\u529f\u91cd\u5b9a\u5411\u56de index \u4e3b\u9875\uff0c\u7f16\u8f91\u5931\u8d25\u8f6c index \u4e3b\u9875\u3002 str \u82e5\u4e3a GET \u8bf7\u6c42\uff0c\u67e5\u8be2\u5230\u6536\u96c6\u8f6c file_editing \u9875\u9762\uff0c\u672a\u67e5\u8be2\u5230\u8f6c 404 \u9875\u9762\u3002 Source code in Flask\\views.py 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 @app . route ( '/file_editing/<string:collection_id>' , methods = [ 'GET' , 'POST' ]) @login_required def file_editing ( collection_id ): \"\"\"\u6536\u96c6\u7f16\u8f91\u754c\u9762 Args: collection_id (str): \u6536\u96c6 id Returns: (Response | str): \u82e5\u4e3a POST \u8bf7\u6c42\uff0c\u7f16\u8f91\u6210\u529f\u91cd\u5b9a\u5411\u56de index \u4e3b\u9875\uff0c\u7f16\u8f91\u5931\u8d25\u8f6c index \u4e3b\u9875\u3002 (str): \u82e5\u4e3a GET \u8bf7\u6c42\uff0c\u67e5\u8be2\u5230\u6536\u96c6\u8f6c file_editing \u9875\u9762\uff0c\u672a\u67e5\u8be2\u5230\u8f6c 404 \u9875\u9762\u3002 \"\"\" if is_accessible ( current_user . id , int ( decryption ( collection_id ))) == False : return redirect ( url_for ( 'no_access' )) if request . method == 'POST' : question_list = request . form if not question_list : flash ( \"\u63d0\u4ea4\u7f16\u8f91\u5931\u8d25\uff01\" ) print ( \"\u63d0\u4ea4\u7f16\u8f91\u5931\u8d25\uff01\" ) return render_template ( 'index.html' ) else : a = list ( question_list . items ( multi = True )) print ( \"\u7f16\u8f91\u540e\u7684\u5185\u5bb9\uff1a\" , a ) # ! \u8c03\u8bd5\u7528 # modify_collection(id_str_to_int(collection_id), a) modify_collection ( int ( decryption ( collection_id )), a ) print ( \"\u63d0\u4ea4\u7f16\u8f91\u6210\u529f\uff01\" ) return redirect ( url_for ( 'mycollection' )) # \u7f16\u8f91\u5b8c\u6210\uff0c\u8fd4\u56de\u4e3b\u9875 # collection_id = id_str_to_int(collection_id) collection_id = int ( decryption ( collection_id )) question_dict = get_question_dict ( collection_id ) print ( question_dict ) if question_dict is None : return render_template ( \"404.html\" ) return render_template ( 'file_editing.html' , collection = question_dict )","title":"2.2 \u7f16\u8f91/\u91cd\u542f\u6536\u96c6"},{"location":"developer/flask/#23","text":"\u590d\u5236\u6536\u96c6\u901a\u8fc7 copy_collection \u5b9e\u73b0\uff0c\u652f\u6301\u767b\u5f55\u7528\u6237\u5728\u539f\u6709\u6536\u96c6\u57fa\u7840\u4e0a\u8bbe\u7f6e\u65b0\u7684\u6536\u96c6\u3002 \u590d\u5236\u6536\u96c6 Parameters: Name Type Description Default collection_id str \u5f85\u590d\u5236\u7684\u6536\u96c6 id required Source code in Flask\\views.py 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 @app . route ( '/file_collecting/<string:collection_id>' , methods = [ 'GET' , 'POST' ]) @login_required def copy_collection ( collection_id : str ): \"\"\"\u590d\u5236\u6536\u96c6 Args: collection_id (str): \u5f85\u590d\u5236\u7684\u6536\u96c6 id \"\"\" if is_accessible ( current_user . id , int ( decryption ( collection_id ))) == False : return redirect ( url_for ( 'no_access' )) if request . method == 'POST' : question_list = request . form if not question_list : flash ( \"\u590d\u5236\u6536\u96c6\u5931\u8d25\uff01\" ) return render_template ( 'index.html' ) a = list ( question_list . items ( multi = True )) print ( a ) add_FC ( a , current_user . id ) flash ( \"\u590d\u5236\u6536\u96c6\u6210\u529f\uff01\" ) print ( \"\u590d\u5236\u6536\u96c6\u6210\u529f\uff01\" ) return redirect ( url_for ( 'index' )) # collection_id = id_str_to_int(collection_id) collection_id = int ( decryption ( collection_id )) question_dict = get_question_dict ( collection_id ) print ( question_dict ) if question_dict is None : return render_template ( \"404.html\" ) return render_template ( 'file_collecting.html' , collection = question_dict )","title":"2.3 \u590d\u5236\u6536\u96c6"},{"location":"developer/flask/#24","text":"\u67e5\u770b\u6536\u96c6\u8be6\u60c5\u901a\u8fc7 collection_details \u5b9e\u73b0\uff0c\u652f\u6301\u767b\u5f55\u7528\u6237\u67e5\u770b\u6536\u96c6\u7684\u5177\u4f53\u6536\u96c6\u60c5\u51b5\u3002 \u6536\u96c6\u8be6\u60c5\u9875\u9762 Parameters: Name Type Description Default collection_id str \u6536\u96c6 id required Returns: Type Description Response | str collection_details \u6536\u96c6\u8be6\u60c5\u9875\u9762\u3002 Source code in Flask\\views.py 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 @app . route ( '/collection_details/<string:collection_id>' , methods = [ 'GET' , 'POST' ]) @login_required def collection_details ( collection_id : str ): \"\"\"\u6536\u96c6\u8be6\u60c5\u9875\u9762 Args: collection_id (str): \u6536\u96c6 id Returns: (Response | str): collection_details \u6536\u96c6\u8be6\u60c5\u9875\u9762\u3002 \"\"\" if is_accessible ( current_user . id , int ( decryption ( collection_id ))) == False : return redirect ( url_for ( 'no_access' )) if request . method == 'POST' : namelist_data = request . form . to_dict () # * \u83b7\u53d6\u5e94\u4ea4\u540d\u5355\u6570\u636e print ( \"\u524d\u7aef\u6570\u636e: \" , namelist_data ) if 'hidden-input' in namelist_data . keys (): # namelist_path = './FileStorage/' + \\ # Collection_info.query.filter_by(creator_id=current_user.id).first().namelist_path # namelist_path = os.path.join( # APP_FILE, # Collection_info.query.get( # id_str_to_int(collection_id) # ).collection_path # ) namelist_path = os . path . join ( APP_FILE , Collection_info . query . get ( int ( decryption ( collection_id ))) . collection_path ) print ( \"\u5e94\u4ea4\u540d\u5355\u8def\u5f84\uff1a\" , namelist_path ) namelist = pd . read_csv ( namelist_path + \"/\u5e94\u4ea4\u540d\u5355.csv\" , encoding = 'utf-8' ) # * \u5220\u9664\u88ab\u70b9\u51fb\u7684\u540d\u5b57 delete_name = namelist_data [ 'hidden-input' ] namelist = namelist [ ~ namelist [ '\u59d3\u540d' ] . isin ([ delete_name ])] # namelist = namelist[~(namelist['\u59d3\u540d'].str == namelist_data['hidden-input'])] namelist . to_csv ( namelist_path + \"/\u5e94\u4ea4\u540d\u5355.csv\" , encoding = 'utf-8' , index = False ) # * \u4fdd\u5b58\u4e3a csv \u6587\u4ef6 return redirect ( url_for ( 'collection_details' , collection_id = collection_id )) name_list = list ( set ( namelist_data [ 'name_data' ] . split ())) namelist_csv = pd . DataFrame ( columns = [ \"\u59d3\u540d\" ], data = name_list ) # print(namelist_csv) # namelist_path = './FileStorage/' + Collection_info.query.filter_by( # creator_id=current_user.id).first().namelist_path # namelist_path = os.path.join( # APP_FILE, # Collection_info.query.get(id_str_to_int(collection_id)).collection_path # ) namelist_path = os . path . join ( APP_FILE , Collection_info . query . get ( int ( decryption ( collection_id ))) . collection_path ) print ( namelist_path ) if os . path . exists ( namelist_path + \"/\u5e94\u4ea4\u540d\u5355.csv\" ): tmp_csv = pd . read_csv ( namelist_path + '/\u5e94\u4ea4\u540d\u5355.csv' , encoding = 'utf-8' ) for name in name_list : if name in tmp_csv [ '\u59d3\u540d' ] . values : name_list . remove ( name ) pd . DataFrame ( data = name_list ) . to_csv ( namelist_path + \"/\u5e94\u4ea4\u540d\u5355.csv\" , mode = 'a' , header = False , encoding = 'utf-8' ) else : namelist_csv . to_csv ( namelist_path + \"/\u5e94\u4ea4\u540d\u5355.csv\" , encoding = 'utf-8' ) # * \u4fdd\u5b58\u4e3a csv \u6587\u4ef6 return redirect ( url_for ( 'collection_details' , collection_id = collection_id )) # collection_id = id_str_to_int(collection_id) # * \u8f6c\u6362\u4e3a\u5b9e\u9645\u7684\u6536\u96c6 id collection_id = int ( decryption ( collection_id )) # * \u8f6c\u6362\u4e3a\u5b9e\u9645\u7684\u6536\u96c6 id parameter_dict_list = [] # submission_list = submission_record( # collection_id=collection_id) # * \u83b7\u53d6\u5bf9\u5e94 id \u7684\u6536\u96c6\u4fe1\u606f submission_list = submission_record_v2 ( collection_id = collection_id ) # * \u83b7\u53d6\u5bf9\u5e94 id \u7684\u6536\u96c6\u4fe1\u606f print ( submission_list ) who_has_submitted_list = [ submission [ 1 ] for submission in submission_list ] # * \u5df2\u63d0\u4ea4\u5217\u8868 namelist_path = os . path . join ( APP_FILE , Collection_info . query . get ( collection_id ) . collection_path ) who_should_submit_list = [] if os . path . exists ( namelist_path + \"/\u5e94\u4ea4\u540d\u5355.csv\" ): who_should_submit_list = pd . read_csv ( namelist_path + \"/\u5e94\u4ea4\u540d\u5355.csv\" , encoding = 'utf-8' )[ '\u59d3\u540d' ] . tolist () print ( who_should_submit_list ) # * \u5df2\u63d0\u4ea4\u540d\u5355\u751f\u6210\u903b\u8f91\uff1a\u5728\u5e94\u4ea4\u540d\u5355\u4e2d\u4e14\u63d0\u4ea4\u4e86\u6587\u4ef6 submitted_list = list ( set ( who_has_submitted_list ) & set ( who_should_submit_list )) submitted_list . sort () print ( \"\u5df2\u63d0\u4ea4\u540d\u5355: \" , submitted_list ) # * \u672a\u63d0\u4ea4\u540d\u5355\u751f\u6210\u903b\u8f91\uff1a\u5728\u5e94\u4ea4\u540d\u5355\u4e2d\u4f46\u672a\u63d0\u4ea4\u6587\u4ef6 not_submitted_list = list ( set ( who_should_submit_list ) - set ( who_has_submitted_list )) not_submitted_list . sort () print ( \"\u672a\u63d0\u4ea4\u540d\u5355: \" , not_submitted_list ) # for idx, submission in enumerate(submission_list): for submission in submission_list : # * \u521b\u5efa\u4e00\u4e2a\u5b57\u5178\u7c7b\u578b\uff0c\u7528\u4e8e\u4f20\u53c2 idx = submission [ 0 ] # \u63d0\u4ea4 id submitter_name = submission [ 1 ] # \u63d0\u4ea4\u8005\u59d3\u540d submit_time = submission [ 2 ] # \u63d0\u4ea4\u65f6\u95f4 file_submitted_count = submission [ 3 ] # \u63d0\u4ea4\u6587\u4ef6\u6570\u91cf file_submitted_list = submission [ 4 ] # \u63d0\u4ea4\u6587\u4ef6\u5217\u8868 tmp_dict = { 'submitter_id' : idx , # ! \u5df2\u7ecf\u4fee\u6b63\u4e3a\u63d0\u4ea4 id 'submitter_name' : submitter_name , 'submit_time' : submit_time . strftime ( '%Y-%m- %d %H:%M:%S' ), 'file_submitted_count' : file_submitted_count , 'file_submitted_list' : file_submitted_list } parameter_dict_list . append ( tmp_dict ) return render_template ( 'collection_details.html' , json_object = parameter_dict_list , json_length = len ( parameter_dict_list ), submission_count = count_submission ( collection_id = collection_id ), filenum_count = count_filenum ( collection_id = collection_id ), ddl_countdown = Collection_info . query . get ( collection_id ) . end_date . strftime ( '%Y-%m- %d %H:%M:%S' ), submitted_list = submitted_list , not_submitted_list = not_submitted_list )","title":"2.4 \u67e5\u770b\u6536\u96c6\u8be6\u60c5"},{"location":"developer/flask/#3","text":"\u4e0e\u7edf\u8ba1\u529f\u80fd\u76f8\u5173\u7684\u51fd\u6570\u6709 mycollection \u3001 send_statistic_file \u3001 statistics \uff0c\u5206\u522b\u7528\u4e8e \u7528\u6237\u6536\u96c6\u6c47\u603b \u3001 \u6536\u96c6\u4fe1\u606f\u6c47\u603b \u3001 \u7edf\u8ba1\u56fe\u8868\u6c47\u603b \u3002","title":"3. \u7edf\u8ba1\u76f8\u5173\u6a21\u5757"},{"location":"developer/flask/#31","text":"\u6c47\u603b\u7528\u6237\u521b\u5efa\u7684\u6240\u6709\u6536\u96c6\u901a\u8fc7 mycollection \u5b9e\u73b0\uff0c\u652f\u6301\u767b\u5f55\u7528\u6237\u67e5\u770b\u6536\u96c6\u603b\u89c8\u3002 \u6536\u96c6\u603b\u89c8\u9875\u9762 Source code in Flask\\views.py 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 @app . route ( '/mycollection' , methods = [ 'GET' , 'POST' ]) @login_required def mycollection (): \"\"\" \u6536\u96c6\u603b\u89c8\u9875\u9762 \"\"\" # * \u5982\u679c\u68c0\u6d4b\u5230\u5bf9\u6536\u96c6\u7684\u64cd\u4f5c if request . method == 'POST' : user_action = request . form [ 'hidden-input' ] # \u83b7\u53d6\u7528\u6237\u64cd\u4f5c\u7684\u76f8\u5173\u4fe1\u606f user_action_list = user_action . split ( '$' ) collection_id = user_action_list [ 1 ] # \u5f85\u64cd\u4f5c\u7684\u6536\u96c6 id # * \u6839\u636e\u7b2c\u4e00\u4e2a\u53c2\u6570\u786e\u5b9a\u64cd\u4f5c\u7c7b\u578b if user_action_list [ 0 ] == 'share' : # ? \u5206\u4eab\uff0c\u5df2\u5b8c\u6210 submitting_page = 'file_submitting' + '/submit' + collection_id print ( submitting_page ) # ! \u8c03\u8bd5 print ( \"\u5206\u4eab\" ) elif user_action_list [ 0 ] == 'collect-details' : # \u7edf\u8ba1 print ( \"\u7edf\u8ba1\" ) elif user_action_list [ 0 ] == 'edit' : # \u7f16\u8f91 print ( \"\u7f16\u8f91\" ) elif user_action_list [ 0 ] == 'restart' : # \u91cd\u542f print ( \"\u91cd\u542f\" ) elif user_action_list [ 0 ] == 'copy' : # \u590d\u5236 print ( \"\u590d\u5236\" ) elif user_action_list [ 0 ] == 'stop' : # ? \u505c\u6b62\uff0c\u5df2\u5b8c\u6210 # stop_collection(id_str_to_int(collection_id), user_action_list) stop_collection ( int ( decryption ( collection_id )), user_action_list ) print ( \"\u505c\u6b62\" ) elif user_action_list [ 0 ] == 'del' : # ? \u5220\u9664\uff0c\u5df2\u5b8c\u6210 # delete_collection(id_str_to_int(collection_id)) delete_collection ( int ( decryption ( collection_id ))) print ( \"\u5220\u9664\" ) # return redirect(url_for('mycollection')) # else: update_status ( current_user . id ) # \u66f4\u65b0\u5f53\u524d\u7528\u6237\u6240\u6709\u6536\u96c6\u7684 status \u5b57\u6bb5 collection_list = Collection_info . query . filter_by ( creator_id = current_user . id ) . all () parameter_dict_list = [] for collection in collection_list : # * \u521b\u5efa\u4e00\u4e2a\u5b57\u5178\u7c7b\u578b\uff0c\u7528\u4e8e\u4f20\u53c2\uff0c\u53ef\u5220\u9664 tmp_dict = { 'username' : current_user . username , 'collection_title' : collection . collection_title , 'collection_status' : \"\u8fdb\u884c\u4e2d\" if collection . status == '0' else \"\u5df2\u622a\u6b62\" , 'collection_id' : collection . id , # ! \u591a\u4f20\u4e00\u4e2a\u6536\u96c6 id 'submit_count' : count_submission ( collection_id = collection . id ), 'deadline' : collection . end_date . strftime ( '%Y-%m- %d %H:%M:%S' ) } parameter_dict_list . append ( tmp_dict ) return render_template ( 'mycollection.html' , username = current_user . name , user_email = current_user . email , json_object = json . dumps ( parameter_dict_list ), json_length = len ( parameter_dict_list ) )","title":"3.1 \u7528\u6237\u6536\u96c6\u6c47\u603b"},{"location":"developer/flask/#32","text":"\u7edf\u8ba1\u63d0\u4ea4\u8005\u63d0\u4ea4\u60c5\u51b5\u5e76\u751f\u6210 Excel \u8868\u683c\u901a\u8fc7 send_statistic_file \u5b9e\u73b0\uff0c\u751f\u6210\u7684\u6536\u96c6\u8be6\u60c5\u8868\u683c\u4fdd\u5b58\u5728\u5bf9\u5e94\u7684\u6536\u96c6\u76ee\u5f55\u4e0b\u3002 \u6c47\u603b\u6240\u6709\u63d0\u4ea4\u8005\u4e0a\u4f20\u7684\u6587\u4ef6\u5e76\u538b\u7f29\u4e3a zip \u6587\u4ef6\u4e5f\u901a\u8fc7 send_statistic_file \u5b9e\u73b0\uff0c\u751f\u6210\u7684 zip \u6587\u4ef6\u4fdd\u5b58\u5728\u7528\u6237\u76ee\u5f55\u4e0b\u3002 \u8fd4\u56de\u8bf7\u6c42\u7684\u6587\u4ef6\uff0c\u7528\u4e8e\u67e5\u770b\u6c47\u603b\u548c\u4e0b\u8f7d\u6587\u4ef6 Returns: Type Description Response \u8bf7\u6c42\u7684\u6587\u4ef6\u3002\u8bf7\u6c42\u53c2\u6570\u4e3a zip\uff0c\u8fd4\u56de\u538b\u7f29\u5305\uff1b\u8bf7\u6c42\u53c2\u6570\u4e3a excel\uff0c\u8fd4\u56de\u63d0\u4ea4\u60c5\u51b5\u3002 Source code in Flask\\views.py 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 @app . route ( '/download' ) @login_required def send_statistic_file () -> Response : \"\"\"\u8fd4\u56de\u8bf7\u6c42\u7684\u6587\u4ef6\uff0c\u7528\u4e8e\u67e5\u770b\u6c47\u603b\u548c\u4e0b\u8f7d\u6587\u4ef6 Returns: (Response): \u8bf7\u6c42\u7684\u6587\u4ef6\u3002\u8bf7\u6c42\u53c2\u6570\u4e3a zip\uff0c\u8fd4\u56de\u538b\u7f29\u5305\uff1b\u8bf7\u6c42\u53c2\u6570\u4e3a excel\uff0c\u8fd4\u56de\u63d0\u4ea4\u60c5\u51b5\u3002 \"\"\" tmp_data = request . args . to_dict () print ( tmp_data ) # collection_id = id_str_to_int(tmp_data['collectionId']) collection_id = int ( decryption ( tmp_data [ 'collectionId' ])) file_type = tmp_data [ 'fileType' ] if file_type == 'zip' : # * \u7528\u6237\u8bf7\u6c42\u6240\u6709\u6536\u96c6\u6587\u4ef6 print ( \"collection_id: \" , collection_id ) tmp_path = Collection_info . query . get ( collection_id ) . collection_path # * zip \u538b\u7f29\u6587\u4ef6\u4ee5\u6536\u96c6\u6807\u9898\u547d\u540d zip_file_name = Collection_info . query . get ( collection_id ) . collection_title + '.zip' # print(\"\u6536\u96c6\u6807\u9898: \", zip_file_name) source_dir = os . path . join ( APP_FILE , tmp_path ) destination_dir = os . path . join ( APP_FILE , current_user . userpath ) print ( \"\u6e90\u8def\u5f84: \" , source_dir ) print ( \"\u76ee\u6807\u8def\u5f84: \" , destination_dir ) # ! \u8fd4\u56de\u538b\u7f29\u5305 # * \u751f\u6210\u538b\u7f29\u6587\u4ef6 generate_zip ( source_dir , os . path . join ( destination_dir , zip_file_name )) response = make_response ( destination_dir , zip_file_name ) return response else : # * \u7528\u6237\u8bf7\u6c42\u6c47\u603b\u8868\u683c namelist_path = os . path . join ( APP_FILE , Collection_info . query . get ( collection_id ) . collection_path ) # * Excel \u4ee5\u6536\u96c6\u6807\u9898\u547d\u540d excel_name = Collection_info . query . get ( collection_id ) . collection_title + '.xlsx' # * \u6c47\u603b\u8868\u683c\u8def\u5f84 excel_path = namelist_path # * \u5e94\u4ea4\u540d\u5355\u5217\u8868 who_should_submit_list = [] if os . path . exists ( os . path . join ( namelist_path , '\u5e94\u4ea4\u540d\u5355.csv' )): who_should_submit_list = pd . read_csv ( namelist_path + \"/\u5e94\u4ea4\u540d\u5355.csv\" , encoding = 'utf-8' )[ '\u59d3\u540d' ] . to_list () # * \u5df2\u4ea4\u540d\u5355\u5217\u8868 who_has_submitted_list = [ submission [ 0 ] for submission in submission_record ( collection_id = collection_id ) ] # * \u751f\u6210\u6c47\u603b\u8868\u683c generate_excel ( who_should_submit_list , who_has_submitted_list , excel_name , excel_path ) response = make_response ( excel_path , excel_name ) return response","title":"3.2 \u6536\u96c6\u4fe1\u606f\u6c47\u603b"},{"location":"developer/flask/#33","text":"\u6c47\u603b\u6240\u6709\u63d0\u4ea4\u8005\u63d0\u4ea4\u7684\u95ee\u5377\u4fe1\u606f\u901a\u8fc7 statistics \u5b9e\u73b0\u3002 \u7edf\u8ba1\u4fe1\u606f\u751f\u6210 Returns: Type Description str json \u683c\u5f0f\u7684\u7edf\u8ba1\u4fe1\u606f Source code in Flask\\views.py 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 @app . route ( '/statistics' ) def statistics () -> str : \"\"\"\u7edf\u8ba1\u4fe1\u606f\u751f\u6210 Returns: (str): json \u683c\u5f0f\u7684\u7edf\u8ba1\u4fe1\u606f \"\"\" tmp_data = request . args . to_dict () print ( \"\u7edf\u8ba1\u53c2\u6570: \" , tmp_data ) if 'collectionId' not in tmp_data . keys (): print ( \"\u7edf\u8ba1\u53c2\u6570\u9519\u8bef\" ) return redirect ( url_for ( 'page_not_found' )) # collection_id = id_str_to_int(tmp_data['collectionId']) collection_id = int ( decryption ( tmp_data [ 'collectionId' ])) choice_statistics , qnaire_statistics = collection_data_statistics ( collection_id ) print ( \"choice_statistics: \" , choice_statistics ) print ( \"qnaire_statistics: \" , qnaire_statistics ) new_dict = { \"data_choice\" : choice_statistics , \"data_qnaire\" : qnaire_statistics } print ( \"new_dict: \" , new_dict ) json_message = json . dumps ( new_dict , indent = 2 , sort_keys = True , ensure_ascii = False ) return json_message","title":"3.3 \u7edf\u8ba1\u56fe\u8868\u6c47\u603b"},{"location":"developer/web/","text":"Web \u7f51\u9875\u8bbe\u8ba1 # 1. \u7f51\u9875\u8df3\u8f6c\u903b\u8f91 # \u7f51\u9875\u4e4b\u95f4\u7684\u5173\u8054\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\u3002 2. \u5173\u952e JS \u4ee3\u7801 # 2.1 \u590d\u9009\u6846\u66f4\u65b0\u903b\u8f91 # /** * \u4fee\u6539\u590d\u9009\u6846\u4e2d\u7684\u5185\u5bb9 * \u5f53\u6709\u9898\u76ee\u7684\u589e\u52a0/\u5220\u9664/\u4fee\u6539/\u4ea4\u6362\u987a\u5e8f\u65f6\uff0c\u8c03\u7528\u6b64\u51fd\u6570 * @param {string} option \u64cd\u4f5c\u7c7b\u578b\uff0c * \u6709\u56db\u79cd\u53d6\u503c\uff1a\"add\",\"remove\",\"modify\",\"swap\" * @param {string} id \u52fe\u9009\u6846\u9009\u9879\u7684id * @param {string} value \u52fe\u9009\u6846\u9009\u9879\u7684\u5185\u5bb9 * @returns null */ function for_checkbox ( option , id , value ) { for ( let i = 0 ; i < lis . length ; i ++ ) { let input_content = lis [ i ]. getElementsByClassName ( \"input-content\" )[ 0 ]; if ( ! input_content ) continue ; if ( input_content . type === \"file\" ) { let selectBox = lis [ i ]. getElementsByClassName ( \"selectTopic\" )[ 0 ]; let childrenLength = selectBox . children . length ; if ( option === \"add\" ) { //\u65b0\u589e let newcheckbox = document . createElement ( \"input\" ); let newspan = document . createElement ( \"span\" ); newcheckbox . type = \"checkbox\" ; //\u8bbe\u4e3a\u540c\u4e00id newcheckbox . id = id ; //\u7ed9\u590d\u9009\u6846\u589e\u6dfb name\u548c value newcheckbox . name = \"checked_topic\" ; newcheckbox . value = value ; newspan . appendChild ( document . createTextNode ( value )); selectBox . appendChild ( newcheckbox ); selectBox . appendChild ( newspan ); } else if ( option === \"remove\" ) { //\u5220\u9664 for ( let j = 0 ; j < selectBox . children . length ; j ++ ) { if ( selectBox . children [ j ]. id && selectBox . children [ j ]. id === id ) { selectBox . removeChild ( selectBox . children [ j ]. nextSibling ); selectBox . removeChild ( selectBox . children [ j ]); } } } else if ( option === \"modify\" ) { //\u4fee\u6539 for ( let j = 0 ; j < selectBox . children . length ; j ++ ) { if ( selectBox . children [ j ]. id && selectBox . children [ j ]. id === id ) { selectBox . children [ j ]. nextSibling . innerHTML = value ; selectBox . children [ j ]. value = value ; } } } else { //\u4ea4\u6362\u4f4d\u7f6e let drag = null , drop = null , drag_txt = null ; for ( let j = 0 ; j < selectBox . children . length ; j ++ ) { if ( selectBox . children [ j ]. id && selectBox . children [ j ]. id === id ) { drag = selectBox . children [ j ]; drag_txt = selectBox . children [ j ]. nextSibling ; } else if ( selectBox . children [ j ]. id && selectBox . children [ j ]. id === value ) { drop = selectBox . children [ j ]; } } if ( value === 0 ) { selectBox . appendChild ( drag ); selectBox . appendChild ( drag_txt ); return ; } selectBox . insertBefore ( drag_txt , drop ); selectBox . insertBefore ( drag , drag_txt ); } } } } 2.2 \u6536\u96c6\u9898\u76ee\u521b\u5efa\u903b\u8f91 # function createQuestion () { if ( formDataLen === 0 ) { collectionTitle . value = \"\u6587\u4ef6\u6536\u96c6\" ; // collector.value = \"\"; op_name . onclick (); op_sno . onclick (); op_file . onclick (); return ; } collectionTitle . value = Object . values ( formData )[ 0 ]; collector . value = Object . values ( formData )[ 1 ]; deadline . value = Object . values ( formData )[ 2 ]; description . value = Object . values ( formData )[ 3 ]; for ( let i = 0 ; i < formDataLen ; i ++ ) { let q = formDataArr [ i ]; let keys = Object . keys ( formDataArr [ i ]); let values = Object . values ( formDataArr [ i ]); if ( keys [ 0 ]. indexOf ( \"question_name\" ) != - 1 ) { createName ( values [ 0 ], values [ 1 ]); } else if ( keys [ 0 ]. indexOf ( \"question_sno\" ) != - 1 ) { createSno ( values [ 0 ], values [ 1 ]); } else if ( keys [ 0 ]. indexOf ( \"question_file\" ) != - 1 ) { createFile ( values [ 0 ], values [ 1 ]); } else if ( keys [ 0 ]. indexOf ( \"question_radio\" ) != - 1 ) { let k = values [ values . length - 1 ]. toString (). charCodeAt () - \"A\" . charCodeAt (); createSingleChoice ( values [ 0 ], values [ 1 ], 1 , [ k ]); } else if ( keys [ 0 ]. indexOf ( \"question_multipleChoice\" ) != - 1 ) { let cnt = 0 ; let tmp = []; for ( let j = 0 ; j < keys . length ; j ++ ) { if ( keys [ j ]. indexOf ( \"checked_mulans\" ) != - 1 ) { cnt ++ ; tmp . push ( values [ j ]. toString (). charCodeAt () - \"A\" . charCodeAt ()); } } createMultipleChoice ( values [ 0 ], values [ 1 ], cnt , tmp ); } else { let qnOptionNum = 0 ; let qnOptionContent = []; for ( let j = 0 ; j < keys . length ; j ++ ) { if ( keys [ j ]. indexOf ( \"qn_option\" ) != - 1 ) { qnOptionNum ++ ; qnOptionContent . push ( values [ j ]); } } let multi = values [ values . length - 1 ] == \"multiple\" ; createQuestionnaire ( values [ 0 ], values [ 1 ], qnOptionContent , multi ); } } for ( let i = 0 ; i < formDataLen ; i ++ ) { let q = formDataArr [ i ]; let keys = Object . keys ( formDataArr [ i ]); let values = Object . values ( formDataArr [ i ]); let texts = lis [ i ]. querySelectorAll ( \".checked_topic_text\" ); if ( keys [ 0 ]. indexOf ( \"question_file\" ) != - 1 ) { for ( let j = 0 ; j < keys . length ; j ++ ) { if ( keys [ j ]. indexOf ( \"checked_topic\" ) != - 1 ) { for ( let k = 0 ; k < texts . length ; k ++ ) { if ( texts [ k ]. innerHTML == values [ j ]) texts [ k ]. previousSibling . checked = \"checked\" ; } } } } } } 2.3 \u53ef\u62d6\u62fd\u5b9e\u73b0\u903b\u8f91 # function onDragStart ( e ) { // \u83b7\u53d6\u5f53\u524d\u62d6\u62fd\u5143\u7d20 dragElement = e . currentTarget ; } function onDragOver ( e ) { // \u9ed8\u8ba4\u7684\u5f53\u4f60dragover\u7684\u65f6\u5019\u4f1a\u963b\u6b62\u4f60\u505adrop\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u9700\u8981\u53d6\u6d88\u8fd9\u4e2a\u9ed8\u8ba4 e . preventDefault (); } function onDrop ( e ) { // \u5f53\u62d6\u52a8\u7ed3\u675f\u7684\u65f6\u5019\uff0c\u7ed9\u62d6\u52a8div\u6240\u5728\u7684\u4f4d\u7f6e\u4e0b\u9762\u7684div\u505adrop\u4e8b\u4ef6 let dropElement = e . currentTarget ; if ( dragElement === dropElement ) return ; //\u4ea4\u6362\u590d\u9009\u6846\u4e2d\u7684\u4f4d\u7f6e let dragId = dragElement . id ; let dropId = dropElement . id ; let dragElementType = dragElement . getElementsByClassName ( \"input-topic\" )[ 0 ]. name ; let dropElementType = dropElement . getElementsByClassName ( \"input-topic\" )[ 0 ]. name ; if ( dragElementType === \"question_name\" || dragElementType === \"question_sno\" ) { if ( dropElementType === \"question_name\" || dropElementType === \"question_sno\" ) { if ( dragElement . nextSibling === dropElement ) { for_checkbox ( \"swap\" , dropId , dragId ); } else { for_checkbox ( \"swap\" , dragId , dropId ); } } else { let next = dropElement . nextSibling ; let nextType = null ; let flag = 0 ; while ( next ) { nextType = next . getElementsByClassName ( \"input-topic\" )[ 0 ]. name ; if ( nextType && ( nextType === \"question_name\" || nextType === \"question_sno\" ) ) { for_checkbox ( \"swap\" , dragId , next . id ); flag = 1 ; break ; } next = next . nextSibling ; } if ( ! flag ) { for_checkbox ( \"swap\" , dragId , 0 ); } } } //\u5b9e\u9645\u4ea4\u6362\u4f4d\u7f6e if ( dragElement != null ) { if ( dragElement . nextSibling === dropElement ) { ul . insertBefore ( dropElement , dragElement ); } else { ul . insertBefore ( dragElement , dropElement ); } } }","title":"WEB"},{"location":"developer/web/#web","text":"","title":"Web \u7f51\u9875\u8bbe\u8ba1"},{"location":"developer/web/#1","text":"\u7f51\u9875\u4e4b\u95f4\u7684\u5173\u8054\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\u3002","title":"1. \u7f51\u9875\u8df3\u8f6c\u903b\u8f91"},{"location":"developer/web/#2-js","text":"","title":"2. \u5173\u952e JS \u4ee3\u7801"},{"location":"developer/web/#21","text":"/** * \u4fee\u6539\u590d\u9009\u6846\u4e2d\u7684\u5185\u5bb9 * \u5f53\u6709\u9898\u76ee\u7684\u589e\u52a0/\u5220\u9664/\u4fee\u6539/\u4ea4\u6362\u987a\u5e8f\u65f6\uff0c\u8c03\u7528\u6b64\u51fd\u6570 * @param {string} option \u64cd\u4f5c\u7c7b\u578b\uff0c * \u6709\u56db\u79cd\u53d6\u503c\uff1a\"add\",\"remove\",\"modify\",\"swap\" * @param {string} id \u52fe\u9009\u6846\u9009\u9879\u7684id * @param {string} value \u52fe\u9009\u6846\u9009\u9879\u7684\u5185\u5bb9 * @returns null */ function for_checkbox ( option , id , value ) { for ( let i = 0 ; i < lis . length ; i ++ ) { let input_content = lis [ i ]. getElementsByClassName ( \"input-content\" )[ 0 ]; if ( ! input_content ) continue ; if ( input_content . type === \"file\" ) { let selectBox = lis [ i ]. getElementsByClassName ( \"selectTopic\" )[ 0 ]; let childrenLength = selectBox . children . length ; if ( option === \"add\" ) { //\u65b0\u589e let newcheckbox = document . createElement ( \"input\" ); let newspan = document . createElement ( \"span\" ); newcheckbox . type = \"checkbox\" ; //\u8bbe\u4e3a\u540c\u4e00id newcheckbox . id = id ; //\u7ed9\u590d\u9009\u6846\u589e\u6dfb name\u548c value newcheckbox . name = \"checked_topic\" ; newcheckbox . value = value ; newspan . appendChild ( document . createTextNode ( value )); selectBox . appendChild ( newcheckbox ); selectBox . appendChild ( newspan ); } else if ( option === \"remove\" ) { //\u5220\u9664 for ( let j = 0 ; j < selectBox . children . length ; j ++ ) { if ( selectBox . children [ j ]. id && selectBox . children [ j ]. id === id ) { selectBox . removeChild ( selectBox . children [ j ]. nextSibling ); selectBox . removeChild ( selectBox . children [ j ]); } } } else if ( option === \"modify\" ) { //\u4fee\u6539 for ( let j = 0 ; j < selectBox . children . length ; j ++ ) { if ( selectBox . children [ j ]. id && selectBox . children [ j ]. id === id ) { selectBox . children [ j ]. nextSibling . innerHTML = value ; selectBox . children [ j ]. value = value ; } } } else { //\u4ea4\u6362\u4f4d\u7f6e let drag = null , drop = null , drag_txt = null ; for ( let j = 0 ; j < selectBox . children . length ; j ++ ) { if ( selectBox . children [ j ]. id && selectBox . children [ j ]. id === id ) { drag = selectBox . children [ j ]; drag_txt = selectBox . children [ j ]. nextSibling ; } else if ( selectBox . children [ j ]. id && selectBox . children [ j ]. id === value ) { drop = selectBox . children [ j ]; } } if ( value === 0 ) { selectBox . appendChild ( drag ); selectBox . appendChild ( drag_txt ); return ; } selectBox . insertBefore ( drag_txt , drop ); selectBox . insertBefore ( drag , drag_txt ); } } } }","title":"2.1 \u590d\u9009\u6846\u66f4\u65b0\u903b\u8f91"},{"location":"developer/web/#22","text":"function createQuestion () { if ( formDataLen === 0 ) { collectionTitle . value = \"\u6587\u4ef6\u6536\u96c6\" ; // collector.value = \"\"; op_name . onclick (); op_sno . onclick (); op_file . onclick (); return ; } collectionTitle . value = Object . values ( formData )[ 0 ]; collector . value = Object . values ( formData )[ 1 ]; deadline . value = Object . values ( formData )[ 2 ]; description . value = Object . values ( formData )[ 3 ]; for ( let i = 0 ; i < formDataLen ; i ++ ) { let q = formDataArr [ i ]; let keys = Object . keys ( formDataArr [ i ]); let values = Object . values ( formDataArr [ i ]); if ( keys [ 0 ]. indexOf ( \"question_name\" ) != - 1 ) { createName ( values [ 0 ], values [ 1 ]); } else if ( keys [ 0 ]. indexOf ( \"question_sno\" ) != - 1 ) { createSno ( values [ 0 ], values [ 1 ]); } else if ( keys [ 0 ]. indexOf ( \"question_file\" ) != - 1 ) { createFile ( values [ 0 ], values [ 1 ]); } else if ( keys [ 0 ]. indexOf ( \"question_radio\" ) != - 1 ) { let k = values [ values . length - 1 ]. toString (). charCodeAt () - \"A\" . charCodeAt (); createSingleChoice ( values [ 0 ], values [ 1 ], 1 , [ k ]); } else if ( keys [ 0 ]. indexOf ( \"question_multipleChoice\" ) != - 1 ) { let cnt = 0 ; let tmp = []; for ( let j = 0 ; j < keys . length ; j ++ ) { if ( keys [ j ]. indexOf ( \"checked_mulans\" ) != - 1 ) { cnt ++ ; tmp . push ( values [ j ]. toString (). charCodeAt () - \"A\" . charCodeAt ()); } } createMultipleChoice ( values [ 0 ], values [ 1 ], cnt , tmp ); } else { let qnOptionNum = 0 ; let qnOptionContent = []; for ( let j = 0 ; j < keys . length ; j ++ ) { if ( keys [ j ]. indexOf ( \"qn_option\" ) != - 1 ) { qnOptionNum ++ ; qnOptionContent . push ( values [ j ]); } } let multi = values [ values . length - 1 ] == \"multiple\" ; createQuestionnaire ( values [ 0 ], values [ 1 ], qnOptionContent , multi ); } } for ( let i = 0 ; i < formDataLen ; i ++ ) { let q = formDataArr [ i ]; let keys = Object . keys ( formDataArr [ i ]); let values = Object . values ( formDataArr [ i ]); let texts = lis [ i ]. querySelectorAll ( \".checked_topic_text\" ); if ( keys [ 0 ]. indexOf ( \"question_file\" ) != - 1 ) { for ( let j = 0 ; j < keys . length ; j ++ ) { if ( keys [ j ]. indexOf ( \"checked_topic\" ) != - 1 ) { for ( let k = 0 ; k < texts . length ; k ++ ) { if ( texts [ k ]. innerHTML == values [ j ]) texts [ k ]. previousSibling . checked = \"checked\" ; } } } } } }","title":"2.2 \u6536\u96c6\u9898\u76ee\u521b\u5efa\u903b\u8f91"},{"location":"developer/web/#23","text":"function onDragStart ( e ) { // \u83b7\u53d6\u5f53\u524d\u62d6\u62fd\u5143\u7d20 dragElement = e . currentTarget ; } function onDragOver ( e ) { // \u9ed8\u8ba4\u7684\u5f53\u4f60dragover\u7684\u65f6\u5019\u4f1a\u963b\u6b62\u4f60\u505adrop\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u9700\u8981\u53d6\u6d88\u8fd9\u4e2a\u9ed8\u8ba4 e . preventDefault (); } function onDrop ( e ) { // \u5f53\u62d6\u52a8\u7ed3\u675f\u7684\u65f6\u5019\uff0c\u7ed9\u62d6\u52a8div\u6240\u5728\u7684\u4f4d\u7f6e\u4e0b\u9762\u7684div\u505adrop\u4e8b\u4ef6 let dropElement = e . currentTarget ; if ( dragElement === dropElement ) return ; //\u4ea4\u6362\u590d\u9009\u6846\u4e2d\u7684\u4f4d\u7f6e let dragId = dragElement . id ; let dropId = dropElement . id ; let dragElementType = dragElement . getElementsByClassName ( \"input-topic\" )[ 0 ]. name ; let dropElementType = dropElement . getElementsByClassName ( \"input-topic\" )[ 0 ]. name ; if ( dragElementType === \"question_name\" || dragElementType === \"question_sno\" ) { if ( dropElementType === \"question_name\" || dropElementType === \"question_sno\" ) { if ( dragElement . nextSibling === dropElement ) { for_checkbox ( \"swap\" , dropId , dragId ); } else { for_checkbox ( \"swap\" , dragId , dropId ); } } else { let next = dropElement . nextSibling ; let nextType = null ; let flag = 0 ; while ( next ) { nextType = next . getElementsByClassName ( \"input-topic\" )[ 0 ]. name ; if ( nextType && ( nextType === \"question_name\" || nextType === \"question_sno\" ) ) { for_checkbox ( \"swap\" , dragId , next . id ); flag = 1 ; break ; } next = next . nextSibling ; } if ( ! flag ) { for_checkbox ( \"swap\" , dragId , 0 ); } } } //\u5b9e\u9645\u4ea4\u6362\u4f4d\u7f6e if ( dragElement != null ) { if ( dragElement . nextSibling === dropElement ) { ul . insertBefore ( dropElement , dragElement ); } else { ul . insertBefore ( dragElement , dropElement ); } } }","title":"2.3 \u53ef\u62d6\u62fd\u5b9e\u73b0\u903b\u8f91"},{"location":"user-guide/FAQ/","text":"\u5e38\u89c1\u95ee\u9898 # 0. \u5feb\u901f\u5b9a\u4f4d # \u6536\u96c6\u8005 FAQ \u63d0\u4ea4\u8005 FAQ 1. \u6536\u96c6\u8005 Q & A # 1.1 \u53d1\u5e03\u6536\u96c6\u540e\uff0c\u63d0\u4ea4\u8005\u80fd\u770b\u5230\u6211\u7ba1\u7406\u7684\u5176\u4ed6\u6587\u4ef6\u5417\uff1f # \u4e0d\u80fd\uff0c\u4ec5 \u60a8\u672c\u4eba \u80fd\u591f\u67e5\u770b\u60a8\u6240\u5c5e\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u3002 1.2 \u6709\u4e9b\u63d0\u4ea4\u8005\u63d0\u4ea4\u4e86\u4e0d\u6b62\u4e00\u6b21\uff0c\u5982\u4f55\u4fdd\u8bc1\u6536\u96c6\u6587\u4ef6\u6b63\u786e\u6027\uff1f # \u5982\u679c\u63d0\u4ea4\u8005\u540e\u4e00\u6b21\u63d0\u4ea4\u7684\u6587\u4ef6\u683c\u5f0f\uff08\u5982\u540e\u7f00\u540d\u4e3a .pdf\uff09\u4e0e\u524d\u4e00\u6b21 \u5b8c\u5168\u76f8\u540c \uff0c\u5219\u540e\u4e00\u6b21\u63d0\u4ea4\u7684\u6587\u4ef6\u4f1a\u8986\u76d6\u524d\u4e00\u6b21\u63d0\u4ea4\u7684\u6587\u4ef6\uff1b\u5982\u679c\u4e0d\u540c\uff0c\u5219\u4f1a\u751f\u6210\u4e00\u4e2a\u6309\u7167\u91cd\u547d\u540d\u89c4\u5219\u547d\u540d\u7684\u6587\u4ef6\u5939\uff0c\u91cc\u9762\u5b58\u653e\u63d0\u4ea4\u8005\u63d0\u4ea4\u7684 \u6240\u6709 \u6587\u4ef6\u3002 \u6587\u4ef6\u8986\u76d6\u7684\u4f8b\u5b50 \u6709\u4e00\u4f4d\u63d0\u4ea4\u8005 \u534e\u5c0f\u79d1 \u7b2c\u4e00\u6b21\u63d0\u4ea4\u4e86\u540d\u4e3a\u201c\u8ba1\u7b97\u673a\u7f51\u7edc\u7b2c\u4e00\u6b21\u4f5c\u4e1a.docx\u201d\u7684\u6587\u4ef6\uff0c\u5728\u622a\u6b62\u65e5\u671f\u524d\u53d1\u73b0\u6709\u9519\u8bef\u9700\u8981\u4fee\u6539\uff0c\u4e8e\u662f\u518d\u6b21\u63d0\u4ea4\u4e86\u4fee\u6539\u540e\u7684\u6587\u4ef6\uff0c\u540d\u79f0\u4ecd\u4e3a\u201c\u8ba1\u7b97\u673a\u7f51\u7edc\u7b2c\u4e00\u6b21\u4f5c\u4e1a.docx\u201d\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u540e\u4e00\u6b21\u63d0\u4ea4\u7684\u6587\u4ef6\u4f1a\u8986\u76d6\u524d\u4e00\u6b21\u7684\u6587\u4ef6\uff0c\u7cfb\u7edf\u4e2d\u6700\u540e\u4fdd\u7559\u7684\u662f\u540e\u4e00\u6b21\u63d0\u4ea4\u7684\u6587\u4ef6\u3002 \u82e5 \u534e\u5c0f\u79d1 \u540e\u4e00\u6b21\u63d0\u4ea4\u7684\u6587\u4ef6\u540d\u79f0\u4e3a\u201c\u8ba1\u7b97\u673a\u7f51\u7edc\u7b2c\u4e00\u6b21\u4f5c\u4e1a.doc\u201d\uff0c\u5c3d\u7ba1\u4e24\u6b21\u63d0\u4ea4\u7684\u6587\u4ef6\u540d\u79f0\u76f8\u540c\uff0c\u7531\u4e8e\u540e\u7f00\u540d\u4e0d\u540c\uff08\u7b2c\u4e00\u6b21\u662f .docx\uff0c\u7b2c\u4e8c\u6b21\u662f .doc\uff09\uff0c\u7cfb\u7edf\u4f1a\u5efa\u7acb\u4e00\u4e2a\u540d\u4e3a\u201c\u8ba1\u7b97\u673a\u7f51\u7edc\u7b2c\u4e00\u6b21\u4f5c\u4e1a\u201d\u7684\u76ee\u5f55\uff0c\u5c06\u4e24\u6b21\u63d0\u4ea4\u7684\u6587\u4ef6\u90fd\u4fdd\u5b58\u5728\u5176\u4e2d\uff0c\u6700\u7ec8\u5f62\u6210\u5982\u4e0b\u76ee\u5f55\u7ed3\u6784\uff1a \u8ba1\u7b97\u673a\u7f51\u7edc\u7b2c\u4e00\u6b21\u4f5c\u4e1a/ \u251c\u2500\u2500 \u8ba1\u7b97\u673a\u7f51\u7edc\u7b2c\u4e00\u6b21\u4f5c\u4e1a.doc \u2514\u2500\u2500 \u8ba1\u7b97\u673a\u7f51\u7edc\u7b2c\u4e00\u6b21\u4f5c\u4e1a.docx 1.3 \u5982\u4f55\u83b7\u53d6\u6536\u96c6\u7684\u7edf\u8ba1\u4fe1\u606f\uff1f # Tip \u67e5\u770b\u6c47\u603b \u6309\u94ae\u5728\u6536\u96c6\u8be6\u60c5\u9875\u9762\u53f3\u4fa7\u3002 \u5728\u6536\u96c6\u622a\u6b62\u540e\uff0c\u7cfb\u7edf\u5c06\u5728\u60a8\u5bf9\u5e94\u6536\u96c6\u7684\u6587\u4ef6\u5939\u4e2d\u751f\u6210\u4e00\u4e2a Excel \u8868\u683c\uff0c\u8bb0\u5f55\u6536\u96c6\u7684\u76f8\u5173\u4fe1\u606f\u3002\u60a8\u53ef\u4ee5\u5728\u6536\u96c6\u8be6\u60c5\u9875\u9762\u70b9\u51fb \u67e5\u770b\u6c47\u603b \u6309\u94ae\u4e0b\u8f7d\u8be5 Excel \u8868\u683c\u3002 1.4 \u5982\u4f55\u5c06\u6536\u96c6\u5230\u7684\u6587\u4ef6\u4fdd\u5b58\u5230\u672c\u5730\uff1f # Tip \u4e0b\u8f7d\u6587\u4ef6 \u6309\u94ae\u5728\u6536\u96c6\u8be6\u60c5\u9875\u9762\u53f3\u4fa7\u3002 \u60a8\u53ef\u4ee5\u5728\u6536\u96c6\u8be6\u60c5\u9875\u9762\u70b9\u51fb \u4e0b\u8f7d\u6587\u4ef6 \u6309\u94ae\u624b\u52a8\u83b7\u53d6\u5f53\u524d\u6536\u96c6\u5230\u7684\u6240\u6709\u6587\u4ef6\u7684\u538b\u7f29\u5305\uff1b\u5728\u6536\u96c6\u622a\u6b62\u540e\uff0c\u7cfb\u7edf\u4f1a\u4f9d\u636e\u60a8\u6ce8\u518c\u7684\u90ae\u7bb1\u4fe1\u606f\uff0c\u81ea\u52a8\u5c06\u5bf9\u5e94\u7684\u6536\u96c6\u4ee5 zip \u538b\u7f29\u5305\u7684\u5f62\u5f0f\u901a\u8fc7 \u90ae\u4ef6 \u53d1\u9001\u5230\u60a8\u7684\u90ae\u7bb1\u3002 2. \u63d0\u4ea4\u8005 Q & A # 2.1 \u6587\u4ef6\u9700\u8981\u547d\u540d\u540e\u518d\u4e0a\u4f20\u5417\uff1f # \u5982\u679c\u6536\u96c6\u8005\u8bbe\u7f6e\u4e86\u91cd\u547d\u540d\u89c4\u5219\uff0c\u7cfb\u7edf\u4f1a\u6839\u636e\u60a8\u586b\u5199\u7684\u63d0\u4ea4\u4fe1\u606f\u81ea\u52a8\u91cd\u547d\u540d\u63d0\u4ea4\u6587\u4ef6\uff0c\u60a8 \u65e0\u9700\u5728\u610f \u6587\u4ef6\u7684\u547d\u540d\u3002 2.2 \u63d0\u4ea4\u4e86\u9519\u8bef\u7684\u6587\u4ef6\u600e\u4e48\u529e\uff1f # \u91cd\u65b0\u63d0\u4ea4\u6b63\u786e\u7684\u6587\u4ef6\uff0c\u5e76\u586b\u5199\u5b8c\u5168\u76f8\u540c\u7684\u63d0\u4ea4\u4fe1\u606f\u5373\u53ef\u3002\u6536\u4ef6\u7bb1\u7cfb\u7edf\u5c06 \u667a\u80fd\u5408\u5e76 \u63d0\u4ea4\u4fe1\u606f\u5b8c\u5168\u4e00\u81f4\u7684\u6587\u4ef6\u3002 2.3 \u63d0\u4ea4\u4fe1\u606f\u586b\u5199\u9519\u8bef\u600e\u4e48\u529e\uff1f # \u60a8\u53ef\u4ee5\u5728\u6536\u96c6\u622a\u6b62\u524d\uff0c\u586b\u5199\u6b63\u786e\u7684\u63d0\u4ea4\u4fe1\u606f \u518d\u6b21\u63d0\u4ea4 \u3002 2.4 \u5176\u4ed6\u4eba\u80fd\u770b\u5230\u6211\u63d0\u4ea4\u7684\u6587\u4ef6\u5417\uff1f # \u53ea\u6709 \u6536\u96c6\u4efb\u52a1\u7684\u53d1\u5e03\u8005 \u548c \u60a8\u672c\u4eba \u6709\u6743\u9650\u67e5\u770b\u60a8\u63d0\u4ea4\u7684\u6587\u4ef6\uff0c\u8bf7\u653e\u5fc3\u63d0\u4ea4\u3002","title":"FAQ"},{"location":"user-guide/FAQ/#_1","text":"","title":"\u5e38\u89c1\u95ee\u9898"},{"location":"user-guide/FAQ/#0","text":"\u6536\u96c6\u8005 FAQ \u63d0\u4ea4\u8005 FAQ","title":"0. \u5feb\u901f\u5b9a\u4f4d"},{"location":"user-guide/FAQ/#1-q-a","text":"","title":"1. \u6536\u96c6\u8005 Q &amp; A"},{"location":"user-guide/FAQ/#11","text":"\u4e0d\u80fd\uff0c\u4ec5 \u60a8\u672c\u4eba \u80fd\u591f\u67e5\u770b\u60a8\u6240\u5c5e\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u3002","title":"1.1 \u53d1\u5e03\u6536\u96c6\u540e\uff0c\u63d0\u4ea4\u8005\u80fd\u770b\u5230\u6211\u7ba1\u7406\u7684\u5176\u4ed6\u6587\u4ef6\u5417\uff1f"},{"location":"user-guide/FAQ/#12","text":"\u5982\u679c\u63d0\u4ea4\u8005\u540e\u4e00\u6b21\u63d0\u4ea4\u7684\u6587\u4ef6\u683c\u5f0f\uff08\u5982\u540e\u7f00\u540d\u4e3a .pdf\uff09\u4e0e\u524d\u4e00\u6b21 \u5b8c\u5168\u76f8\u540c \uff0c\u5219\u540e\u4e00\u6b21\u63d0\u4ea4\u7684\u6587\u4ef6\u4f1a\u8986\u76d6\u524d\u4e00\u6b21\u63d0\u4ea4\u7684\u6587\u4ef6\uff1b\u5982\u679c\u4e0d\u540c\uff0c\u5219\u4f1a\u751f\u6210\u4e00\u4e2a\u6309\u7167\u91cd\u547d\u540d\u89c4\u5219\u547d\u540d\u7684\u6587\u4ef6\u5939\uff0c\u91cc\u9762\u5b58\u653e\u63d0\u4ea4\u8005\u63d0\u4ea4\u7684 \u6240\u6709 \u6587\u4ef6\u3002 \u6587\u4ef6\u8986\u76d6\u7684\u4f8b\u5b50 \u6709\u4e00\u4f4d\u63d0\u4ea4\u8005 \u534e\u5c0f\u79d1 \u7b2c\u4e00\u6b21\u63d0\u4ea4\u4e86\u540d\u4e3a\u201c\u8ba1\u7b97\u673a\u7f51\u7edc\u7b2c\u4e00\u6b21\u4f5c\u4e1a.docx\u201d\u7684\u6587\u4ef6\uff0c\u5728\u622a\u6b62\u65e5\u671f\u524d\u53d1\u73b0\u6709\u9519\u8bef\u9700\u8981\u4fee\u6539\uff0c\u4e8e\u662f\u518d\u6b21\u63d0\u4ea4\u4e86\u4fee\u6539\u540e\u7684\u6587\u4ef6\uff0c\u540d\u79f0\u4ecd\u4e3a\u201c\u8ba1\u7b97\u673a\u7f51\u7edc\u7b2c\u4e00\u6b21\u4f5c\u4e1a.docx\u201d\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u540e\u4e00\u6b21\u63d0\u4ea4\u7684\u6587\u4ef6\u4f1a\u8986\u76d6\u524d\u4e00\u6b21\u7684\u6587\u4ef6\uff0c\u7cfb\u7edf\u4e2d\u6700\u540e\u4fdd\u7559\u7684\u662f\u540e\u4e00\u6b21\u63d0\u4ea4\u7684\u6587\u4ef6\u3002 \u82e5 \u534e\u5c0f\u79d1 \u540e\u4e00\u6b21\u63d0\u4ea4\u7684\u6587\u4ef6\u540d\u79f0\u4e3a\u201c\u8ba1\u7b97\u673a\u7f51\u7edc\u7b2c\u4e00\u6b21\u4f5c\u4e1a.doc\u201d\uff0c\u5c3d\u7ba1\u4e24\u6b21\u63d0\u4ea4\u7684\u6587\u4ef6\u540d\u79f0\u76f8\u540c\uff0c\u7531\u4e8e\u540e\u7f00\u540d\u4e0d\u540c\uff08\u7b2c\u4e00\u6b21\u662f .docx\uff0c\u7b2c\u4e8c\u6b21\u662f .doc\uff09\uff0c\u7cfb\u7edf\u4f1a\u5efa\u7acb\u4e00\u4e2a\u540d\u4e3a\u201c\u8ba1\u7b97\u673a\u7f51\u7edc\u7b2c\u4e00\u6b21\u4f5c\u4e1a\u201d\u7684\u76ee\u5f55\uff0c\u5c06\u4e24\u6b21\u63d0\u4ea4\u7684\u6587\u4ef6\u90fd\u4fdd\u5b58\u5728\u5176\u4e2d\uff0c\u6700\u7ec8\u5f62\u6210\u5982\u4e0b\u76ee\u5f55\u7ed3\u6784\uff1a \u8ba1\u7b97\u673a\u7f51\u7edc\u7b2c\u4e00\u6b21\u4f5c\u4e1a/ \u251c\u2500\u2500 \u8ba1\u7b97\u673a\u7f51\u7edc\u7b2c\u4e00\u6b21\u4f5c\u4e1a.doc \u2514\u2500\u2500 \u8ba1\u7b97\u673a\u7f51\u7edc\u7b2c\u4e00\u6b21\u4f5c\u4e1a.docx","title":"1.2 \u6709\u4e9b\u63d0\u4ea4\u8005\u63d0\u4ea4\u4e86\u4e0d\u6b62\u4e00\u6b21\uff0c\u5982\u4f55\u4fdd\u8bc1\u6536\u96c6\u6587\u4ef6\u6b63\u786e\u6027\uff1f"},{"location":"user-guide/FAQ/#13","text":"Tip \u67e5\u770b\u6c47\u603b \u6309\u94ae\u5728\u6536\u96c6\u8be6\u60c5\u9875\u9762\u53f3\u4fa7\u3002 \u5728\u6536\u96c6\u622a\u6b62\u540e\uff0c\u7cfb\u7edf\u5c06\u5728\u60a8\u5bf9\u5e94\u6536\u96c6\u7684\u6587\u4ef6\u5939\u4e2d\u751f\u6210\u4e00\u4e2a Excel \u8868\u683c\uff0c\u8bb0\u5f55\u6536\u96c6\u7684\u76f8\u5173\u4fe1\u606f\u3002\u60a8\u53ef\u4ee5\u5728\u6536\u96c6\u8be6\u60c5\u9875\u9762\u70b9\u51fb \u67e5\u770b\u6c47\u603b \u6309\u94ae\u4e0b\u8f7d\u8be5 Excel \u8868\u683c\u3002","title":"1.3 \u5982\u4f55\u83b7\u53d6\u6536\u96c6\u7684\u7edf\u8ba1\u4fe1\u606f\uff1f"},{"location":"user-guide/FAQ/#14","text":"Tip \u4e0b\u8f7d\u6587\u4ef6 \u6309\u94ae\u5728\u6536\u96c6\u8be6\u60c5\u9875\u9762\u53f3\u4fa7\u3002 \u60a8\u53ef\u4ee5\u5728\u6536\u96c6\u8be6\u60c5\u9875\u9762\u70b9\u51fb \u4e0b\u8f7d\u6587\u4ef6 \u6309\u94ae\u624b\u52a8\u83b7\u53d6\u5f53\u524d\u6536\u96c6\u5230\u7684\u6240\u6709\u6587\u4ef6\u7684\u538b\u7f29\u5305\uff1b\u5728\u6536\u96c6\u622a\u6b62\u540e\uff0c\u7cfb\u7edf\u4f1a\u4f9d\u636e\u60a8\u6ce8\u518c\u7684\u90ae\u7bb1\u4fe1\u606f\uff0c\u81ea\u52a8\u5c06\u5bf9\u5e94\u7684\u6536\u96c6\u4ee5 zip \u538b\u7f29\u5305\u7684\u5f62\u5f0f\u901a\u8fc7 \u90ae\u4ef6 \u53d1\u9001\u5230\u60a8\u7684\u90ae\u7bb1\u3002","title":"1.4 \u5982\u4f55\u5c06\u6536\u96c6\u5230\u7684\u6587\u4ef6\u4fdd\u5b58\u5230\u672c\u5730\uff1f"},{"location":"user-guide/FAQ/#2-q-a","text":"","title":"2. \u63d0\u4ea4\u8005 Q &amp; A"},{"location":"user-guide/FAQ/#21","text":"\u5982\u679c\u6536\u96c6\u8005\u8bbe\u7f6e\u4e86\u91cd\u547d\u540d\u89c4\u5219\uff0c\u7cfb\u7edf\u4f1a\u6839\u636e\u60a8\u586b\u5199\u7684\u63d0\u4ea4\u4fe1\u606f\u81ea\u52a8\u91cd\u547d\u540d\u63d0\u4ea4\u6587\u4ef6\uff0c\u60a8 \u65e0\u9700\u5728\u610f \u6587\u4ef6\u7684\u547d\u540d\u3002","title":"2.1 \u6587\u4ef6\u9700\u8981\u547d\u540d\u540e\u518d\u4e0a\u4f20\u5417\uff1f"},{"location":"user-guide/FAQ/#22","text":"\u91cd\u65b0\u63d0\u4ea4\u6b63\u786e\u7684\u6587\u4ef6\uff0c\u5e76\u586b\u5199\u5b8c\u5168\u76f8\u540c\u7684\u63d0\u4ea4\u4fe1\u606f\u5373\u53ef\u3002\u6536\u4ef6\u7bb1\u7cfb\u7edf\u5c06 \u667a\u80fd\u5408\u5e76 \u63d0\u4ea4\u4fe1\u606f\u5b8c\u5168\u4e00\u81f4\u7684\u6587\u4ef6\u3002","title":"2.2 \u63d0\u4ea4\u4e86\u9519\u8bef\u7684\u6587\u4ef6\u600e\u4e48\u529e\uff1f"},{"location":"user-guide/FAQ/#23","text":"\u60a8\u53ef\u4ee5\u5728\u6536\u96c6\u622a\u6b62\u524d\uff0c\u586b\u5199\u6b63\u786e\u7684\u63d0\u4ea4\u4fe1\u606f \u518d\u6b21\u63d0\u4ea4 \u3002","title":"2.3 \u63d0\u4ea4\u4fe1\u606f\u586b\u5199\u9519\u8bef\u600e\u4e48\u529e\uff1f"},{"location":"user-guide/FAQ/#24","text":"\u53ea\u6709 \u6536\u96c6\u4efb\u52a1\u7684\u53d1\u5e03\u8005 \u548c \u60a8\u672c\u4eba \u6709\u6743\u9650\u67e5\u770b\u60a8\u63d0\u4ea4\u7684\u6587\u4ef6\uff0c\u8bf7\u653e\u5fc3\u63d0\u4ea4\u3002","title":"2.4 \u5176\u4ed6\u4eba\u80fd\u770b\u5230\u6211\u63d0\u4ea4\u7684\u6587\u4ef6\u5417\uff1f"},{"location":"user-guide/collector/","text":"\u6536\u96c6\u8005 # 1. \u6ce8\u518c\u767b\u5f55 # Tip \u767b\u5f55 \u6309\u94ae\u4f4d\u4e8e\u4e3b\u9875\u53f3\u4e0a\u89d2\u3002 \u5df2\u6709\u5e10\u53f7 \u6253\u5f00\u561f\u561f\u53ef\u6536\u4ef6\u7bb1 Web \u7aef\u7f51\u9875\uff0c\u70b9\u51fb \u767b\u5f55 \u8fdb\u5165\u767b\u5f55\u9875\u9762\uff0c\u586b\u5199\u6ce8\u518c\u5e10\u53f7\u7684\u7528\u6237\u540d\u3001\u5bc6\u7801\uff0c\u70b9\u51fb \u767b\u5f55 \u6309\u94ae\u5373\u53ef\u4f7f\u7528\u3002 Tip \u6ce8\u518c \u6309\u94ae\u4f4d\u4e8e\u4e3b\u9875\u53f3\u4e0a\u89d2\u3002 \u5c1a\u672a\u6ce8\u518c \u6253\u5f00\u561f\u561f\u53ef\u6536\u4ef6\u7bb1 Web \u7aef\u7f51\u9875\uff0c\u70b9\u51fb \u6ce8\u518c \u8fdb\u5165\u6ce8\u518c\u9875\u9762\uff0c\u586b\u5199\u7528\u6237\u540d\u3001\u5bc6\u7801\u7b49\u76f8\u5173\u4fe1\u606f\uff0c\u6ce8\u518c\u6210\u529f\u540e\u518d\u767b\u5f55\u4f7f\u7528\u3002 \u6ce8\u518c\u65f6\u54ea\u4e9b\u4fe1\u606f\u662f\u5fc5\u987b\u586b\u5199\u7684\uff1f \u7528\u6237\u540d\u3001\u5bc6\u7801\u3001\u90ae\u7bb1\u4e3a\u5fc5\u586b\u9879\u3002\u6388\u6743\u7801\u53ef\u4ee5\u540e\u7eed\u5728\u4e2a\u4eba\u4fe1\u606f\u9875\u9762\u6dfb\u52a0\u3002 2. \u521b\u5efa\u6536\u96c6 # Tip \u521b\u5efa\u6536\u96c6 \u6309\u94ae\u4f4d\u4e8e\u4e3b\u9875\u5de6\u4e0a\u89d2\u548c\u53f3\u4fa7\u3002 \u70b9\u51fb \u521b\u5efa\u6536\u96c6 \u6309\u94ae\uff0c\u8fdb\u5165\u521b\u5efa\u6536\u96c6\u754c\u9762\u3002 \u6536\u96c6\u4efb\u52a1\u9700\u8981\u8bbe\u7f6e\u7684\u4fe1\u606f\u5927\u81f4\u5305\u62ec \u6536\u96c6\u6807\u9898 \u3001 \u6536\u96c6\u8005 \u3001 \u622a\u6b62\u65f6\u95f4 \u3001 \u8be6\u60c5\u63cf\u8ff0 \u4ee5\u53ca \u5177\u4f53\u7684\u9898\u76ee \u3002 \u521b\u5efa\u6536\u96c6\u7684\u9875\u9762\u5982\u4e0b\u56fe\u6240\u793a\u3002\u7cfb\u7edf\u9ed8\u8ba4\u6dfb\u52a0\u4e86\u4e24\u4e2a\u586b\u7a7a\u9898\uff1a\u201c\u59d3\u540d\u201d\u3001\u201c\u5b66\u53f7\u201d\u548c\u4e00\u4e2a\u6587\u4ef6\u6536\u96c6\u9898\u201c\u6587\u4ef6\u201d\u3002 2.1 \u6536\u96c6\u6807\u9898 # \u8bbe\u7f6e\u6536\u96c6\u7684\u540d\u79f0\uff0c\u9ed8\u8ba4\u4e3a\u201c\u6587\u4ef6\u6536\u96c6\u201d\u3002 2.2 \u6536\u96c6\u8005 # \u8bbe\u7f6e\u6536\u96c6\u8005\u3002\u7528\u4e8e\u63d0\u4ea4\u8005\u9274\u522b\u521b\u5efa\u6536\u96c6\u7684\u4eba\u5458\u548c\u4fe1\u606f\u63d0\u4ea4\u6e20\u9053\uff0c\u9632\u6b62\u4fe1\u606f\u6cc4\u6f0f\u3002 2.3 \u622a\u6b62\u65f6\u95f4 # \u8bbe\u7f6e\u6536\u96c6\u7684\u622a\u6b62\u65f6\u95f4\u3002\u5728\u622a\u6b62\u65e5\u671f\u4e4b\u524d\u7684\u63d0\u4ea4\u89c6\u4e3a\u6709\u6548\u63d0\u4ea4\uff0c\u622a\u6b62\u65e5\u671f\u4e4b\u540e\u8be5\u6536\u96c6\u72b6\u6001\u4f1a\u7531 \u8fdb\u884c\u4e2d \u8f6c\u4e3a \u5df2\u622a\u6b62 \u3002 Warning \u622a\u6b62\u65f6\u95f4\u4e0d\u5f97\u65e9\u4e8e \u5f53\u524d\u65f6\u95f4 \uff0c\u5426\u5219\u5c06\u65e0\u6cd5\u521b\u5efa\u6536\u96c6\u3002 2.4 \u8be6\u60c5\u63cf\u8ff0 # \u8bbe\u7f6e\u6536\u96c6\u7684\u76f8\u5173\u63cf\u8ff0\u4fe1\u606f\u3002\u5982\u5411\u63d0\u4ea4\u8005\u63d0\u4f9b\u76f8\u5173\u8bf4\u660e\uff0c\u4ea4\u5f85\u5404\u4e2a\u9898\u76ee\u7684\u63d0\u4ea4\u683c\u5f0f\u7b49\u3002 2.5 \u5177\u4f53\u9898\u76ee # \u6536\u96c6\u95ee\u5377\u4e2d\u53ef\u4ee5\u521b\u5efa\u591a\u79cd\u7c7b\u578b\u7684\u9898\u76ee\uff0c\u5305\u62ec \u586b\u7a7a\u9898 \u3001 \u9009\u62e9\u9898 \u3001 \u6587\u4ef6\u9898 \u548c \u95ee\u5377\u9898 \u3002\u6240\u6709\u9898\u76ee\u7684\u53f3\u4e0b\u89d2\u6709 \u5220\u9664\u9898\u76ee \u6309\u94ae\uff0c\u70b9\u51fb\u53ef\u4ee5\u53bb\u6389\u5bf9\u5e94\u7684\u9898\u76ee\u3002\u9898\u76ee\u652f\u6301 \u62d6\u62fd\u6392\u5e8f \uff0c\u53ef\u4ee5\u901a\u8fc7\u9f20\u6807\u6309\u4f4f\u62d6\u52a8\u7684\u65b9\u5f0f\u8bbe\u7f6e\u9898\u76ee\u5728\u95ee\u5377\u4e0a\u7684\u6392\u5217\u987a\u5e8f\u3002 Info \u62d6\u62fd\u6392\u5e8f\u8bc6\u522b\u6bd4\u8f83\u4e25\u683c\uff0c\u9700\u8981\u88ab\u62d6\u52a8\u7684\u9898\u76ee \u8986\u76d6 \u5f85\u653e\u7f6e\u4f4d\u7f6e\u7684\u9898\u76ee\u6240\u5728\u533a\u57df\u624d\u53ef\u6267\u884c\u3002 2.5.1 \u586b\u7a7a\u9898 # \u9700\u8981\u8bbe\u7f6e\u9898\u76ee\u540d\u79f0\u3001\u8be6\u60c5\u63cf\u8ff0\u8fd9\u4e24\u9879\u4fe1\u606f\u3002 \u6536\u96c6\u53d1\u5e03\u540e\uff0c\u63d0\u4ea4\u8005\u5728\u4e0b\u65b9\u7684\u6587\u672c\u6846\u5185\u586b\u5199\u4fe1\u606f\u3002 2.5.2 \u9009\u62e9\u9898 # \u9009\u62e9\u9898\u5206\u4e3a\u5355\u9009\u9898\u548c\u591a\u9009\u9898\u4e24\u79cd\u7c7b\u578b\u3002 \u5355\u9009\u9898 \u9700\u8981\u8bbe\u7f6e\u9898\u76ee\u540d\u79f0\u3001\u8be6\u60c5\u63cf\u8ff0\u548c\u6b63\u786e\u9009\u9879\uff0c\u9009\u9879\u4fe1\u606f\u9700\u8981\u5728\u8be6\u60c5\u63cf\u8ff0\u4e2d\u7ed9\u51fa\u3002\u70b9\u51fb\u6b63\u786e\u9009\u9879\u524d\u7684\u5706\u5f62\u6846\uff0c\u53d8\u4e3a \u5b9e\u5fc3 \u4ee3\u8868\u9009\u4e2d\u8be5\u9879\u3002\u5355\u9009\u9898\u53ea\u80fd\u8bbe\u7f6e 1 \u4e2a\u6b63\u786e\u9009\u9879\uff0c\u6700\u591a\u8bbe\u7f6e 4 \u4e2a\u53ef\u9009\u9879\u3002 \u591a\u9009\u9898 \u9700\u8981\u8bbe\u7f6e\u9898\u76ee\u540d\u79f0\u3001\u8be6\u60c5\u63cf\u8ff0\u548c\u6b63\u786e\u9009\u9879\uff0c\u9009\u9879\u4fe1\u606f\u9700\u8981\u5728\u8be6\u60c5\u63cf\u8ff0\u4e2d\u7ed9\u51fa\u3002\u70b9\u51fb\u6b63\u786e\u9009\u9879\u524d\u7684\u5706\u5f62\u6846\uff0c\u53d8\u4e3a \u5b9e\u5fc3 \u4ee3\u8868\u9009\u4e2d\u8be5\u9879\u3002\u591a\u9009\u9898\u9700\u8981\u8bbe\u7f6e\u81f3\u5c11 2 \u4e2a\u6b63\u786e\u9009\u9879\uff0c\u6700\u591a\u8bbe\u7f6e 4 \u4e2a\u53ef\u9009\u9879\u3002 2.5.3 \u6587\u4ef6\u9898 # \u9700\u8981\u8bbe\u7f6e\u9898\u76ee\u540d\u79f0\u3001\u8be6\u60c5\u63cf\u8ff0\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u91cd\u547d\u540d\u89c4\u5219\u3002 \u91cd\u547d\u540d\u89c4\u5219\u7528\u4e8e\u7edf\u4e00\u63d0\u4ea4\u8005\u4e0a\u4f20\u7684\u6587\u4ef6\u547d\u540d\uff0c\u65b9\u4fbf\u6574\u7406\u3002\u547d\u540d\u89c4\u5219\u6765\u81ea\u4e8e\u95ee\u5377\u4e2d\u5176\u4ed6\u586b\u7a7a\u9898\u7684\u9898\u76ee\u540d\u79f0\uff0c\u6700\u7ec8\u6536\u96c6\u5230\u7684\u6587\u4ef6\u4f1a\u6309\u7167\u5f62\u5982 \u9898\u76ee1 + \u9898\u76ee2 \u7684\u683c\u5f0f\u8fdb\u884c\u91cd\u547d\u540d\u3002 \u91cd\u547d\u540d\u89c4\u5219\u793a\u4f8b \u4f8b\u5982\uff0c\u95ee\u5377\u4e2d\u8bbe\u7f6e\u4e86\u4e09\u4e2a\u9898\u76ee\uff1a\u201c\u59d3\u540d\u201d\u3001\u201c\u5b66\u53f7\u201d\u548c\u201c\u6587\u4ef6\u201d\uff0c\u5219\u201c\u6587\u4ef6\u201d\u9898\u76ee\u7684\u91cd\u547d\u540d\u89c4\u5219\u53ef\u4ee5\u8bbe\u5b9a\u4e3a\uff1a \u59d3\u540d \u5b66\u53f7 \u59d3\u540d + \u5b66\u53f7 \u91cd\u547d\u540d\u89c4\u5219\u4e2d\u5404\u4e2a\u9898\u76ee\u7684\u6392\u5217\u987a\u5e8f\u53d6\u51b3\u4e8e\u5b83\u4eec\u5728\u95ee\u5377\u4e0a\u4e0b\u6587\u4e2d\u7684\u76f8\u5bf9\u4f4d\u7f6e\u3002 2.5.4 \u95ee\u5377\u9898 # \u9700\u8981\u8bbe\u7f6e\u9898\u76ee\u540d\u79f0\u3001\u8be6\u60c5\u63cf\u8ff0\u3001\u5404\u95ee\u5377\u9009\u9879\u7684\u63cf\u8ff0\u4fe1\u606f\u3002\u8fd9\u79cd\u7c7b\u578b\u9002\u7528\u4e8e\u5355\u4e2a\u9009\u9879\u7684\u63cf\u8ff0\u4fe1\u606f\u6bd4\u8f83\u957f\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u89c6\u4f5c\u9009\u62e9\u9898\u7684\u6269\u5c55\u3002 3. \u53d1\u5e03\u6536\u96c6 # \u7f16\u8f91\u5b8c\u6bd5\u540e\uff0c\u70b9\u51fb\u6700\u4e0b\u65b9\u7684 \u521b\u5efa \u6309\u94ae\uff0c\u5982\u679c\u6240\u6709\u5fc5\u586b\u9879\u90fd\u8bbe\u7f6e\u6b63\u786e\u5c31\u80fd\u521b\u5efa\u6536\u96c6\uff0c\u5426\u5219\u7cfb\u7edf\u4f1a\u63d0\u793a\u54ea\u4e9b\u9879\u76ee\u662f\u5fc5\u987b\u586b\u5199\u7684\uff0c\u4fee\u6539\u6b63\u786e\u540e\u624d\u80fd\u521b\u5efa\u3002\u521b\u5efa\u5b8c\u6bd5\u7684\u6536\u96c6\u4f1a\u751f\u6210\u4e00\u4e2a \u6536\u96c6\u94fe\u63a5 \uff0c\u901a\u8fc7\u70b9\u51fb \u5206\u4eab \u6309\u94ae\u53ef\u4ee5\u5c06\u6536\u96c6\u94fe\u63a5\u53d1\u9001\u7ed9\u63d0\u4ea4\u8005\u8fdb\u884c\u63d0\u4ea4\u3002 \u521b\u5efa\u6536\u96c6\u65f6\u54ea\u4e9b\u9879\u76ee\u662f\u5fc5\u987b\u586b\u5199\u7684\uff1f \u6536\u96c6\u6807\u9898 \u3001 \u6536\u96c6\u8005 \u3001 \u622a\u6b62\u65f6\u95f4 \u4e3a\u5fc5\u586b\u9879\u3002 4. \u67e5\u770b\u6536\u96c6 # Tip \u67e5\u770b\u6536\u96c6 \u6309\u94ae\u4f4d\u4e8e\u4e3b\u9875\u5de6\u4e0a\u89d2\u3002 \u521b\u5efa\u597d\u7684\u6536\u96c6\u4f1a\u5728\u201c\u6211\u7684\u6536\u96c6\u201d\u9875\u9762\u4e2d\u663e\u793a\uff0c\u60a8\u53ef\u4ee5\u70b9\u51fb \u6536\u96c6\u8bb0\u5f55 \u6309\u94ae\u8fdb\u5165\u8be5\u9875\u9762\uff0c\u6839\u636e\u6536\u96c6\u6807\u9898\u7b49\u76f8\u5173\u4fe1\u606f\u5feb\u901f\u67e5\u627e\u6240\u9700\u8981\u7684\u6536\u96c6\u3002 \u6bcf\u4e2a\u6536\u96c6\u90fd\u6709 5 \u79cd\u64cd\u4f5c\u6309\u94ae\uff1a\u201c\u5206\u4eab\u201d\u3001\u201c\u7edf\u8ba1\u201d\u3001\u201c\u7f16\u8f91\u201d\uff08\u5df2\u622a\u6b62\u4e3a\u201c\u91cd\u542f\u201d\uff09\u3001\u590d\u5236\u3001\u505c\u6b62\uff08\u5df2\u622a\u6b62\u4e3a\u201c\u5220\u9664\u201d\uff09\u3002 \u70b9\u51fb \u7edf\u8ba1 \u6309\u94ae\u53ef\u4ee5\u8fdb\u5165\u5bf9\u5e94\u6536\u96c6\u7684\u201c\u6536\u96c6\u8be6\u60c5\u201d\u9875\u9762\u3002 \u201c\u6536\u96c6\u8be6\u60c5\u201d\u9875\u9762\u6709\u4e09\u79cd\u663e\u793a\u6a21\u5f0f\uff1a\u5e94\u4ea4\u540d\u5355\u3001\u63d0\u4ea4\u8bb0\u5f55\u3001\u7edf\u8ba1\u56fe\u8868\u3002 \u5e94\u4ea4\u540d\u5355\u754c\u9762\uff0c\u53ef\u4ee5\u6dfb\u52a0\u5f53\u524d\u6536\u96c6\u7684\u5e94\u4ea4\u8005\u540d\u5355\uff0c\u7cfb\u7edf\u81ea\u52a8\u751f\u6210 .csv \u6587\u4ef6 \u63d0\u4ea4\u8bb0\u5f55\u754c\u9762\uff0c\u53ef\u4ee5\u67e5\u770b\u6240\u6709\u63d0\u4ea4\u4fe1\u606f\u7684\u65f6\u95f4\u3001\u63d0\u4ea4\u8005\u7b49 \u7edf\u8ba1\u56fe\u8868\u754c\u9762\uff0c\u53ef\u4ee5\u67e5\u770b\u9009\u62e9\u9898\u3001\u95ee\u5377\u9898\u7684\u7edf\u8ba1\u60c5\u51b5 5. \u4fee\u6539\u6536\u96c6 # \u5982\u679c\u9700\u8981\u4fee\u6539\u5df2\u521b\u5efa\u7684\u6536\u96c6\uff0c\u53ef\u4ee5\u5728\u6536\u96c6\u8be6\u60c5\u754c\u9762\u70b9\u51fb \u7f16\u8f91 \u6309\u94ae\uff0c\u8fdb\u5165\u7f16\u8f91\u72b6\u6001\u3002\u5904\u4e8e\u7f16\u8f91\u72b6\u6001\u65f6\uff0c\u53ef\u4ee5\u4fee\u6539\u6536\u96c6\u6807\u9898\u3001\u6536\u96c6\u8005\u3001\u622a\u6b62\u65f6\u95f4\u3001\u8be6\u60c5\u63cf\u8ff0\uff0c\u4ee5\u53ca\u9898\u76ee\u7684\u5177\u4f53\u5185\u5bb9\uff0c\u4f46 \u4e0d\u80fd\u5220\u9664\u3001\u6dfb\u52a0\u9898\u76ee\u6216\u8c03\u6362\u9898\u76ee\u7684\u4f4d\u7f6e \u3002\u7f16\u8f91\u5b8c\u6bd5\u540e\uff0c\u70b9\u51fb\u6700\u4e0b\u65b9\u7684 \u7f16\u8f91\u5b8c\u6210 \u6309\u94ae\u5373\u53ef\u63d0\u4ea4\u7f16\u8f91\uff0c\u5b8c\u6210\u4fee\u6539\u3002 Note \u4fee\u6539\u6536\u96c6\u4e0d\u4f1a\u5f71\u54cd\u5df2\u6536\u95ee\u5377\u3002 6. \u590d\u5236\u6536\u96c6 # \u5982\u679c\u9700\u8981\u65b0\u5efa\u548c\u5df2\u521b\u5efa\u7684\u6536\u96c6 \u7ed3\u6784\u76f8\u540c\u6216\u7c7b\u4f3c \u7684\u6536\u96c6\uff0c\u53ef\u4ee5\u5728\u6536\u96c6\u8be6\u60c5\u754c\u9762\u70b9\u51fb \u590d\u5236 \u6309\u94ae\uff0c\u7cfb\u7edf\u4f1a\u6309\u7167\u5bf9\u5e94\u7684\u6536\u96c6\u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u5b8c\u5168\u76f8\u540c\u7684\u6536\u96c6\uff0c\u60a8\u53ef\u4ee5\u5728\u6b64\u57fa\u7840\u4e0a\u8fdb\u884c\u4fee\u6539\u3002\u7f16\u8f91\u5b8c\u6bd5\u540e\uff0c\u70b9\u51fb\u6700\u4e0b\u65b9\u7684 \u521b\u5efa \u6309\u94ae\u5373\u53ef\u521b\u5efa\u6536\u96c6\u3002 Note \u590d\u5236\u6536\u96c6\u4e0d\u4f1a\u5f71\u54cd\u88ab\u590d\u5236\u6536\u96c6\uff0c\u539f\u6709\u6536\u96c6\u7684\u6587\u4ef6\u4e0d\u4f1a\u88ab\u590d\u5236\u5230\u65b0\u7684\u6536\u96c6\u4e2d\u3002 7. \u5230\u671f\u63d0\u9192 # \u521b\u5efa\u6536\u96c6\u4e4b\u540e\uff0c\u60a8\u8fd8\u53ef\u4ee5\u5f00\u542f \u5230\u671f\u63d0\u9192 \u529f\u80fd\uff0c\u7cfb\u7edf\u5c06\u901a\u8fc7\u90ae\u4ef6\u63d0\u9192\u5e94\u4ea4\u540d\u5355\u4e2d\u5c1a\u672a\u63d0\u4ea4\u7684\u63d0\u4ea4\u8005\u5c3d\u5feb\u63d0\u4ea4\u3002 Note \u5230\u671f\u63d0\u9192\u529f\u80fd\u9700\u8981\u63d0\u4ea4\u8005\u6ce8\u518c\u8d26\u53f7\u624d\u80fd\u751f\u6548\uff0c\u4e14\u9700\u8981\u60a8\u5728 \u4e2a\u4eba\u4fe1\u606f \u9875\u9762\u586b\u5199\u90ae\u7bb1\u6388\u6743\u7801\u3002 \u8be5\u529f\u80fd\u76ee\u524d\u4ec5\u652f\u6301 QQ \u90ae\u7bb1\u548c\u65b0\u6d6a\u90ae\u7bb1\u3002 \u5982\u4f55\u8bbe\u7f6e\u6388\u6743\u7801\uff1f \u4ee5 QQ \u90ae\u7bb1\u4e3a\u4f8b\uff0c\u6253\u5f00\u7f51\u9875\u7aef QQ \u90ae\u7bb1\uff1a https://mail.qq.com/ \u5e76\u767b\u5f55\u3002\u767b\u5f55\u540e\uff0c\u70b9\u51fb\u56fe\u4e2d\u6240\u793a\u7684 \u8bbe\u7f6e \u6309\u94ae\u3002 \u5728\u5bfc\u822a\u680f\u4e2d\u9009\u62e9 \u8d26\u6237 \uff0c\u663e\u793a\u5982\u4e0b\u754c\u9762\u3002 \u5411\u4e0b\u6ed1\u52a8\u9875\u9762\u627e\u5230 \u751f\u6210\u6388\u6743\u7801 \u90e8\u5206\uff0c\u5f00\u542f\u7ea2\u8272\u65b9\u6846\u6240\u793a\u7684\u529f\u80fd\uff0c\u7136\u540e\u70b9\u51fb \u751f\u6210\u6388\u6743\u7801 \uff0c\u6839\u636e\u63d0\u793a\u64cd\u4f5c\uff0c\u4fdd\u5b58\u6700\u7ec8\u83b7\u5f97\u7684\u6388\u6743\u7801\uff0c\u586b\u5199\u5230 \u4e2a\u4eba\u4fe1\u606f \u4fee\u6539\u9875\u9762\u7684 \u90ae\u7bb1\u6388\u6743\u7801 \u5904\u3002 \u5b8c\u6210\u4ee5\u4e0a\u64cd\u4f5c\u540e\uff0c\u60a8\u5c31\u53ef\u4ee5\u4f7f\u7528\u5230\u671f\u63d0\u9192\u529f\u80fd\u4e86\u3002 8. \u7edf\u8ba1\u6c47\u603b # \u5bf9\u4e8e\u6dfb\u52a0\u4e86\u5e94\u4ea4\u540d\u5355\u7684\u6536\u96c6\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u8bb0\u5f55\u5df2\u63d0\u4ea4\u548c\u672a\u63d0\u4ea4\u7684\u540d\u5355\uff0c\u751f\u6210 Excel \u8868\u683c\uff0c\u70b9\u51fb \u67e5\u770b\u6c47\u603b \u5373\u53ef\u4e0b\u8f7d\u3002","title":"\u6536\u96c6\u8005"},{"location":"user-guide/collector/#_1","text":"","title":"\u6536\u96c6\u8005"},{"location":"user-guide/collector/#1","text":"Tip \u767b\u5f55 \u6309\u94ae\u4f4d\u4e8e\u4e3b\u9875\u53f3\u4e0a\u89d2\u3002 \u5df2\u6709\u5e10\u53f7 \u6253\u5f00\u561f\u561f\u53ef\u6536\u4ef6\u7bb1 Web \u7aef\u7f51\u9875\uff0c\u70b9\u51fb \u767b\u5f55 \u8fdb\u5165\u767b\u5f55\u9875\u9762\uff0c\u586b\u5199\u6ce8\u518c\u5e10\u53f7\u7684\u7528\u6237\u540d\u3001\u5bc6\u7801\uff0c\u70b9\u51fb \u767b\u5f55 \u6309\u94ae\u5373\u53ef\u4f7f\u7528\u3002 Tip \u6ce8\u518c \u6309\u94ae\u4f4d\u4e8e\u4e3b\u9875\u53f3\u4e0a\u89d2\u3002 \u5c1a\u672a\u6ce8\u518c \u6253\u5f00\u561f\u561f\u53ef\u6536\u4ef6\u7bb1 Web \u7aef\u7f51\u9875\uff0c\u70b9\u51fb \u6ce8\u518c \u8fdb\u5165\u6ce8\u518c\u9875\u9762\uff0c\u586b\u5199\u7528\u6237\u540d\u3001\u5bc6\u7801\u7b49\u76f8\u5173\u4fe1\u606f\uff0c\u6ce8\u518c\u6210\u529f\u540e\u518d\u767b\u5f55\u4f7f\u7528\u3002 \u6ce8\u518c\u65f6\u54ea\u4e9b\u4fe1\u606f\u662f\u5fc5\u987b\u586b\u5199\u7684\uff1f \u7528\u6237\u540d\u3001\u5bc6\u7801\u3001\u90ae\u7bb1\u4e3a\u5fc5\u586b\u9879\u3002\u6388\u6743\u7801\u53ef\u4ee5\u540e\u7eed\u5728\u4e2a\u4eba\u4fe1\u606f\u9875\u9762\u6dfb\u52a0\u3002","title":"1. \u6ce8\u518c\u767b\u5f55"},{"location":"user-guide/collector/#2","text":"Tip \u521b\u5efa\u6536\u96c6 \u6309\u94ae\u4f4d\u4e8e\u4e3b\u9875\u5de6\u4e0a\u89d2\u548c\u53f3\u4fa7\u3002 \u70b9\u51fb \u521b\u5efa\u6536\u96c6 \u6309\u94ae\uff0c\u8fdb\u5165\u521b\u5efa\u6536\u96c6\u754c\u9762\u3002 \u6536\u96c6\u4efb\u52a1\u9700\u8981\u8bbe\u7f6e\u7684\u4fe1\u606f\u5927\u81f4\u5305\u62ec \u6536\u96c6\u6807\u9898 \u3001 \u6536\u96c6\u8005 \u3001 \u622a\u6b62\u65f6\u95f4 \u3001 \u8be6\u60c5\u63cf\u8ff0 \u4ee5\u53ca \u5177\u4f53\u7684\u9898\u76ee \u3002 \u521b\u5efa\u6536\u96c6\u7684\u9875\u9762\u5982\u4e0b\u56fe\u6240\u793a\u3002\u7cfb\u7edf\u9ed8\u8ba4\u6dfb\u52a0\u4e86\u4e24\u4e2a\u586b\u7a7a\u9898\uff1a\u201c\u59d3\u540d\u201d\u3001\u201c\u5b66\u53f7\u201d\u548c\u4e00\u4e2a\u6587\u4ef6\u6536\u96c6\u9898\u201c\u6587\u4ef6\u201d\u3002","title":"2. \u521b\u5efa\u6536\u96c6"},{"location":"user-guide/collector/#21","text":"\u8bbe\u7f6e\u6536\u96c6\u7684\u540d\u79f0\uff0c\u9ed8\u8ba4\u4e3a\u201c\u6587\u4ef6\u6536\u96c6\u201d\u3002","title":"2.1 \u6536\u96c6\u6807\u9898"},{"location":"user-guide/collector/#22","text":"\u8bbe\u7f6e\u6536\u96c6\u8005\u3002\u7528\u4e8e\u63d0\u4ea4\u8005\u9274\u522b\u521b\u5efa\u6536\u96c6\u7684\u4eba\u5458\u548c\u4fe1\u606f\u63d0\u4ea4\u6e20\u9053\uff0c\u9632\u6b62\u4fe1\u606f\u6cc4\u6f0f\u3002","title":"2.2 \u6536\u96c6\u8005"},{"location":"user-guide/collector/#23","text":"\u8bbe\u7f6e\u6536\u96c6\u7684\u622a\u6b62\u65f6\u95f4\u3002\u5728\u622a\u6b62\u65e5\u671f\u4e4b\u524d\u7684\u63d0\u4ea4\u89c6\u4e3a\u6709\u6548\u63d0\u4ea4\uff0c\u622a\u6b62\u65e5\u671f\u4e4b\u540e\u8be5\u6536\u96c6\u72b6\u6001\u4f1a\u7531 \u8fdb\u884c\u4e2d \u8f6c\u4e3a \u5df2\u622a\u6b62 \u3002 Warning \u622a\u6b62\u65f6\u95f4\u4e0d\u5f97\u65e9\u4e8e \u5f53\u524d\u65f6\u95f4 \uff0c\u5426\u5219\u5c06\u65e0\u6cd5\u521b\u5efa\u6536\u96c6\u3002","title":"2.3 \u622a\u6b62\u65f6\u95f4"},{"location":"user-guide/collector/#24","text":"\u8bbe\u7f6e\u6536\u96c6\u7684\u76f8\u5173\u63cf\u8ff0\u4fe1\u606f\u3002\u5982\u5411\u63d0\u4ea4\u8005\u63d0\u4f9b\u76f8\u5173\u8bf4\u660e\uff0c\u4ea4\u5f85\u5404\u4e2a\u9898\u76ee\u7684\u63d0\u4ea4\u683c\u5f0f\u7b49\u3002","title":"2.4 \u8be6\u60c5\u63cf\u8ff0"},{"location":"user-guide/collector/#25","text":"\u6536\u96c6\u95ee\u5377\u4e2d\u53ef\u4ee5\u521b\u5efa\u591a\u79cd\u7c7b\u578b\u7684\u9898\u76ee\uff0c\u5305\u62ec \u586b\u7a7a\u9898 \u3001 \u9009\u62e9\u9898 \u3001 \u6587\u4ef6\u9898 \u548c \u95ee\u5377\u9898 \u3002\u6240\u6709\u9898\u76ee\u7684\u53f3\u4e0b\u89d2\u6709 \u5220\u9664\u9898\u76ee \u6309\u94ae\uff0c\u70b9\u51fb\u53ef\u4ee5\u53bb\u6389\u5bf9\u5e94\u7684\u9898\u76ee\u3002\u9898\u76ee\u652f\u6301 \u62d6\u62fd\u6392\u5e8f \uff0c\u53ef\u4ee5\u901a\u8fc7\u9f20\u6807\u6309\u4f4f\u62d6\u52a8\u7684\u65b9\u5f0f\u8bbe\u7f6e\u9898\u76ee\u5728\u95ee\u5377\u4e0a\u7684\u6392\u5217\u987a\u5e8f\u3002 Info \u62d6\u62fd\u6392\u5e8f\u8bc6\u522b\u6bd4\u8f83\u4e25\u683c\uff0c\u9700\u8981\u88ab\u62d6\u52a8\u7684\u9898\u76ee \u8986\u76d6 \u5f85\u653e\u7f6e\u4f4d\u7f6e\u7684\u9898\u76ee\u6240\u5728\u533a\u57df\u624d\u53ef\u6267\u884c\u3002","title":"2.5 \u5177\u4f53\u9898\u76ee"},{"location":"user-guide/collector/#251","text":"\u9700\u8981\u8bbe\u7f6e\u9898\u76ee\u540d\u79f0\u3001\u8be6\u60c5\u63cf\u8ff0\u8fd9\u4e24\u9879\u4fe1\u606f\u3002 \u6536\u96c6\u53d1\u5e03\u540e\uff0c\u63d0\u4ea4\u8005\u5728\u4e0b\u65b9\u7684\u6587\u672c\u6846\u5185\u586b\u5199\u4fe1\u606f\u3002","title":"2.5.1 \u586b\u7a7a\u9898"},{"location":"user-guide/collector/#252","text":"\u9009\u62e9\u9898\u5206\u4e3a\u5355\u9009\u9898\u548c\u591a\u9009\u9898\u4e24\u79cd\u7c7b\u578b\u3002 \u5355\u9009\u9898 \u9700\u8981\u8bbe\u7f6e\u9898\u76ee\u540d\u79f0\u3001\u8be6\u60c5\u63cf\u8ff0\u548c\u6b63\u786e\u9009\u9879\uff0c\u9009\u9879\u4fe1\u606f\u9700\u8981\u5728\u8be6\u60c5\u63cf\u8ff0\u4e2d\u7ed9\u51fa\u3002\u70b9\u51fb\u6b63\u786e\u9009\u9879\u524d\u7684\u5706\u5f62\u6846\uff0c\u53d8\u4e3a \u5b9e\u5fc3 \u4ee3\u8868\u9009\u4e2d\u8be5\u9879\u3002\u5355\u9009\u9898\u53ea\u80fd\u8bbe\u7f6e 1 \u4e2a\u6b63\u786e\u9009\u9879\uff0c\u6700\u591a\u8bbe\u7f6e 4 \u4e2a\u53ef\u9009\u9879\u3002 \u591a\u9009\u9898 \u9700\u8981\u8bbe\u7f6e\u9898\u76ee\u540d\u79f0\u3001\u8be6\u60c5\u63cf\u8ff0\u548c\u6b63\u786e\u9009\u9879\uff0c\u9009\u9879\u4fe1\u606f\u9700\u8981\u5728\u8be6\u60c5\u63cf\u8ff0\u4e2d\u7ed9\u51fa\u3002\u70b9\u51fb\u6b63\u786e\u9009\u9879\u524d\u7684\u5706\u5f62\u6846\uff0c\u53d8\u4e3a \u5b9e\u5fc3 \u4ee3\u8868\u9009\u4e2d\u8be5\u9879\u3002\u591a\u9009\u9898\u9700\u8981\u8bbe\u7f6e\u81f3\u5c11 2 \u4e2a\u6b63\u786e\u9009\u9879\uff0c\u6700\u591a\u8bbe\u7f6e 4 \u4e2a\u53ef\u9009\u9879\u3002","title":"2.5.2 \u9009\u62e9\u9898"},{"location":"user-guide/collector/#253","text":"\u9700\u8981\u8bbe\u7f6e\u9898\u76ee\u540d\u79f0\u3001\u8be6\u60c5\u63cf\u8ff0\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u91cd\u547d\u540d\u89c4\u5219\u3002 \u91cd\u547d\u540d\u89c4\u5219\u7528\u4e8e\u7edf\u4e00\u63d0\u4ea4\u8005\u4e0a\u4f20\u7684\u6587\u4ef6\u547d\u540d\uff0c\u65b9\u4fbf\u6574\u7406\u3002\u547d\u540d\u89c4\u5219\u6765\u81ea\u4e8e\u95ee\u5377\u4e2d\u5176\u4ed6\u586b\u7a7a\u9898\u7684\u9898\u76ee\u540d\u79f0\uff0c\u6700\u7ec8\u6536\u96c6\u5230\u7684\u6587\u4ef6\u4f1a\u6309\u7167\u5f62\u5982 \u9898\u76ee1 + \u9898\u76ee2 \u7684\u683c\u5f0f\u8fdb\u884c\u91cd\u547d\u540d\u3002 \u91cd\u547d\u540d\u89c4\u5219\u793a\u4f8b \u4f8b\u5982\uff0c\u95ee\u5377\u4e2d\u8bbe\u7f6e\u4e86\u4e09\u4e2a\u9898\u76ee\uff1a\u201c\u59d3\u540d\u201d\u3001\u201c\u5b66\u53f7\u201d\u548c\u201c\u6587\u4ef6\u201d\uff0c\u5219\u201c\u6587\u4ef6\u201d\u9898\u76ee\u7684\u91cd\u547d\u540d\u89c4\u5219\u53ef\u4ee5\u8bbe\u5b9a\u4e3a\uff1a \u59d3\u540d \u5b66\u53f7 \u59d3\u540d + \u5b66\u53f7 \u91cd\u547d\u540d\u89c4\u5219\u4e2d\u5404\u4e2a\u9898\u76ee\u7684\u6392\u5217\u987a\u5e8f\u53d6\u51b3\u4e8e\u5b83\u4eec\u5728\u95ee\u5377\u4e0a\u4e0b\u6587\u4e2d\u7684\u76f8\u5bf9\u4f4d\u7f6e\u3002","title":"2.5.3 \u6587\u4ef6\u9898"},{"location":"user-guide/collector/#254","text":"\u9700\u8981\u8bbe\u7f6e\u9898\u76ee\u540d\u79f0\u3001\u8be6\u60c5\u63cf\u8ff0\u3001\u5404\u95ee\u5377\u9009\u9879\u7684\u63cf\u8ff0\u4fe1\u606f\u3002\u8fd9\u79cd\u7c7b\u578b\u9002\u7528\u4e8e\u5355\u4e2a\u9009\u9879\u7684\u63cf\u8ff0\u4fe1\u606f\u6bd4\u8f83\u957f\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u89c6\u4f5c\u9009\u62e9\u9898\u7684\u6269\u5c55\u3002","title":"2.5.4 \u95ee\u5377\u9898"},{"location":"user-guide/collector/#3","text":"\u7f16\u8f91\u5b8c\u6bd5\u540e\uff0c\u70b9\u51fb\u6700\u4e0b\u65b9\u7684 \u521b\u5efa \u6309\u94ae\uff0c\u5982\u679c\u6240\u6709\u5fc5\u586b\u9879\u90fd\u8bbe\u7f6e\u6b63\u786e\u5c31\u80fd\u521b\u5efa\u6536\u96c6\uff0c\u5426\u5219\u7cfb\u7edf\u4f1a\u63d0\u793a\u54ea\u4e9b\u9879\u76ee\u662f\u5fc5\u987b\u586b\u5199\u7684\uff0c\u4fee\u6539\u6b63\u786e\u540e\u624d\u80fd\u521b\u5efa\u3002\u521b\u5efa\u5b8c\u6bd5\u7684\u6536\u96c6\u4f1a\u751f\u6210\u4e00\u4e2a \u6536\u96c6\u94fe\u63a5 \uff0c\u901a\u8fc7\u70b9\u51fb \u5206\u4eab \u6309\u94ae\u53ef\u4ee5\u5c06\u6536\u96c6\u94fe\u63a5\u53d1\u9001\u7ed9\u63d0\u4ea4\u8005\u8fdb\u884c\u63d0\u4ea4\u3002 \u521b\u5efa\u6536\u96c6\u65f6\u54ea\u4e9b\u9879\u76ee\u662f\u5fc5\u987b\u586b\u5199\u7684\uff1f \u6536\u96c6\u6807\u9898 \u3001 \u6536\u96c6\u8005 \u3001 \u622a\u6b62\u65f6\u95f4 \u4e3a\u5fc5\u586b\u9879\u3002","title":"3. \u53d1\u5e03\u6536\u96c6"},{"location":"user-guide/collector/#4","text":"Tip \u67e5\u770b\u6536\u96c6 \u6309\u94ae\u4f4d\u4e8e\u4e3b\u9875\u5de6\u4e0a\u89d2\u3002 \u521b\u5efa\u597d\u7684\u6536\u96c6\u4f1a\u5728\u201c\u6211\u7684\u6536\u96c6\u201d\u9875\u9762\u4e2d\u663e\u793a\uff0c\u60a8\u53ef\u4ee5\u70b9\u51fb \u6536\u96c6\u8bb0\u5f55 \u6309\u94ae\u8fdb\u5165\u8be5\u9875\u9762\uff0c\u6839\u636e\u6536\u96c6\u6807\u9898\u7b49\u76f8\u5173\u4fe1\u606f\u5feb\u901f\u67e5\u627e\u6240\u9700\u8981\u7684\u6536\u96c6\u3002 \u6bcf\u4e2a\u6536\u96c6\u90fd\u6709 5 \u79cd\u64cd\u4f5c\u6309\u94ae\uff1a\u201c\u5206\u4eab\u201d\u3001\u201c\u7edf\u8ba1\u201d\u3001\u201c\u7f16\u8f91\u201d\uff08\u5df2\u622a\u6b62\u4e3a\u201c\u91cd\u542f\u201d\uff09\u3001\u590d\u5236\u3001\u505c\u6b62\uff08\u5df2\u622a\u6b62\u4e3a\u201c\u5220\u9664\u201d\uff09\u3002 \u70b9\u51fb \u7edf\u8ba1 \u6309\u94ae\u53ef\u4ee5\u8fdb\u5165\u5bf9\u5e94\u6536\u96c6\u7684\u201c\u6536\u96c6\u8be6\u60c5\u201d\u9875\u9762\u3002 \u201c\u6536\u96c6\u8be6\u60c5\u201d\u9875\u9762\u6709\u4e09\u79cd\u663e\u793a\u6a21\u5f0f\uff1a\u5e94\u4ea4\u540d\u5355\u3001\u63d0\u4ea4\u8bb0\u5f55\u3001\u7edf\u8ba1\u56fe\u8868\u3002 \u5e94\u4ea4\u540d\u5355\u754c\u9762\uff0c\u53ef\u4ee5\u6dfb\u52a0\u5f53\u524d\u6536\u96c6\u7684\u5e94\u4ea4\u8005\u540d\u5355\uff0c\u7cfb\u7edf\u81ea\u52a8\u751f\u6210 .csv \u6587\u4ef6 \u63d0\u4ea4\u8bb0\u5f55\u754c\u9762\uff0c\u53ef\u4ee5\u67e5\u770b\u6240\u6709\u63d0\u4ea4\u4fe1\u606f\u7684\u65f6\u95f4\u3001\u63d0\u4ea4\u8005\u7b49 \u7edf\u8ba1\u56fe\u8868\u754c\u9762\uff0c\u53ef\u4ee5\u67e5\u770b\u9009\u62e9\u9898\u3001\u95ee\u5377\u9898\u7684\u7edf\u8ba1\u60c5\u51b5","title":"4. \u67e5\u770b\u6536\u96c6"},{"location":"user-guide/collector/#5","text":"\u5982\u679c\u9700\u8981\u4fee\u6539\u5df2\u521b\u5efa\u7684\u6536\u96c6\uff0c\u53ef\u4ee5\u5728\u6536\u96c6\u8be6\u60c5\u754c\u9762\u70b9\u51fb \u7f16\u8f91 \u6309\u94ae\uff0c\u8fdb\u5165\u7f16\u8f91\u72b6\u6001\u3002\u5904\u4e8e\u7f16\u8f91\u72b6\u6001\u65f6\uff0c\u53ef\u4ee5\u4fee\u6539\u6536\u96c6\u6807\u9898\u3001\u6536\u96c6\u8005\u3001\u622a\u6b62\u65f6\u95f4\u3001\u8be6\u60c5\u63cf\u8ff0\uff0c\u4ee5\u53ca\u9898\u76ee\u7684\u5177\u4f53\u5185\u5bb9\uff0c\u4f46 \u4e0d\u80fd\u5220\u9664\u3001\u6dfb\u52a0\u9898\u76ee\u6216\u8c03\u6362\u9898\u76ee\u7684\u4f4d\u7f6e \u3002\u7f16\u8f91\u5b8c\u6bd5\u540e\uff0c\u70b9\u51fb\u6700\u4e0b\u65b9\u7684 \u7f16\u8f91\u5b8c\u6210 \u6309\u94ae\u5373\u53ef\u63d0\u4ea4\u7f16\u8f91\uff0c\u5b8c\u6210\u4fee\u6539\u3002 Note \u4fee\u6539\u6536\u96c6\u4e0d\u4f1a\u5f71\u54cd\u5df2\u6536\u95ee\u5377\u3002","title":"5. \u4fee\u6539\u6536\u96c6"},{"location":"user-guide/collector/#6","text":"\u5982\u679c\u9700\u8981\u65b0\u5efa\u548c\u5df2\u521b\u5efa\u7684\u6536\u96c6 \u7ed3\u6784\u76f8\u540c\u6216\u7c7b\u4f3c \u7684\u6536\u96c6\uff0c\u53ef\u4ee5\u5728\u6536\u96c6\u8be6\u60c5\u754c\u9762\u70b9\u51fb \u590d\u5236 \u6309\u94ae\uff0c\u7cfb\u7edf\u4f1a\u6309\u7167\u5bf9\u5e94\u7684\u6536\u96c6\u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u5b8c\u5168\u76f8\u540c\u7684\u6536\u96c6\uff0c\u60a8\u53ef\u4ee5\u5728\u6b64\u57fa\u7840\u4e0a\u8fdb\u884c\u4fee\u6539\u3002\u7f16\u8f91\u5b8c\u6bd5\u540e\uff0c\u70b9\u51fb\u6700\u4e0b\u65b9\u7684 \u521b\u5efa \u6309\u94ae\u5373\u53ef\u521b\u5efa\u6536\u96c6\u3002 Note \u590d\u5236\u6536\u96c6\u4e0d\u4f1a\u5f71\u54cd\u88ab\u590d\u5236\u6536\u96c6\uff0c\u539f\u6709\u6536\u96c6\u7684\u6587\u4ef6\u4e0d\u4f1a\u88ab\u590d\u5236\u5230\u65b0\u7684\u6536\u96c6\u4e2d\u3002","title":"6. \u590d\u5236\u6536\u96c6"},{"location":"user-guide/collector/#7","text":"\u521b\u5efa\u6536\u96c6\u4e4b\u540e\uff0c\u60a8\u8fd8\u53ef\u4ee5\u5f00\u542f \u5230\u671f\u63d0\u9192 \u529f\u80fd\uff0c\u7cfb\u7edf\u5c06\u901a\u8fc7\u90ae\u4ef6\u63d0\u9192\u5e94\u4ea4\u540d\u5355\u4e2d\u5c1a\u672a\u63d0\u4ea4\u7684\u63d0\u4ea4\u8005\u5c3d\u5feb\u63d0\u4ea4\u3002 Note \u5230\u671f\u63d0\u9192\u529f\u80fd\u9700\u8981\u63d0\u4ea4\u8005\u6ce8\u518c\u8d26\u53f7\u624d\u80fd\u751f\u6548\uff0c\u4e14\u9700\u8981\u60a8\u5728 \u4e2a\u4eba\u4fe1\u606f \u9875\u9762\u586b\u5199\u90ae\u7bb1\u6388\u6743\u7801\u3002 \u8be5\u529f\u80fd\u76ee\u524d\u4ec5\u652f\u6301 QQ \u90ae\u7bb1\u548c\u65b0\u6d6a\u90ae\u7bb1\u3002 \u5982\u4f55\u8bbe\u7f6e\u6388\u6743\u7801\uff1f \u4ee5 QQ \u90ae\u7bb1\u4e3a\u4f8b\uff0c\u6253\u5f00\u7f51\u9875\u7aef QQ \u90ae\u7bb1\uff1a https://mail.qq.com/ \u5e76\u767b\u5f55\u3002\u767b\u5f55\u540e\uff0c\u70b9\u51fb\u56fe\u4e2d\u6240\u793a\u7684 \u8bbe\u7f6e \u6309\u94ae\u3002 \u5728\u5bfc\u822a\u680f\u4e2d\u9009\u62e9 \u8d26\u6237 \uff0c\u663e\u793a\u5982\u4e0b\u754c\u9762\u3002 \u5411\u4e0b\u6ed1\u52a8\u9875\u9762\u627e\u5230 \u751f\u6210\u6388\u6743\u7801 \u90e8\u5206\uff0c\u5f00\u542f\u7ea2\u8272\u65b9\u6846\u6240\u793a\u7684\u529f\u80fd\uff0c\u7136\u540e\u70b9\u51fb \u751f\u6210\u6388\u6743\u7801 \uff0c\u6839\u636e\u63d0\u793a\u64cd\u4f5c\uff0c\u4fdd\u5b58\u6700\u7ec8\u83b7\u5f97\u7684\u6388\u6743\u7801\uff0c\u586b\u5199\u5230 \u4e2a\u4eba\u4fe1\u606f \u4fee\u6539\u9875\u9762\u7684 \u90ae\u7bb1\u6388\u6743\u7801 \u5904\u3002 \u5b8c\u6210\u4ee5\u4e0a\u64cd\u4f5c\u540e\uff0c\u60a8\u5c31\u53ef\u4ee5\u4f7f\u7528\u5230\u671f\u63d0\u9192\u529f\u80fd\u4e86\u3002","title":"7. \u5230\u671f\u63d0\u9192"},{"location":"user-guide/collector/#8","text":"\u5bf9\u4e8e\u6dfb\u52a0\u4e86\u5e94\u4ea4\u540d\u5355\u7684\u6536\u96c6\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u8bb0\u5f55\u5df2\u63d0\u4ea4\u548c\u672a\u63d0\u4ea4\u7684\u540d\u5355\uff0c\u751f\u6210 Excel \u8868\u683c\uff0c\u70b9\u51fb \u67e5\u770b\u6c47\u603b \u5373\u53ef\u4e0b\u8f7d\u3002","title":"8. \u7edf\u8ba1\u6c47\u603b"},{"location":"user-guide/submitter/","text":"\u63d0\u4ea4\u8005 # 1. \u52a0\u5165\u6536\u96c6 # \u63d0\u4ea4\u8005\u70b9\u51fb\u6536\u96c6\u8005\u53d1\u5e03\u7684\u6536\u96c6\u94fe\u63a5(\u6216\u8005\u626b\u63cf\u5bf9\u5e94\u6536\u96c6\u7684\u4e8c\u7ef4\u7801)\uff0c\u8fdb\u5165\u586b\u5199\u754c\u9762\u3002\u5982\u679c\u63d0\u4ea4\u8005\u6ce8\u518c\u4e86\u5e10\u53f7\u5e76\u586b\u5199\u4e86\u90ae\u7bb1\u4fe1\u606f\uff0c\u4e14\u5728\u767b\u5f55\u72b6\u6001\u4e0b\u63d0\u4ea4\u4e86\u6536\u96c6\uff0c\u5219\u9ed8\u8ba4\u542f\u7528 \u5230\u671f\u63d0\u9192 \u529f\u80fd\u3002 Info \u5230\u671f\u63d0\u9192\u529f\u80fd\u662f\u6307\u5728\u622a\u6b62\u65e5\u671f\u524d X \u5c0f\u65f6\uff0c\u82e5\u63d0\u4ea4\u8005\u4f4d\u4e8e\u6536\u96c6\u8005\u8bbe\u7f6e\u7684\u5e94\u4ea4\u540d\u5355\u4e2d\uff0c\u7cfb\u7edf\u5c06\u901a\u8fc7\u90ae\u4ef6\u65b9\u5f0f\u63d0\u9192\u5c1a\u672a\u63d0\u4ea4\u7684\u4eba\u5458\u5c3d\u5feb\u63d0\u4ea4\u3002 2. \u586b\u5199\u4fe1\u606f # \u6536\u96c6\u95ee\u5377\u4e2d\u53ef\u80fd\u51fa\u73b0\u4ee5\u4e0b\u51e0\u79cd\u7c7b\u578b\u7684\u9898\u76ee\uff1a \u586b\u7a7a\u9898 \u3001 \u9009\u62e9\u9898 \u3001 \u6587\u4ef6\u9898 \u548c \u95ee\u5377\u9898 \u3002 2.1 \u586b\u7a7a\u9898 # \u4f8b\u5982\u59d3\u540d\u3001\u5b66\u53f7\u3001\u73ed\u7ea7\u3002\u5728\u8f93\u5165\u6846\u4e2d\u586b\u5165\u4fe1\u606f\u5373\u53ef\u3002 2.2 \u9009\u62e9\u9898 # \u9009\u62e9\u9898\u5206\u4e3a\u5355\u9009\u9898\u548c\u591a\u9009\u9898\u3002 \u5355\u9009\u9898 \u9009\u62e9\u60a8\u8ba4\u4e3a\u6700\u5408\u9002\u7684\u4e00\u4e2a\u9009\u9879\uff0c\u70b9\u51fb\u9009\u9879\u524d\u7684\u5706\u5f62\u6846\u4ee3\u8868\u9009\u62e9\u8be5\u9879\u3002\u5982\u679c\u9700\u8981\u4fee\u6539\u7b54\u6848\uff0c\u8bf7\u76f4\u63a5\u70b9\u51fb\u4fee\u6539\u540e\u9009\u9879\u524d\u7684\u5706\u5f62\u6846\u3002 \u591a\u9009\u9898 \u9009\u62e9\u60a8\u8ba4\u4e3a\u5408\u9002\u7684\u591a\u4e2a\u9009\u9879\uff0c\u70b9\u51fb\u9009\u9879\u524d\u7684\u65b9\u5f62\u6846\u4ee3\u8868\u9009\u62e9\u8be5\u9879\uff0c\u518d\u6b21\u70b9\u51fb\u4ee3\u8868\u53d6\u6d88\u9009\u62e9\u8be5\u9879\u3002 2.3 \u6587\u4ef6\u9898 # \u70b9\u51fb \u9009\u62e9\u6587\u4ef6 \u6309\u94ae\uff0c\u4ece\u672c\u5730\u9009\u62e9\u4e0a\u4f20\u5f85\u63d0\u4ea4\u7684\u6587\u4ef6\u3002 2.4 \u95ee\u5377\u9898 # \u548c \u9009\u62e9\u9898 \u7c7b\u4f3c\uff0c\u9009\u62e9\u60a8\u8ba4\u4e3a\u5408\u9002\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u9009\u9879\uff0c\u70b9\u51fb\u9009\u9879\u524d\u7684\u9009\u9879\u6846\u4ee3\u8868\u9009\u62e9\u8be5\u9879\u3002\u5982\u679c\u662f\u591a\u9009\u9898\uff0c\u518d\u6b21\u70b9\u51fb\u9009\u9879\u6846\u4ee3\u8868\u53d6\u6d88\u9009\u62e9\u8be5\u9879\u3002 3. \u63d0\u4ea4\u6536\u96c6 # \u586b\u5199\u5b8c\u6bd5\u540e\uff0c\u70b9\u51fb\u6700\u4e0b\u65b9\u7684 \u63d0\u4ea4 \u6309\u94ae\uff0c\u5b8c\u6210\u95ee\u5377\u63d0\u4ea4\u3002\u60a8\u53ef\u4ee5\u5728\u622a\u6b62\u65e5\u671f\u524d\u8fdb\u884c\u591a\u6b21\u63d0\u4ea4\u3002 Success \u63d0\u4ea4\u6210\u529f\u540e\uff0c\u60a8\u5c06\u4f1a\u770b\u5230 \u63d0\u4ea4\u6210\u529f \u7684\u9875\u9762\u3002 4. \u5230\u671f\u63d0\u9192 # \u5bf9\u4e8e\u63d0\u4ea4\u8005\u53c2\u4e0e\u7684\u6bcf\u4e2a\u6536\u96c6\uff0c\u5728\u622a\u6b62\u65e5\u671f\u524d X \u5c0f\u65f6\u6536\u96c6\u8005\u4f1a\u901a\u8fc7\u90ae\u7bb1\u5411\u6536\u96c6\u540d\u5355\u4e2d\u5c1a\u672a\u63d0\u4ea4\u6536\u96c6\u7684\u5f85\u63d0\u4ea4\u8005\u53d1\u9001\u50ac\u4ea4\u90ae\u4ef6\u3002 Note \u5230\u671f\u63d0\u9192\u529f\u80fd\u9700\u8981\u63d0\u4ea4\u8005\u6ce8\u518c\u8d26\u53f7\u624d\u80fd\u751f\u6548\u3002","title":"\u63d0\u4ea4\u8005"},{"location":"user-guide/submitter/#_1","text":"","title":"\u63d0\u4ea4\u8005"},{"location":"user-guide/submitter/#1","text":"\u63d0\u4ea4\u8005\u70b9\u51fb\u6536\u96c6\u8005\u53d1\u5e03\u7684\u6536\u96c6\u94fe\u63a5(\u6216\u8005\u626b\u63cf\u5bf9\u5e94\u6536\u96c6\u7684\u4e8c\u7ef4\u7801)\uff0c\u8fdb\u5165\u586b\u5199\u754c\u9762\u3002\u5982\u679c\u63d0\u4ea4\u8005\u6ce8\u518c\u4e86\u5e10\u53f7\u5e76\u586b\u5199\u4e86\u90ae\u7bb1\u4fe1\u606f\uff0c\u4e14\u5728\u767b\u5f55\u72b6\u6001\u4e0b\u63d0\u4ea4\u4e86\u6536\u96c6\uff0c\u5219\u9ed8\u8ba4\u542f\u7528 \u5230\u671f\u63d0\u9192 \u529f\u80fd\u3002 Info \u5230\u671f\u63d0\u9192\u529f\u80fd\u662f\u6307\u5728\u622a\u6b62\u65e5\u671f\u524d X \u5c0f\u65f6\uff0c\u82e5\u63d0\u4ea4\u8005\u4f4d\u4e8e\u6536\u96c6\u8005\u8bbe\u7f6e\u7684\u5e94\u4ea4\u540d\u5355\u4e2d\uff0c\u7cfb\u7edf\u5c06\u901a\u8fc7\u90ae\u4ef6\u65b9\u5f0f\u63d0\u9192\u5c1a\u672a\u63d0\u4ea4\u7684\u4eba\u5458\u5c3d\u5feb\u63d0\u4ea4\u3002","title":"1. \u52a0\u5165\u6536\u96c6"},{"location":"user-guide/submitter/#2","text":"\u6536\u96c6\u95ee\u5377\u4e2d\u53ef\u80fd\u51fa\u73b0\u4ee5\u4e0b\u51e0\u79cd\u7c7b\u578b\u7684\u9898\u76ee\uff1a \u586b\u7a7a\u9898 \u3001 \u9009\u62e9\u9898 \u3001 \u6587\u4ef6\u9898 \u548c \u95ee\u5377\u9898 \u3002","title":"2. \u586b\u5199\u4fe1\u606f"},{"location":"user-guide/submitter/#21","text":"\u4f8b\u5982\u59d3\u540d\u3001\u5b66\u53f7\u3001\u73ed\u7ea7\u3002\u5728\u8f93\u5165\u6846\u4e2d\u586b\u5165\u4fe1\u606f\u5373\u53ef\u3002","title":"2.1 \u586b\u7a7a\u9898"},{"location":"user-guide/submitter/#22","text":"\u9009\u62e9\u9898\u5206\u4e3a\u5355\u9009\u9898\u548c\u591a\u9009\u9898\u3002 \u5355\u9009\u9898 \u9009\u62e9\u60a8\u8ba4\u4e3a\u6700\u5408\u9002\u7684\u4e00\u4e2a\u9009\u9879\uff0c\u70b9\u51fb\u9009\u9879\u524d\u7684\u5706\u5f62\u6846\u4ee3\u8868\u9009\u62e9\u8be5\u9879\u3002\u5982\u679c\u9700\u8981\u4fee\u6539\u7b54\u6848\uff0c\u8bf7\u76f4\u63a5\u70b9\u51fb\u4fee\u6539\u540e\u9009\u9879\u524d\u7684\u5706\u5f62\u6846\u3002 \u591a\u9009\u9898 \u9009\u62e9\u60a8\u8ba4\u4e3a\u5408\u9002\u7684\u591a\u4e2a\u9009\u9879\uff0c\u70b9\u51fb\u9009\u9879\u524d\u7684\u65b9\u5f62\u6846\u4ee3\u8868\u9009\u62e9\u8be5\u9879\uff0c\u518d\u6b21\u70b9\u51fb\u4ee3\u8868\u53d6\u6d88\u9009\u62e9\u8be5\u9879\u3002","title":"2.2 \u9009\u62e9\u9898"},{"location":"user-guide/submitter/#23","text":"\u70b9\u51fb \u9009\u62e9\u6587\u4ef6 \u6309\u94ae\uff0c\u4ece\u672c\u5730\u9009\u62e9\u4e0a\u4f20\u5f85\u63d0\u4ea4\u7684\u6587\u4ef6\u3002","title":"2.3 \u6587\u4ef6\u9898"},{"location":"user-guide/submitter/#24","text":"\u548c \u9009\u62e9\u9898 \u7c7b\u4f3c\uff0c\u9009\u62e9\u60a8\u8ba4\u4e3a\u5408\u9002\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u9009\u9879\uff0c\u70b9\u51fb\u9009\u9879\u524d\u7684\u9009\u9879\u6846\u4ee3\u8868\u9009\u62e9\u8be5\u9879\u3002\u5982\u679c\u662f\u591a\u9009\u9898\uff0c\u518d\u6b21\u70b9\u51fb\u9009\u9879\u6846\u4ee3\u8868\u53d6\u6d88\u9009\u62e9\u8be5\u9879\u3002","title":"2.4 \u95ee\u5377\u9898"},{"location":"user-guide/submitter/#3","text":"\u586b\u5199\u5b8c\u6bd5\u540e\uff0c\u70b9\u51fb\u6700\u4e0b\u65b9\u7684 \u63d0\u4ea4 \u6309\u94ae\uff0c\u5b8c\u6210\u95ee\u5377\u63d0\u4ea4\u3002\u60a8\u53ef\u4ee5\u5728\u622a\u6b62\u65e5\u671f\u524d\u8fdb\u884c\u591a\u6b21\u63d0\u4ea4\u3002 Success \u63d0\u4ea4\u6210\u529f\u540e\uff0c\u60a8\u5c06\u4f1a\u770b\u5230 \u63d0\u4ea4\u6210\u529f \u7684\u9875\u9762\u3002","title":"3. \u63d0\u4ea4\u6536\u96c6"},{"location":"user-guide/submitter/#4","text":"\u5bf9\u4e8e\u63d0\u4ea4\u8005\u53c2\u4e0e\u7684\u6bcf\u4e2a\u6536\u96c6\uff0c\u5728\u622a\u6b62\u65e5\u671f\u524d X \u5c0f\u65f6\u6536\u96c6\u8005\u4f1a\u901a\u8fc7\u90ae\u7bb1\u5411\u6536\u96c6\u540d\u5355\u4e2d\u5c1a\u672a\u63d0\u4ea4\u6536\u96c6\u7684\u5f85\u63d0\u4ea4\u8005\u53d1\u9001\u50ac\u4ea4\u90ae\u4ef6\u3002 Note \u5230\u671f\u63d0\u9192\u529f\u80fd\u9700\u8981\u63d0\u4ea4\u8005\u6ce8\u518c\u8d26\u53f7\u624d\u80fd\u751f\u6548\u3002","title":"4. \u5230\u671f\u63d0\u9192"}]}